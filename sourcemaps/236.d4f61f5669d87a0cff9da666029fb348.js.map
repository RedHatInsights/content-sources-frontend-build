{"version":3,"file":"js/236.1689967372744.7538a4cb5d27809337d4.js","mappings":"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","sources":["webpack:///./src/App.tsx","webpack:///./src/AppEntry.tsx","webpack:///./src/Hooks/useDebounce.tsx","webpack:///./src/Hooks/useDeepCompareEffect.tsx","webpack:///./src/Pages/AdminTaskTable/AdminTaskTable.tsx","webpack:///./src/Pages/AdminTaskTable/components/AdminTaskFilters.tsx","webpack:///./src/Pages/AdminTaskTable/components/StatusIcon.tsx","webpack:///./src/Pages/AdminTaskTable/components/ViewPayloadModal/ViewPayloadModal.tsx","webpack:///./src/Pages/AdminTaskTable/components/ViewPayloadModal/components/AdminTaskInfo.tsx","webpack:///./src/Pages/ContentListTable/ContentListTable.tsx","webpack:///./src/Pages/ContentListTable/components/AddContent/AddContent.tsx","webpack:///./src/Pages/ContentListTable/components/AddContent/components/ContentValidity.tsx","webpack:///./src/Pages/ContentListTable/components/AddContent/helpers.ts","webpack:///./src/Pages/ContentListTable/components/ContentListFilters.tsx","webpack:///./src/Pages/ContentListTable/components/EditContentModal/EditContentModal.tsx","webpack:///./src/Pages/ContentListTable/components/EditContentModal/helpers.ts","webpack:///./src/Pages/ContentListTable/components/PackageCount.tsx","webpack:///./src/Pages/ContentListTable/components/PackageModal/PackageModal.tsx","webpack:///./src/Pages/ContentListTable/components/PackageModal/components/EmptyPackageState.tsx","webpack:///./src/Pages/ContentListTable/components/StatusIcon.tsx","webpack:///./src/Pages/PopularRepositoriesTable/PopularRepositoriesTable.tsx","webpack:///./src/Routes.tsx","webpack:///./src/components/ConditionalTooltip/ConditionalTooltip.tsx","webpack:///./src/components/DropdownSelect/DropdownSelect.tsx","webpack:///./src/components/EmptyTableState/EmptyTableState.tsx","webpack:///./src/components/Error/ErrorPage.tsx","webpack:///./src/components/Header/Header.tsx","webpack:///./src/components/Hide/Hide.tsx","webpack:///./src/components/NoPermissionsPage/NoPermissionsPage.tsx","webpack:///./src/components/QuickStart/QuickStart.tsx","webpack:///./src/components/StatusText/StatusText.tsx","webpack:///./src/components/UrlWithLinkIcon/UrlWithLinkIcon.tsx","webpack:///./src/middleware/AppContext.tsx","webpack:///./src/services/AdminTasks/AdminTaskApi.ts","webpack:///./src/services/AdminTasks/AdminTaskQueries.ts","webpack:///./src/services/Content/ContentApi.ts","webpack:///./src/services/Content/ContentQueries.ts","webpack:///./src/services/Features/FeatureApi.ts","webpack:///./src/services/Features/FeatureQueries.ts","webpack:///./src/services/Notifications/Notifications.tsx","webpack:///./src/store/index.tsx"],"sourcesContent":["import '@redhat-cloud-services/frontend-components-utilities/styles/_all';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport Routes from './Routes';\nimport { useAppContext } from './middleware/AppContext';\nimport { NoPermissionsPage } from './components/NoPermissionsPage/NoPermissionsPage';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nexport default function App() {\n  const { rbac, isFetchingFeatures } = useAppContext();\n\n  switch (true) {\n    case !rbac || isFetchingFeatures:\n      return (\n        <Bullseye>\n          <Spinner size='xl' />\n        </Bullseye>\n      );\n    case rbac?.read:\n      return (\n        <>\n          <NotificationsPortal />\n          <Routes />\n        </>\n      );\n\n    default:\n      return <NoPermissionsPage />;\n  }\n}\n","import React, { useEffect } from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport * as Redux from 'redux';\n\nimport App from './App';\nimport { ContextProvider } from './middleware/AppContext';\nimport { createStore, resetStore } from './store';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false, // TODO: Have a conversation about this\n    },\n  },\n});\n\ninterface AppEntryProps {\n  logger?: Redux.Middleware;\n}\n\nexport default function AppEntry({ logger }: AppEntryProps) {\n  const store = React.useMemo(() => {\n    resetStore();\n    if (logger) {\n      return createStore(logger).store;\n    }\n    return createStore().store;\n  }, [logger]);\n\n  useEffect(() => {\n    insights?.chrome?.appAction?.('view-list-page');\n  }, []);\n\n  return (\n    <ReduxProvider store={store}>\n      <QueryClientProvider client={queryClient}>\n        <ContextProvider>\n          <App />\n        </ContextProvider>\n      </QueryClientProvider>\n    </ReduxProvider>\n  );\n}\n","import { isEqual } from 'lodash';\nimport { useEffect, useState } from 'react';\n\nfunction useDebounce<T>(value: T, delay?: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    // We need to make sure that we compare-deep here as the default useEffect deps do not.\n    if (!isEqual(value, debouncedValue)) {\n      const timer = setTimeout(() => setDebouncedValue(value), delay || 500);\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\nexport default useDebounce;\n","import { isEqual } from 'lodash';\nimport { useEffect, useRef } from 'react';\n\nfunction useDeepCompareMemoize(value) {\n  const ref = useRef();\n  // it can be done by using useMemo as well\n  // but useRef is rather cleaner and easier\n\n  if (!isEqual(value, ref.current)) {\n    ref.current = value;\n  }\n\n  return ref.current;\n}\n\nexport default function useDeepCompareEffect(callback, dependencies) {\n  useEffect(callback, dependencies.map(useDeepCompareMemoize));\n}\n","import {\n  Bullseye,\n  Button,\n  Flex,\n  FlexItem,\n  Grid,\n  OnPerPageSelect,\n  OnSetPage,\n  Pagination,\n  PaginationVariant,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  TableComposable,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  ThProps,\n  Tr,\n} from '@patternfly/react-table';\nimport { global_BackgroundColor_100 } from '@patternfly/react-tokens';\nimport { useState } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components';\nimport Hide from '../../components/Hide/Hide';\nimport EmptyTableState from '../../components/EmptyTableState/EmptyTableState';\nimport AdminTaskFilters from './components/AdminTaskFilters';\nimport ViewPayloadModal from './components/ViewPayloadModal/ViewPayloadModal';\nimport dayjs from 'dayjs';\nimport StatusIcon from './components/StatusIcon';\nimport { useAdminTaskListQuery } from '../../services/AdminTasks/AdminTaskQueries';\nimport { AdminTaskFilterData, AdminTask } from '../../services/AdminTasks/AdminTaskApi';\n\nconst useStyles = createUseStyles({\n  mainContainer: {\n    backgroundColor: global_BackgroundColor_100.value,\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  mainContainer100Height: {\n    composes: ['$mainContainer'], // This extends another class within this stylesheet\n    minHeight: '100%',\n  },\n  topContainer: {\n    justifyContent: 'space-between',\n    padding: '16px 24px', // This is needed\n    height: 'fit-content',\n  },\n  bottomContainer: {\n    justifyContent: 'space-between',\n    height: 'fit-content',\n  },\n  invisible: {\n    opacity: 0,\n  },\n});\n\nexport const formatDate = (date: string): string => dayjs(date).format('DD MMM YYYY HH:mm UTCZ');\n\nconst perPageKey = 'adminTaskPerPage';\n\nconst AdminTaskTable = () => {\n  const classes = useStyles();\n  const storedPerPage = Number(localStorage.getItem(perPageKey)) || 20;\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(storedPerPage);\n  const [activeSortIndex, setActiveSortIndex] = useState<number>(3); // queued_at\n  const [activeSortDirection, setActiveSortDirection] = useState<'asc' | 'desc'>('desc');\n  const [payloadOpen, setPayloadOpen] = useState(false);\n  const [adminTask, setAdminTask] = useState<AdminTask | undefined>(undefined);\n\n  const [filterData, setFilterData] = useState<AdminTaskFilterData>({\n    accountId: '',\n    orgId: '',\n    statuses: [],\n  });\n\n  const clearFilters = () => setFilterData({ statuses: [], accountId: '', orgId: '' });\n\n  const notFiltered =\n    filterData.statuses.length === 0 && filterData.accountId === '' && filterData.orgId === '';\n\n  const columnSortAttributes = [\n    'org_id',\n    'account_id',\n    'typename',\n    'queued_at',\n    'started_at',\n    'finished_at',\n    'status',\n  ];\n\n  const sortString = (): string =>\n    columnSortAttributes[activeSortIndex] + ':' + activeSortDirection;\n\n  const {\n    isLoading,\n    error,\n    isError,\n    isFetching,\n    data = { data: [], meta: { count: 0, limit: 20, offset: 0 } },\n  } = useAdminTaskListQuery(page, perPage, filterData, sortString());\n\n  const actionTakingPlace = isFetching;\n\n  const onSetPage: OnSetPage = (_, newPage) => setPage(newPage);\n\n  const onPerPageSelect: OnPerPageSelect = (_, newPerPage, newPage) => {\n    // Save this value through page refresh for use on next reload\n    localStorage.setItem(perPageKey, newPerPage.toString());\n    setPerPage(newPerPage);\n    setPage(newPage);\n  };\n\n  const sortParams = (columnIndex: number): ThProps['sort'] => ({\n    sortBy: {\n      index: activeSortIndex,\n      direction: activeSortDirection,\n      defaultDirection: 'asc', // starting sort direction when first sorting a column. Defaults to 'asc'\n    },\n    onSort: (_event, index, direction) => {\n      setActiveSortIndex(index);\n      setActiveSortDirection(direction);\n    },\n    columnIndex,\n  });\n\n  const columnHeaders = ['Org ID', 'Account ID', 'Type', 'Queued At', 'Status'];\n\n  // Error is caught in the wrapper component\n  if (isError) throw error;\n\n  const {\n    data: adminTaskList = [],\n    meta: { count = 0 },\n  } = data;\n\n  const itemName = 'tasks';\n  const notFilteredBody = 'Certain actions, such as repository introspection, will start a task';\n\n  const countIsZero = count === 0;\n\n  if (countIsZero && notFiltered && !isLoading)\n    return (\n      <Bullseye data-ouia-safe={!actionTakingPlace} data-ouia-component-id='admin_task_list_page'>\n        <EmptyTableState\n          notFiltered={notFiltered}\n          clearFilters={clearFilters}\n          itemName={itemName}\n          notFilteredBody={notFilteredBody}\n        />\n      </Bullseye>\n    );\n\n  return (\n    <Grid\n      data-ouia-safe={!actionTakingPlace}\n      data-ouia-component-id='admin_task_list_page'\n      className={countIsZero ? classes.mainContainer100Height : classes.mainContainer}\n    >\n      <ViewPayloadModal\n        setClosed={() => setPayloadOpen(false)}\n        open={payloadOpen}\n        uuid={adminTask?.uuid}\n        status={adminTask?.status}\n      />\n      <Flex className={classes.topContainer}>\n        <AdminTaskFilters\n          isLoading={isLoading}\n          setFilterData={(values) => {\n            setFilterData(values);\n            setPage(1);\n          }}\n          filterData={filterData}\n        />\n        <FlexItem>\n          <Hide hide={countIsZero}>\n            <Pagination\n              id='top-pagination-id'\n              widgetId='topPaginationWidgetId'\n              perPageComponent='button'\n              isDisabled={isLoading}\n              itemCount={count}\n              perPage={perPage}\n              page={page}\n              onSetPage={onSetPage}\n              isCompact\n              onPerPageSelect={onPerPageSelect}\n            />\n          </Hide>\n        </FlexItem>\n      </Flex>\n      <Hide hide={!isLoading}>\n        <Grid className={classes.mainContainer}>\n          <SkeletonTable\n            rowSize={perPage}\n            colSize={columnHeaders.length}\n            variant={TableVariant.compact}\n          />\n        </Grid>\n      </Hide>\n      <Hide hide={countIsZero || isLoading}>\n        <>\n          <TableComposable\n            aria-label='Admin tasks table'\n            ouiaId='admin_tasks_table'\n            variant='compact'\n          >\n            <Thead>\n              <Tr>\n                {columnHeaders.map((columnHeader, index) => (\n                  <Th key={columnHeader + 'column'} sort={sortParams(index)}>\n                    {columnHeader}\n                  </Th>\n                ))}\n                <Th>\n                  <Spinner size='md' className={actionTakingPlace ? '' : classes.invisible} />\n                </Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {adminTaskList.map((adminTask: AdminTask) => (\n                <Tr key={adminTask.uuid}>\n                  <Td>{adminTask.org_id}</Td>\n                  <Td>{adminTask.account_id ? adminTask.account_id : 'Unknown'}</Td>\n                  <Td>{adminTask.typename}</Td>\n                  <Td>{formatDate(adminTask.queued_at)}</Td>\n                  <Td>\n                    <StatusIcon status={adminTask.status} />\n                  </Td>\n                  <Td width={10}>\n                    <Button\n                      onClick={async () => {\n                        setPayloadOpen(true);\n                        setAdminTask(adminTask);\n                      }}\n                      variant='secondary'\n                      ouiaId='view_task_details'\n                    >\n                      View Details\n                    </Button>\n                  </Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </TableComposable>\n          <Flex className={classes.bottomContainer}>\n            <FlexItem />\n            <FlexItem>\n              <Pagination\n                id='bottom-pagination-id'\n                widgetId='bottomPaginationWidgetId'\n                perPageComponent='button'\n                itemCount={count}\n                perPage={perPage}\n                page={page}\n                onSetPage={onSetPage}\n                variant={PaginationVariant.bottom}\n                onPerPageSelect={onPerPageSelect}\n              />\n            </FlexItem>\n          </Flex>\n        </>\n      </Hide>\n      <Hide hide={!countIsZero || isLoading}>\n        <EmptyTableState\n          notFiltered={notFiltered}\n          clearFilters={clearFilters}\n          itemName={itemName}\n          notFilteredBody={notFilteredBody}\n        />\n      </Hide>\n    </Grid>\n  );\n};\n\nexport default AdminTaskTable;\n","import { useEffect, useMemo, useState } from 'react';\nimport {\n  Button,\n  Chip,\n  ChipGroup,\n  Flex,\n  FlexItem,\n  InputGroup,\n  SelectVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport DropdownSelect from '../../../components/DropdownSelect/DropdownSelect';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\nimport { global_BackgroundColor_100, global_secondary_color_100 } from '@patternfly/react-tokens';\nimport Hide from '../../../components/Hide/Hide';\nimport useDebounce from '../../../Hooks/useDebounce';\nimport { createUseStyles } from 'react-jss';\nimport { AdminTaskFilterData } from '../../../services/AdminTasks/AdminTaskApi';\n\ninterface Props {\n  isLoading?: boolean;\n  setFilterData: (filterData: AdminTaskFilterData) => void;\n  filterData: AdminTaskFilterData;\n}\n\nconst useStyles = createUseStyles({\n  chipsContainer: {\n    backgroundColor: global_BackgroundColor_100.value,\n    paddingTop: '16px',\n  },\n  clearFilters: {\n    marginLeft: '16px',\n  },\n  searchInput: {\n    paddingRight: '35px',\n    marginRight: '-23px',\n  },\n  searchIcon: {\n    color: global_secondary_color_100.value,\n    position: 'relative',\n    top: '3px',\n    left: '-5px',\n    pointerEvents: 'none',\n  },\n});\n\nconst statusValues = ['Running', 'Failed', 'Completed', 'Canceled', 'Pending'];\nconst filters = ['Account ID', 'Org ID', 'Status'];\nexport type AdminTaskFilters = 'Account ID' | 'Org ID' | 'Status';\n\nconst AdminTaskFilters = ({ isLoading, setFilterData, filterData }: Props) => {\n  const classes = useStyles();\n  const [filterType, setFilterType] = useState<AdminTaskFilters>('Account ID');\n  const [accountId, setAccountId] = useState('');\n  const [orgId, setOrgId] = useState('');\n  const [selectedStatuses, setSelectedStatuses] = useState<string[]>([]);\n\n  const clearFilters = () => {\n    setAccountId('');\n    setOrgId('');\n    setSelectedStatuses([]);\n    setFilterData({ accountId: '', orgId: '', statuses: [] });\n  };\n\n  const deleteItem = (id: string, chips, setChips) => {\n    const copyOfChips = [...chips];\n    const filteredCopy = copyOfChips.filter((chip) => chip !== id);\n    setChips(filteredCopy);\n  };\n\n  useEffect(() => {\n    // If the filters get cleared at the top level, sense that and clear them here.\n    if (\n      filterData.accountId === '' &&\n      filterData.orgId === '' &&\n      filterData.statuses.length === 0 &&\n      (accountId !== '' || orgId !== '' || selectedStatuses.length !== 0)\n    ) {\n      clearFilters();\n    }\n  }, [filterData]);\n\n  const {\n    accountId: debouncedAccountId,\n    orgId: debouncedOrgId,\n    selectedStatuses: debouncedSelectedStatuses,\n  } = useDebounce({\n    accountId,\n    orgId,\n    selectedStatuses,\n  });\n\n  useEffect(() => {\n    setFilterData({\n      accountId: debouncedAccountId,\n      orgId: debouncedOrgId,\n      statuses: debouncedSelectedStatuses,\n    });\n  }, [debouncedAccountId, debouncedOrgId, debouncedSelectedStatuses]);\n\n  const Filter = useMemo(() => {\n    switch (filterType) {\n      case 'Account ID':\n        return (\n          <Flex>\n            <TextInput\n              isDisabled={isLoading}\n              id='account-id'\n              ouiaId='filter_account_id'\n              placeholder='Filter by account ID'\n              value={accountId}\n              onChange={(value) => setAccountId(value)}\n              className={classes.searchInput}\n            />\n            <SearchIcon size='sm' className={classes.searchIcon} />\n          </Flex>\n        );\n      case 'Org ID':\n        return (\n          <Flex>\n            <TextInput\n              isDisabled={isLoading}\n              id='org-id'\n              ouiaId='filter_org_id'\n              placeholder='Filter by org ID'\n              value={orgId}\n              onChange={(value) => setOrgId(value)}\n              className={classes.searchInput}\n            />\n            <SearchIcon size='sm' className={classes.searchIcon} />\n          </Flex>\n        );\n      case 'Status':\n        return (\n          <DropdownSelect\n            toggleAriaLabel='filter status'\n            toggleId='statusSelect'\n            ouiaId='filter_status'\n            isDisabled={isLoading}\n            options={statusValues}\n            variant={SelectVariant.checkbox}\n            selectedProp={selectedStatuses}\n            setSelected={setSelectedStatuses}\n            placeholderText='Filter by status'\n          />\n        );\n      default:\n        return <></>;\n    }\n  }, [filterType, isLoading, accountId, orgId, selectedStatuses]);\n\n  return (\n    <Flex>\n      <FlexItem>\n        <InputGroup>\n          <FlexItem>\n            <DropdownSelect\n              toggleId='filterSelectionDropdown'\n              ouiaId='filter_type'\n              isDisabled={isLoading}\n              options={filters}\n              variant={SelectVariant.single}\n              selectedProp={filterType}\n              setSelected={setFilterType}\n              placeholderText='filter'\n              toggleIcon={<FilterIcon />}\n            />\n          </FlexItem>\n          <FlexItem>{Filter}</FlexItem>\n        </InputGroup>\n      </FlexItem>\n      <Hide hide={!(accountId !== '' || orgId !== '' || selectedStatuses.length)}>\n        <FlexItem fullWidth={{ default: 'fullWidth' }} className={classes.chipsContainer}>\n          <ChipGroup categoryName='Status'>\n            {selectedStatuses.map((status) => (\n              <Chip\n                key={status}\n                onClick={() => deleteItem(status, selectedStatuses, setSelectedStatuses)}\n              >\n                {status}\n              </Chip>\n            ))}\n          </ChipGroup>\n          {orgId !== '' && (\n            <ChipGroup categoryName='Org ID'>\n              <Chip key='org_id_chip' onClick={() => setOrgId('')}>\n                {orgId}\n              </Chip>\n            </ChipGroup>\n          )}\n          {accountId !== '' && (\n            <ChipGroup categoryName='Account ID'>\n              <Chip key='account_id_chip' onClick={() => setAccountId('')}>\n                {accountId}\n              </Chip>\n            </ChipGroup>\n          )}\n          {((debouncedAccountId !== '' && accountId !== '') ||\n            (debouncedOrgId !== '' && orgId !== '') ||\n            !!selectedStatuses?.length) && (\n            <Button className={classes.clearFilters} onClick={clearFilters} variant='link' isInline>\n              Clear filters\n            </Button>\n          )}\n        </FlexItem>\n      </Hide>\n    </Flex>\n  );\n};\n\nexport default AdminTaskFilters;\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  BanIcon,\n  ClockIcon,\n} from '@patternfly/react-icons';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport StatusText from '../../../components/StatusText/StatusText';\nimport {\n  global_danger_color_100,\n  global_success_color_100,\n  global_warning_color_100,\n} from '@patternfly/react-tokens';\nimport { createUseStyles } from 'react-jss';\nimport { AdminTask } from '../../../services/AdminTasks/AdminTaskApi';\n\nconst red = global_danger_color_100.value;\nconst green = global_success_color_100.value;\nconst gold = global_warning_color_100.value;\n\nconst useStyles = createUseStyles({\n  spinner: {\n    animationDuration: '6s !important',\n    margin: '-3px 0',\n  },\n});\n\ninterface Props {\n  status: AdminTask['status'];\n}\n\nconst StatusIcon = ({ status }: Props) => {\n  const classes = useStyles();\n\n  switch (status) {\n    case 'running':\n      return (\n        <Flex alignContent={{ default: 'alignContentCenter' }} direction={{ default: 'row' }}>\n          <FlexItem spacer={{ default: 'spacerSm' }}>\n            <Spinner size='md' className={classes.spinner} />\n          </FlexItem>\n          <FlexItem>\n            <StatusText color='blue'>Running</StatusText>\n          </FlexItem>\n        </Flex>\n      );\n    case 'failed':\n      return (\n        <Flex alignContent={{ default: 'alignContentCenter' }} direction={{ default: 'row' }}>\n          <FlexItem spacer={{ default: 'spacerSm' }}>\n            <ExclamationCircleIcon color={red} />\n          </FlexItem>\n          <FlexItem>\n            <StatusText color='green'>Failed</StatusText>\n          </FlexItem>\n        </Flex>\n      );\n    case 'completed':\n      return (\n        <Flex alignContent={{ default: 'alignContentCenter' }} direction={{ default: 'row' }}>\n          <FlexItem spacer={{ default: 'spacerSm' }}>\n            <CheckCircleIcon color={green} />\n          </FlexItem>\n          <FlexItem>\n            <StatusText color='green'>Completed</StatusText>\n          </FlexItem>\n        </Flex>\n      );\n    case 'canceled':\n      return (\n        <Flex alignContent={{ default: 'alignContentCenter' }} direction={{ default: 'row' }}>\n          <FlexItem spacer={{ default: 'spacerSm' }}>\n            <BanIcon color={red} />\n          </FlexItem>\n          <FlexItem>\n            <StatusText color='green'>Canceled</StatusText>\n          </FlexItem>\n        </Flex>\n      );\n    case 'pending':\n      return (\n        <Flex alignContent={{ default: 'alignContentCenter' }} direction={{ default: 'row' }}>\n          <FlexItem spacer={{ default: 'spacerSm' }}>\n            <ClockIcon color={gold} />\n          </FlexItem>\n          <FlexItem>\n            <StatusText color='blue'>Pending</StatusText>\n          </FlexItem>\n        </Flex>\n      );\n    default:\n      return <></>;\n  }\n};\n\nexport default StatusIcon;\n","import {\n  Bullseye,\n  Modal,\n  ModalVariant,\n  Spinner,\n  Tab,\n  TabContent,\n  TabTitleText,\n  Tabs,\n} from '@patternfly/react-core';\nimport { createUseStyles } from 'react-jss';\nimport { createRef, useMemo, useState } from 'react';\nimport { AdminTask } from '../../../../services/AdminTasks/AdminTaskApi';\nimport AdminTaskInfo from './components/AdminTaskInfo';\nimport ReactJson from 'react-json-view';\nimport Hide from '../../../../components/Hide/Hide';\nimport { useFetchAdminTaskQuery } from '../../../../services/AdminTasks/AdminTaskQueries';\n\nconst useStyles = createUseStyles({\n  jsonView: {\n    fontSize: '12px',\n  },\n});\n\nexport interface ViewPayloadProps {\n  setClosed: () => void;\n  open: boolean;\n  uuid?: string;\n  status?: AdminTask['status'];\n}\n\nexport interface TabData {\n  title: string;\n  data: object;\n  contentRef: React.RefObject<HTMLElement>;\n}\n\nconst ViewPayloadModal = ({ uuid, status, open, setClosed }: ViewPayloadProps) => {\n  const classes = useStyles();\n\n  const [activeTabKey, setActiveTabKey] = useState<string | number>(0);\n  const detailRef = createRef<HTMLElement>();\n\n  const { isLoading, isFetching, data: adminTask } = useFetchAdminTaskQuery(uuid, status);\n\n  const handleTabClick = (_, tabIndex: string | number) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  const tabs = useMemo(() => {\n    const tabs: TabData[] = [];\n\n    if (!adminTask) {\n      return tabs;\n    }\n\n    if (adminTask.payload) {\n      tabs.push({\n        title: 'Payload',\n        data: adminTask.payload,\n        contentRef: createRef<HTMLElement>(),\n      });\n    }\n\n    switch (adminTask.typename) {\n      case 'snapshot': {\n        const pulp = adminTask.pulp;\n        if (pulp) {\n          if (pulp.sync) {\n            tabs.push({\n              title: 'Sync',\n              data: pulp.sync,\n              contentRef: createRef<HTMLElement>(),\n            });\n          }\n          if (pulp.distribution) {\n            tabs.push({\n              title: 'Distribution',\n              data: pulp.distribution,\n              contentRef: createRef<HTMLElement>(),\n            });\n          }\n          if (pulp.publication) {\n            tabs.push({\n              title: 'Publication',\n              data: pulp.publication,\n              contentRef: createRef<HTMLElement>(),\n            });\n          }\n        }\n        break;\n      }\n    }\n    return tabs;\n  }, [adminTask?.uuid, isFetching]);\n\n  const actionTakingPlace = isFetching;\n\n  if (!open) return <></>;\n\n  return (\n    <Modal\n      position='top'\n      variant={ModalVariant.medium}\n      ouiaId='task_details'\n      ouiaSafe={!actionTakingPlace}\n      aria-label='Task details'\n      isOpen={open}\n      onClose={() => {\n        setActiveTabKey(0);\n        setClosed();\n      }}\n      header={\n        <Hide hide={isLoading}>\n          <Tabs\n            activeKey={activeTabKey}\n            onSelect={handleTabClick}\n            aria-label='Task tabs'\n            ouiaId='task-tabs'\n          >\n            <Tab\n              title={<TabTitleText>Task details</TabTitleText>}\n              aria-label='Task details'\n              ouiaId='task-details'\n              eventKey={0}\n              tabContentRef={detailRef}\n            />\n            {tabs.map(({ title, contentRef }) => (\n              <Tab\n                key={title}\n                eventKey={title}\n                aria-label={title}\n                ouiaId={title}\n                tabContentRef={contentRef}\n                title={<TabTitleText>{title}</TabTitleText>}\n              />\n            ))}\n          </Tabs>\n        </Hide>\n      }\n    >\n      <Hide hide={!isLoading}>\n        <Bullseye>\n          <Spinner />\n        </Bullseye>\n      </Hide>\n      <Hide hide={isLoading}>\n        <TabContent aria-label='Task details' eventKey={0} id='task-details' ref={detailRef}>\n          {/* Hide \"isLoading\" checks if adminTask is not null */}\n          <AdminTaskInfo adminTask={adminTask as AdminTask} />\n        </TabContent>\n        {tabs.map(({ title, data, contentRef }, index) => (\n          <TabContent\n            key={index}\n            eventKey={title}\n            aria-label={title}\n            id={title}\n            className={classes.jsonView}\n            ref={contentRef}\n            hidden\n          >\n            <ReactJson\n              name={null}\n              src={data}\n              enableClipboard={(copy) => {\n                navigator.clipboard.writeText(JSON.stringify(copy.src, null, '\\t'));\n              }}\n            />\n          </TabContent>\n        ))}\n      </Hide>\n    </Modal>\n  );\n};\n\nexport default ViewPayloadModal;\n","import {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n} from '@patternfly/react-core';\nimport { AdminTask } from '../../../../../services/AdminTasks/AdminTaskApi';\nimport { formatDate } from '../../../AdminTaskTable';\n\nexport interface AdminTaskInfoProps {\n  adminTask: AdminTask;\n}\nconst AdminTaskInfo = ({ adminTask }: AdminTaskInfoProps) => (\n  <DescriptionList>\n    <DescriptionListGroup>\n      <DescriptionListTerm>UUID</DescriptionListTerm>\n      <DescriptionListDescription>{adminTask.uuid}</DescriptionListDescription>\n    </DescriptionListGroup>\n    <DescriptionListGroup>\n      <DescriptionListTerm>Account ID</DescriptionListTerm>\n      <DescriptionListDescription>\n        {adminTask.account_id ? adminTask.account_id : 'Unknown; repository configuration deleted'}\n      </DescriptionListDescription>\n    </DescriptionListGroup>\n    <DescriptionListGroup>\n      <DescriptionListTerm>Org ID</DescriptionListTerm>\n      <DescriptionListDescription>{adminTask.org_id}</DescriptionListDescription>\n    </DescriptionListGroup>\n    <DescriptionListGroup>\n      <DescriptionListTerm>Type</DescriptionListTerm>\n      <DescriptionListDescription>{adminTask.typename}</DescriptionListDescription>\n    </DescriptionListGroup>\n    <DescriptionListGroup>\n      <DescriptionListTerm>Status</DescriptionListTerm>\n      <DescriptionListDescription>{adminTask.status}</DescriptionListDescription>\n    </DescriptionListGroup>\n    <DescriptionListGroup>\n      <DescriptionListTerm>Queued At</DescriptionListTerm>\n      <DescriptionListDescription>{formatDate(adminTask.queued_at)}</DescriptionListDescription>\n    </DescriptionListGroup>\n    <DescriptionListGroup>\n      <DescriptionListTerm>Started At</DescriptionListTerm>\n      <DescriptionListDescription>\n        {adminTask.started_at ? formatDate(adminTask.started_at) : 'Not started'}\n      </DescriptionListDescription>\n    </DescriptionListGroup>\n    <DescriptionListGroup>\n      <DescriptionListTerm>Finished At</DescriptionListTerm>\n      <DescriptionListDescription>\n        {adminTask.finished_at ? formatDate(adminTask.finished_at) : 'Not finished'}\n      </DescriptionListDescription>\n    </DescriptionListGroup>\n    <DescriptionListGroup>\n      <DescriptionListTerm>Error</DescriptionListTerm>\n      <DescriptionListDescription>\n        {adminTask.error ? adminTask.error : 'None'}\n      </DescriptionListDescription>\n    </DescriptionListGroup>\n  </DescriptionList>\n);\n\nexport default AdminTaskInfo;\n","import {\n  Bullseye,\n  Flex,\n  FlexItem,\n  Grid,\n  OnPerPageSelect,\n  OnSetPage,\n  Pagination,\n  PaginationVariant,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  ActionsColumn,\n  IAction,\n  TableComposable,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  ThProps,\n  Tr,\n} from '@patternfly/react-table';\nimport { global_BackgroundColor_100 } from '@patternfly/react-tokens';\nimport { useCallback, useState } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport {\n  ContentItem,\n  FilterData,\n  IntrospectRepositoryRequestItem,\n} from '../../services/Content/ContentApi';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components';\n\nimport {\n  useContentListQuery,\n  useDeleteContentItemMutate,\n  useIntrospectRepositoryMutate,\n  useRepositoryParams,\n} from '../../services/Content/ContentQueries';\nimport ContentListFilters from './components/ContentListFilters';\nimport Hide from '../../components/Hide/Hide';\nimport EmptyTableState from '../../components/EmptyTableState/EmptyTableState';\nimport { useQueryClient } from 'react-query';\nimport EditContentModal from './components/EditContentModal/EditContentModal';\nimport StatusIcon from './components/StatusIcon';\nimport UrlWithExternalIcon from '../../components/UrlWithLinkIcon/UrlWithLinkIcon';\nimport PackageCount from './components/PackageCount';\nimport { useAppContext } from '../../middleware/AppContext';\nimport ConditionalTooltip from '../../components/ConditionalTooltip/ConditionalTooltip';\nimport dayjs from 'dayjs';\nimport AddContent from './components/AddContent/AddContent';\n\nconst useStyles = createUseStyles({\n  mainContainer: {\n    backgroundColor: global_BackgroundColor_100.value,\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  mainContainer100Height: {\n    composes: ['$mainContainer'], // This extends another class within this stylesheet\n    minHeight: '100%',\n  },\n  topContainer: {\n    justifyContent: 'space-between',\n    padding: '16px 24px', // This is needed\n    height: 'fit-content',\n  },\n  bottomContainer: {\n    justifyContent: 'space-between',\n    height: 'fit-content',\n  },\n  invisible: {\n    opacity: 0,\n  },\n});\n\nconst perPageKey = 'contentListPerPage';\n\nconst ContentListTable = () => {\n  const classes = useStyles();\n  const queryClient = useQueryClient();\n  const { rbac } = useAppContext();\n  const storedPerPage = Number(localStorage.getItem(perPageKey)) || 20;\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(storedPerPage);\n  const [editModalOpen, setEditModalOpen] = useState(false);\n  const [editValues, setEditValues] = useState<ContentItem[]>([]);\n  const [activeSortIndex, setActiveSortIndex] = useState<number>(0);\n  const [activeSortDirection, setActiveSortDirection] = useState<'asc' | 'desc'>('asc');\n\n  const [filterData, setFilterData] = useState<FilterData>({\n    searchQuery: '',\n    versions: [],\n    arches: [],\n    statuses: [],\n  });\n\n  const clearFilters = () =>\n    setFilterData({ searchQuery: '', versions: [], arches: [], statuses: [] });\n\n  const notFiltered =\n    !filterData.arches?.length &&\n    filterData.searchQuery === '' &&\n    !filterData.versions?.length &&\n    !filterData.statuses?.length;\n\n  const {\n    isLoading: repositoryParamsLoading,\n    error: repositoryParamsError,\n    isError: repositoryParamsIsError,\n    data: { distribution_versions: distVersions, distribution_arches: distArches } = {\n      distribution_versions: [],\n      distribution_arches: [],\n    },\n  } = useRepositoryParams();\n\n  const columnSortAttributes = [\n    'name',\n    'distribution_arch',\n    'distribution_versions',\n    'package_count',\n    'last_introspection_time',\n    'status',\n  ];\n\n  const sortString = (): string =>\n    columnSortAttributes[activeSortIndex] + ':' + activeSortDirection;\n\n  const {\n    isLoading,\n    error,\n    isError,\n    isFetching,\n    data = { data: [], meta: { count: 0, limit: 20, offset: 0 } },\n  } = useContentListQuery(page, perPage, filterData, sortString());\n\n  const { mutateAsync: deleteItem, isLoading: isDeleting } = useDeleteContentItemMutate(\n    queryClient,\n    page,\n    perPage,\n    filterData,\n    sortString(),\n  );\n\n  const { mutateAsync: introspectRepository, isLoading: isIntrospecting } =\n    useIntrospectRepositoryMutate(queryClient, page, perPage, filterData, sortString());\n\n  const introspectRepoForUuid = (uuid: string): Promise<void> =>\n    introspectRepository({ uuid: uuid, reset_count: true } as IntrospectRepositoryRequestItem);\n\n  // Other update actions will be added to this later.\n  const actionTakingPlace = isDeleting || isFetching || repositoryParamsLoading || isIntrospecting;\n\n  const onSetPage: OnSetPage = (_, newPage) => setPage(newPage);\n\n  const onPerPageSelect: OnPerPageSelect = (_, newPerPage, newPage) => {\n    // Save this value through page refresh for use on next reload\n    localStorage.setItem(perPageKey, newPerPage.toString());\n    setPerPage(newPerPage);\n    setPage(newPage);\n  };\n\n  const sortParams = (columnIndex: number): ThProps['sort'] => ({\n    sortBy: {\n      index: activeSortIndex,\n      direction: activeSortDirection,\n      defaultDirection: 'asc', // starting sort direction when first sorting a column. Defaults to 'asc'\n    },\n    onSort: (_event, index, direction) => {\n      setActiveSortIndex(index);\n      setActiveSortDirection(direction);\n    },\n    columnIndex,\n  });\n\n  const columnHeaders = [\n    'Name',\n    'Architecture',\n    'Versions',\n    'Packages',\n    'Last Introspection',\n    'Status',\n  ];\n\n  const archesDisplay = (arch: string) => distArches.find(({ label }) => arch === label)?.name;\n\n  const versionDisplay = (versions: Array<string>): string =>\n    distVersions\n      .filter(({ label }) => versions?.includes(label))\n      .map(({ name }) => name)\n      .join(', ');\n\n  const lastIntrospectionDisplay = (time?: string): string =>\n    time === '' || time === undefined ? 'Never' : dayjs(time).fromNow();\n\n  // Error is caught in the wrapper component\n  if (isError) throw error;\n  if (repositoryParamsIsError) throw repositoryParamsError;\n\n  const {\n    data: contentList = [],\n    meta: { count = 0 },\n  } = data;\n\n  const rowActions = useCallback(\n    (rowData: ContentItem): IAction[] => [\n      {\n        title: 'Delete',\n        onClick: () =>\n          deleteItem(rowData?.uuid).then(() => {\n            // If this is the last item on a page, go to previous page.\n            if (page > 1 && count / perPage + 1 >= page && (count - 1) % perPage === 0) {\n              setPage(page - 1);\n            }\n          }),\n      },\n      {\n        isDisabled: actionTakingPlace,\n        title: 'Edit',\n        onClick: () => {\n          setEditValues([rowData]);\n          setEditModalOpen(true);\n        },\n      },\n      {\n        isDisabled: actionTakingPlace || rowData?.status == 'Retrying',\n        title: 'Introspect Now',\n        onClick: () => introspectRepoForUuid(rowData?.uuid),\n      },\n    ],\n    [actionTakingPlace],\n  );\n\n  const itemName = 'custom repositories';\n  const notFilteredBody = 'To get started, create a custom repository';\n\n  const countIsZero = count === 0;\n\n  if (countIsZero && notFiltered && !isLoading)\n    return (\n      <Bullseye data-ouia-safe={!actionTakingPlace} data-ouia-component-id='content_list_page'>\n        <EmptyTableState\n          notFiltered={notFiltered}\n          clearFilters={clearFilters}\n          itemName={itemName}\n          notFilteredBody={notFilteredBody}\n          notFilteredButton={<AddContent />}\n        />\n      </Bullseye>\n    );\n\n  return (\n    <Grid\n      data-ouia-safe={!actionTakingPlace}\n      data-ouia-component-id='content_list_page'\n      className={countIsZero ? classes.mainContainer100Height : classes.mainContainer}\n    >\n      <EditContentModal\n        values={editValues}\n        open={editModalOpen}\n        setClosed={() => {\n          setEditModalOpen(false);\n          setEditValues([]);\n        }}\n      />\n      <Flex className={classes.topContainer}>\n        <ContentListFilters\n          isLoading={isLoading}\n          setFilterData={(values) => {\n            setFilterData(values);\n            setPage(1);\n          }}\n          filterData={filterData}\n        />\n        <FlexItem>\n          <Hide hide={countIsZero}>\n            <Pagination\n              id='top-pagination-id'\n              widgetId='topPaginationWidgetId'\n              perPageComponent='button'\n              isDisabled={isLoading}\n              itemCount={count}\n              perPage={perPage}\n              page={page}\n              onSetPage={onSetPage}\n              isCompact\n              onPerPageSelect={onPerPageSelect}\n            />\n          </Hide>\n        </FlexItem>\n      </Flex>\n      <Hide hide={!isLoading}>\n        <Grid className={classes.mainContainer}>\n          <SkeletonTable\n            rowSize={perPage}\n            colSize={columnHeaders.length}\n            variant={TableVariant.compact}\n          />\n        </Grid>\n      </Hide>\n      <Hide hide={countIsZero || isLoading}>\n        <>\n          <TableComposable\n            aria-label='Custom repositories table'\n            ouiaId='custom_repositories_table'\n            variant='compact'\n          >\n            <Thead>\n              <Tr>\n                {columnHeaders.map((columnHeader, index) => (\n                  <Th key={columnHeader + 'column'} sort={sortParams(index)}>\n                    {columnHeader}\n                  </Th>\n                ))}\n                <Th>\n                  <Spinner size='md' className={actionTakingPlace ? '' : classes.invisible} />\n                </Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {contentList.map((rowData: ContentItem) => {\n                const {\n                  uuid,\n                  name,\n                  url,\n                  distribution_arch,\n                  distribution_versions,\n                  last_introspection_time,\n                } = rowData;\n                return (\n                  <Tr key={uuid}>\n                    <Td>\n                      {name}\n                      <br />\n                      <UrlWithExternalIcon href={url} />\n                    </Td>\n                    <Td>{archesDisplay(distribution_arch)}</Td>\n                    <Td>{versionDisplay(distribution_versions)}</Td>\n                    <Td>\n                      <PackageCount rowData={rowData} />\n                    </Td>\n                    <Td>{lastIntrospectionDisplay(last_introspection_time)}</Td>\n                    <Td>\n                      <StatusIcon rowData={rowData} retryHandler={introspectRepoForUuid} />\n                    </Td>\n                    <Td isActionCell>\n                      <ConditionalTooltip\n                        content={\n                          rowData?.status == 'Pending'\n                            ? 'Introspection is in progress'\n                            : 'You do not have the required permissions to perform this action.'\n                        }\n                        show={!rbac?.write || rowData?.status === 'Pending'}\n                        setDisabled\n                      >\n                        <ActionsColumn items={rowActions(rowData)} />\n                      </ConditionalTooltip>\n                    </Td>\n                  </Tr>\n                );\n              })}\n            </Tbody>\n          </TableComposable>\n          <Flex className={classes.bottomContainer}>\n            <FlexItem />\n            <FlexItem>\n              <Pagination\n                id='bottom-pagination-id'\n                widgetId='bottomPaginationWidgetId'\n                perPageComponent='button'\n                itemCount={count}\n                perPage={perPage}\n                page={page}\n                onSetPage={onSetPage}\n                variant={PaginationVariant.bottom}\n                onPerPageSelect={onPerPageSelect}\n              />\n            </FlexItem>\n          </Flex>\n        </>\n      </Hide>\n      <Hide hide={!countIsZero || isLoading}>\n        <EmptyTableState\n          notFiltered={notFiltered}\n          clearFilters={clearFilters}\n          itemName={itemName}\n          notFilteredBody={notFilteredBody}\n          notFilteredButton={<AddContent />}\n        />\n      </Hide>\n    </Grid>\n  );\n};\n\nexport default ContentListTable;\n","import {\n  Button,\n  FileUpload,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Popover,\n  Radio,\n  SelectVariant,\n  Stack,\n  StackItem,\n  TextInput,\n  Tooltip,\n} from '@patternfly/react-core';\nimport {\n  OutlinedQuestionCircleIcon,\n  PlusCircleIcon,\n  MinusCircleIcon,\n} from '@patternfly/react-icons';\nimport { TableComposable, Tbody, Td, Tr } from '@patternfly/react-table';\nimport { global_Color_200, global_link_Color } from '@patternfly/react-tokens';\nimport { useFormik } from 'formik';\nimport { useEffect, useMemo, useState } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport Hide from '../../../../components/Hide/Hide';\nimport {\n  isValidURL,\n  mapFormikToAPIValues,\n  mapValidationData,\n  makeValidationSchema,\n  FormikValues,\n  maxUploadSize,\n  failedFileUpload,\n} from './helpers';\nimport { useNotification } from '../../../../services/Notifications/Notifications';\nimport ContentValidity from './components/ContentValidity';\nimport {\n  REPOSITORY_PARAMS_KEY,\n  useAddContentQuery,\n  useFetchGpgKey,\n  useValidateContentList,\n} from '../../../../services/Content/ContentQueries';\nimport { RepositoryParamsResponse } from '../../../../services/Content/ContentApi';\nimport DropdownSelect from '../../../../components/DropdownSelect/DropdownSelect';\nimport { useQueryClient } from 'react-query';\nimport ConditionalTooltip from '../../../../components/ConditionalTooltip/ConditionalTooltip';\nimport { useAppContext } from '../../../../middleware/AppContext';\nimport { isEmpty, isEqual } from 'lodash';\nimport useDeepCompareEffect from '../../../../Hooks/useDeepCompareEffect';\nimport useDebounce from '../../../../Hooks/useDebounce';\n\ninterface Props {\n  isDisabled?: boolean;\n}\n\nconst useStyles = createUseStyles({\n  description: {\n    paddingTop: '12px', // 4px on the title bottom padding makes this the \"standard\" 16 total padding\n    color: global_Color_200.value,\n  },\n  removeSideBorder: {\n    '&:after': {\n      borderLeft: 'none!important',\n    },\n  },\n  toggleAllRow: {\n    composes: ['$removeSideBorder'],\n    cursor: 'pointer',\n    borderBottom: 'none!important',\n    '& td': {\n      color: global_link_Color.value + '!important',\n      padding: '8px 0!important',\n    },\n    '& svg': {\n      fill: global_link_Color.value + '!important',\n      padding: '',\n    },\n  },\n  colHeader: {\n    '& td': {\n      '&:not(:last-child)': { cursor: 'pointer' },\n      padding: '8px 0!important',\n    },\n  },\n  mainContentCol: {\n    composes: ['$removeSideBorder'],\n    padding: '16px 0px 16px 36px!important',\n  },\n  toggleAction: {\n    composes: ['$removeSideBorder'],\n    '& button': {\n      padding: '8px',\n    },\n  },\n  addRepositoryButton: {\n    marginBottom: '24px',\n  },\n  saveButton: {\n    marginRight: '36px',\n    transition: 'unset!important',\n  },\n  removeButton: {\n    display: 'flex!important',\n    justifyContent: 'flex-end',\n  },\n  singleContentCol: {\n    padding: '8px 0px 0px !important',\n  },\n  gpgKeyInput: {\n    '& .pf-c-form-control': {\n      backgroundPositionX: 'calc(100% - 1.3em)',\n    },\n  },\n});\n\nconst defaultValues: FormikValues = {\n  name: '',\n  url: '',\n  gpgKey: '',\n  arch: 'any',\n  versions: ['any'],\n  gpgLoading: false,\n  expanded: true,\n  metadataVerification: false,\n};\n\nconst defaultTouchedState = { name: false, url: false, gpgKey: false };\n\nconst AddContent = ({ isDisabled: isButtonDisabled }: Props) => {\n  const { hidePackageVerification, rbac } = useAppContext();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [changeVerified, setChangeVerified] = useState(false);\n  const [gpgKeyList, setGpgKeyList] = useState<Array<string>>(['']);\n  const classes = useStyles();\n  const queryClient = useQueryClient();\n  const formik = useFormik({\n    initialValues: [defaultValues],\n    validateOnBlur: false,\n    validateOnChange: false,\n    validationSchema: makeValidationSchema(),\n    initialTouched: [defaultTouchedState],\n    onSubmit: () => undefined,\n  });\n\n  const updateGpgKey = (index: number, value: string) => {\n    setChangeVerified(false);\n    const updatedData: Array<string> = [...gpgKeyList];\n    updatedData[index] = value;\n    setGpgKeyList(updatedData);\n  };\n\n  const { fetchGpgKey, isLoading: isFetchingGpgKey } = useFetchGpgKey();\n\n  const debouncedGpgKeyList = useDebounce(gpgKeyList, 300);\n\n  const updateGpgKeyList = async (list: Array<string>) => {\n    const updatedData = await Promise.all(\n      [...formik.values].map(async (values, index) => {\n        const updateValue = list[index];\n        if (isValidURL(updateValue)) {\n          const result = await fetchGpgKey(updateValue);\n          // If successful\n          if (result !== updateValue) {\n            updateGpgKey(index, result);\n            return {\n              ...values,\n              gpgKey: result,\n              ...(!hidePackageVerification && values.gpgKey === '' && !!updateValue\n                ? {\n                    metadataVerification:\n                      !!validationList?.[index]?.url?.metadata_signature_present,\n                  }\n                : {}),\n            };\n          }\n        }\n        return {\n          ...values,\n          gpgKey: updateValue,\n          ...(!hidePackageVerification && values.gpgKey === '' && !!updateValue\n            ? {\n                metadataVerification: !!validationList?.[index]?.url?.metadata_signature_present,\n              }\n            : {}),\n        };\n      }),\n    );\n\n    formik.setValues(updatedData);\n  };\n\n  const { distribution_arches: distArches = [], distribution_versions: distVersions = [] } =\n    queryClient.getQueryData<RepositoryParamsResponse>(REPOSITORY_PARAMS_KEY) || {};\n\n  useEffect(() => {\n    updateGpgKeyList(debouncedGpgKeyList);\n  }, [debouncedGpgKeyList]);\n\n  const { distributionArches, distributionVersions } = useMemo(() => {\n    const distributionArches = {};\n    const distributionVersions = {};\n    distArches.forEach(({ name, label }) => (distributionArches[name] = label));\n    distVersions.forEach(({ name, label }) => (distributionVersions[name] = label));\n    return { distributionArches, distributionVersions };\n  }, [distArches, distVersions]);\n\n  const handleModalToggle = () => setIsModalOpen(!isModalOpen);\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    formik.setTouched([defaultTouchedState]);\n    formik.resetForm();\n    setGpgKeyList(['']);\n  };\n\n  const { mutateAsync: addContent, isLoading: isAdding } = useAddContentQuery(\n    queryClient,\n    mapFormikToAPIValues(formik.values),\n  );\n\n  const createDataLengthOf1 = formik.values.length === 1;\n\n  const allExpanded = !formik.values.some(({ expanded }) => !expanded);\n\n  const expandAllToggle = () => {\n    formik.setValues([...formik.values.map((vals) => ({ ...vals, expanded: !allExpanded }))]);\n    setTouchedOnLastItemIfUntouchedAndCollapsed();\n  };\n\n  const updateVariable = (index: number, newValue, callback?: () => void) => {\n    setChangeVerified(false);\n    const updatedData = [...formik.values];\n    updatedData[index] = { ...updatedData[index], ...newValue };\n    formik.setValues(updatedData).then(callback);\n  };\n\n  const addRepository = () => {\n    formik.setTouched([...formik.touched, defaultTouchedState]);\n    formik.setValues([\n      ...formik.values.map((vals) => ({ ...vals, expanded: false })),\n      defaultValues,\n    ]);\n    setChangeVerified(false);\n  };\n\n  const removeRepository = (index: number) => {\n    const newValues = formik.values;\n    newValues.splice(index, 1);\n\n    const newTouched = formik.touched;\n    newTouched.splice(index, 1);\n\n    const newErrors = formik.errors;\n    newErrors.splice(index, 1);\n\n    formik.setTouched(newTouched);\n    formik.setErrors(newErrors);\n    formik.setValues(newValues);\n  };\n\n  const getFieldValidation = (\n    index: number,\n    field: keyof FormikValues,\n  ): 'default' | 'success' | 'error' => {\n    const value = !!formik.values[index]?.[field];\n    const errors = !!formik.errors[index]?.[field];\n    const touched = formik.touched[index]?.[field];\n    switch (true) {\n      case errors && touched:\n        return 'error';\n      case field === 'gpgKey':\n        return 'default';\n      case value && touched:\n        return 'success';\n      default:\n        return 'default';\n    }\n  };\n\n  // The below sets the item as touched if the user closes the expansion without touching any fields\n  // This is to ensure that the user understands that the item needs attention (and is in error)\n  const setTouchedOnLastItemIfUntouchedAndCollapsed = () => {\n    const lastItem = formik.touched?.length - 1 || 0;\n    const { name, url } = formik.touched[lastItem] || {};\n    if (!name && !url) {\n      const updatedTouched = [...formik.touched];\n      updatedTouched[lastItem] = { ...updatedTouched[lastItem], name: true, url: true };\n      formik.setTouched(updatedTouched);\n    }\n  };\n\n  let debouncedValues = useDebounce(formik.values) || []; // Initial value of []\n\n  const {\n    mutateAsync: validateContentList,\n    data: validationList,\n    isLoading: isValidating,\n  } = useValidateContentList();\n\n  useDeepCompareEffect(() => {\n    // If validate is getting called to often, we could useDeepCompare\n    if (isModalOpen) {\n      if (debouncedValues.length !== formik.values.length) debouncedValues = formik.values;\n      const newTouchedValues = [...formik.touched];\n      validateContentList(\n        debouncedValues.map(({ name, url, gpgKey, metadataVerification }, index) => {\n          if (!newTouchedValues[index]?.name && name) {\n            newTouchedValues[index] = { ...newTouchedValues[index], name: true };\n          }\n          if (!newTouchedValues[index]?.url && url) {\n            newTouchedValues[index] = { ...newTouchedValues[index], url: true };\n          }\n          if (!newTouchedValues[index]?.gpgKey && gpgKey) {\n            newTouchedValues[index] = { ...newTouchedValues[index], gpgKey: true };\n          }\n          return {\n            name,\n            url,\n            gpg_key: gpgKey,\n            metadata_verification: metadataVerification,\n          };\n        }),\n      ).then(async (validationData) => {\n        const formikErrors = await formik.validateForm(debouncedValues);\n        const mappedErrorData = mapValidationData(validationData, formikErrors);\n        formik.setErrors(mappedErrorData);\n        setChangeVerified(true);\n        formik.setTouched(newTouchedValues);\n      });\n    }\n  }, [debouncedValues, debouncedValues.length, isModalOpen]);\n\n  const onToggle = (index: number) => {\n    if (formik.values[index]?.expanded) {\n      updateVariable(index, { ...formik.values[index], expanded: false });\n      setTouchedOnLastItemIfUntouchedAndCollapsed();\n    } else updateVariable(index, { ...formik.values[index], expanded: true });\n  };\n\n  const updateArchAndVersion = (index: number) => {\n    const url = formik.values[index]?.url;\n    if (\n      isValidURL(url) &&\n      (formik.values[index]?.arch === 'any' || formik.values[index].versions[0] === 'any')\n    ) {\n      const arch =\n        (formik.values[index]?.arch !== 'any' && formik.values[index]?.arch) ||\n        distArches.find(({ name, label }) => url.includes(name) || url.includes(label))?.label ||\n        'any';\n\n      let versions: Array<string> = [];\n      if (formik.values[index]?.versions?.length && formik.values[index].versions[0] !== 'any') {\n        versions = formik.values[index]?.versions;\n      } else {\n        const newVersion = distVersions.find(\n          ({ name, label }) => url.includes(name) || url.includes('/' + label),\n        )?.label;\n        if (newVersion) versions = [newVersion];\n        if (isEmpty(versions)) versions = ['any'];\n      }\n      if (formik.values[index]?.arch !== arch && !isEqual(versions, formik.values[index]?.arch)) {\n        const updatedData = [...formik.values];\n        updatedData[index] = { ...updatedData[index], ...{ arch, versions } };\n        formik.setValues(updatedData);\n      }\n    }\n  };\n\n  const setVersionSelected = (value: string[], index: number) => {\n    let valueToUpdate = value.map((val) => distributionVersions[val]);\n    if (value.length === 0 || valueToUpdate[value.length - 1] === 'any') {\n      valueToUpdate = ['any'];\n    }\n    if (valueToUpdate.length > 1 && valueToUpdate.includes('any')) {\n      valueToUpdate = valueToUpdate.filter((val) => val !== 'any');\n    }\n\n    updateVariable(index, {\n      versions: valueToUpdate,\n    });\n  };\n\n  const { notify } = useNotification();\n\n  const actionTakingPlace = isFetchingGpgKey || isAdding || isValidating || !changeVerified;\n\n  return (\n    <>\n      <ConditionalTooltip\n        content='You do not have the required permissions to perform this action.'\n        show={!rbac?.write}\n        setDisabled\n      >\n        <Button\n          id='createContentSourceButton'\n          ouiaId='create_content_source'\n          variant='primary'\n          isDisabled={isButtonDisabled}\n          onClick={handleModalToggle}\n        >\n          Add repositories\n        </Button>\n      </ConditionalTooltip>\n      {isModalOpen ? (\n        <Modal\n          position='top'\n          variant={ModalVariant.medium}\n          title='Add custom repositories'\n          ouiaId='add_custom_repository'\n          ouiaSafe={!actionTakingPlace}\n          help={\n            <Popover\n              headerContent={<div>Add a custom repository</div>}\n              bodyContent={<div>Use this form to enter the values for a new repository.</div>}\n            >\n              <Button variant='plain' aria-label='Help'>\n                <OutlinedQuestionCircleIcon />\n              </Button>\n            </Popover>\n          }\n          description={\n            <p className={classes.description}>\n              Add by completing the form. Default values may be provided automatically.\n            </p>\n          }\n          isOpen\n          onClose={closeModal}\n          footer={\n            <Stack>\n              <StackItem>\n                <Button\n                  isDisabled={!formik.isValid || formik.values.length > 19}\n                  className={classes.addRepositoryButton}\n                  variant='link'\n                  onClick={addRepository}\n                  icon={<PlusCircleIcon />}\n                  ouiaId='add_row'\n                >\n                  Add another repository\n                </Button>\n              </StackItem>\n              <StackItem>\n                <Button\n                  className={classes.saveButton}\n                  key='confirm'\n                  ouiaId='modal_save'\n                  variant='primary'\n                  isLoading={actionTakingPlace}\n                  isDisabled={\n                    !changeVerified ||\n                    !formik.isValid ||\n                    actionTakingPlace ||\n                    formik.values?.length !== debouncedValues?.length\n                  }\n                  onClick={() => addContent().then(closeModal)}\n                >\n                  Save\n                </Button>\n                <Button key='cancel' variant='link' onClick={closeModal} ouiaId='modal_cancel'>\n                  Cancel\n                </Button>\n              </StackItem>\n            </Stack>\n          }\n        >\n          <TableComposable aria-label='Table for repo add modal' ouiaId='add_modal_table'>\n            <Hide hide={createDataLengthOf1}>\n              <Tbody isExpanded={allExpanded}>\n                <Tr onClick={expandAllToggle} className={classes.toggleAllRow}>\n                  <Td\n                    className={classes.toggleAction}\n                    isActionCell\n                    expand={{\n                      rowIndex: 0,\n                      isExpanded: allExpanded,\n                    }}\n                  />\n                  <Td dataLabel='expand-collapse'>{allExpanded ? 'Collapse all' : 'Expand all'}</Td>\n                </Tr>\n              </Tbody>\n            </Hide>\n            {formik.values.map(\n              (\n                { expanded, name, url, arch, gpgKey, versions, gpgLoading, metadataVerification },\n                index,\n              ) => (\n                <Tbody key={index} isExpanded={createDataLengthOf1 ? undefined : expanded}>\n                  <Hide hide={createDataLengthOf1}>\n                    <Tr className={classes.colHeader}>\n                      <Td\n                        onClick={() => onToggle(index)}\n                        className={classes.toggleAction}\n                        isActionCell\n                        expand={{\n                          rowIndex: index,\n                          isExpanded: expanded,\n                        }}\n                      />\n                      <Td width={35} onClick={() => onToggle(index)} dataLabel={name}>\n                        {name || 'New content'}\n                      </Td>\n                      <Td onClick={() => onToggle(index)} dataLabel='validity'>\n                        <ContentValidity\n                          touched={formik.touched[index]}\n                          errors={formik.errors[index]}\n                        />\n                      </Td>\n                      <Td dataLabel='removeButton' className={classes.removeButton}>\n                        <Hide hide={formik.values.length === 1}>\n                          <Button\n                            onClick={() => removeRepository(index)}\n                            variant='link'\n                            icon={<MinusCircleIcon />}\n                          >\n                            Remove\n                          </Button>\n                        </Hide>\n                      </Td>\n                    </Tr>\n                  </Hide>\n                  <Tr isExpanded={createDataLengthOf1 ? undefined : expanded}>\n                    <Td\n                      colSpan={4}\n                      className={\n                        createDataLengthOf1 ? classes.singleContentCol : classes.mainContentCol\n                      }\n                    >\n                      <Form>\n                        <FormGroup\n                          label='Name'\n                          isRequired\n                          fieldId='namegroup'\n                          validated={getFieldValidation(index, 'name')}\n                          helperTextInvalid={formik.errors[index]?.name}\n                        >\n                          <TextInput\n                            isRequired\n                            id='name'\n                            name='name'\n                            label='Name'\n                            ouiaId='input_name'\n                            type='text'\n                            validated={getFieldValidation(index, 'name')}\n                            onChange={(value) => {\n                              updateVariable(index, { name: value });\n                            }}\n                            value={name || ''}\n                            placeholder='Enter name'\n                          />\n                        </FormGroup>\n                        <FormGroup\n                          label='URL'\n                          isRequired\n                          fieldId='url'\n                          validated={getFieldValidation(index, 'url')}\n                          helperTextInvalid={formik.errors[index]?.url}\n                        >\n                          <TextInput\n                            isRequired\n                            type='url'\n                            validated={getFieldValidation(index, 'url')}\n                            onBlur={() => updateArchAndVersion(index)}\n                            onChange={(value) => {\n                              if (url !== value) {\n                                updateVariable(index, { url: value });\n                              }\n                            }}\n                            value={url || ''}\n                            placeholder='https://'\n                            id='url'\n                            name='url'\n                            label='Url'\n                            ouiaId='input_url'\n                          />\n                        </FormGroup>\n                        <FormGroup\n                          label='Restrict architecture'\n                          aria-label='restrict_to_architecture'\n                          labelIcon={\n                            <Tooltip content='Optional: Select value to restrict package architecture'>\n                              <OutlinedQuestionCircleIcon\n                                className='pf-u-ml-xs'\n                                color={global_Color_200.value}\n                              />\n                            </Tooltip>\n                          }\n                          fieldId='arch'\n                        >\n                          <DropdownSelect\n                            ouiaId='restrict_to_architecture'\n                            menuAppendTo={document.body}\n                            toggleId={'archSelection' + index}\n                            options={Object.keys(distributionArches)}\n                            variant={SelectVariant.single}\n                            selectedProp={Object.keys(distributionArches).find(\n                              (key: string) => arch === distributionArches[key],\n                            )}\n                            setSelected={(value) =>\n                              updateVariable(index, { arch: distributionArches[value] })\n                            }\n                          />\n                        </FormGroup>\n                        <FormGroup\n                          label='Restrict OS version'\n                          aria-label='restrict_to_os_version'\n                          labelIcon={\n                            <Tooltip content='Optional: Select value to restrict package OS version'>\n                              <OutlinedQuestionCircleIcon\n                                className='pf-u-ml-xs'\n                                color={global_Color_200.value}\n                              />\n                            </Tooltip>\n                          }\n                          fieldId='version'\n                        >\n                          <DropdownSelect\n                            ouiaId='restrict_to_os_version'\n                            menuAppendTo={document.body}\n                            toggleId={'versionSelection' + index}\n                            options={Object.keys(distributionVersions)}\n                            variant={SelectVariant.typeaheadMulti}\n                            selectedProp={Object.keys(distributionVersions).filter((key: string) =>\n                              versions?.includes(distributionVersions[key]),\n                            )}\n                            placeholderText={versions?.length ? '' : 'Any version'}\n                            setSelected={(value) => setVersionSelected(value, index)}\n                          />\n                        </FormGroup>\n                        <FormGroup\n                          label='GPG key'\n                          labelIcon={\n                            <Tooltip content='Optional: Add GPG Key file or URL'>\n                              <OutlinedQuestionCircleIcon\n                                className='pf-u-ml-xs'\n                                color={global_Color_200.value}\n                              />\n                            </Tooltip>\n                          }\n                          fieldId='gpgKey'\n                          validated={getFieldValidation(index, 'gpgKey')}\n                          helperTextInvalid={formik.errors[index]?.gpgKey}\n                        >\n                          <FileUpload\n                            className={classes.gpgKeyInput}\n                            validated={getFieldValidation(index, 'gpgKey')}\n                            id='gpgKey-uploader'\n                            aria-label='gpgkey_file_to_upload'\n                            type='text'\n                            filenamePlaceholder='Drag a file here or upload one'\n                            textAreaPlaceholder='Paste GPG key or URL here'\n                            value={gpgKeyList[index]}\n                            isLoading={gpgLoading}\n                            spellCheck={false}\n                            onDataChange={(value) => updateGpgKey(index, value)}\n                            onTextChange={(value) => updateGpgKey(index, value)}\n                            onClearClick={() => updateGpgKey(index, '')}\n                            dropzoneProps={{\n                              maxSize: maxUploadSize,\n                              onDropRejected: (files) => failedFileUpload(files, notify),\n                            }}\n                            allowEditingUploadedText\n                            browseButtonText='Upload'\n                          />\n                        </FormGroup>\n                        <Hide hide={hidePackageVerification || !gpgKey}>\n                          <FormGroup\n                            fieldId='metadataVerification'\n                            label='Use GPG key for'\n                            isInline\n                          >\n                            <Radio\n                              isDisabled={\n                                validationList?.[index]?.url?.metadata_signature_present !== true\n                              }\n                              id='package-verification-only'\n                              name='package-verification-only'\n                              label='Package verification only'\n                              isChecked={!metadataVerification}\n                              onChange={() =>\n                                updateVariable(index, { metadataVerification: false })\n                              }\n                            />\n                            <ConditionalTooltip\n                              show={\n                                validationList?.[index]?.url?.metadata_signature_present !== true\n                              }\n                              content=\"This repository's metadata is not signed, metadata verification is not possible.\"\n                            >\n                              <Radio\n                                isDisabled={\n                                  validationList?.[index]?.url?.metadata_signature_present !== true\n                                }\n                                id='package-and-repository-verification'\n                                name='package-and-repository-verification'\n                                label='Package and metadata verification'\n                                isChecked={metadataVerification}\n                                onChange={() =>\n                                  updateVariable(index, { metadataVerification: true })\n                                }\n                              />\n                            </ConditionalTooltip>\n                          </FormGroup>\n                        </Hide>\n                      </Form>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ),\n            )}\n          </TableComposable>\n        </Modal>\n      ) : (\n        ''\n      )}\n    </>\n  );\n};\n\nexport default AddContent;\n","import { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport { FormikErrors, FormikTouched } from 'formik';\nimport { global_success_color_100, global_danger_color_100 } from '@patternfly/react-tokens';\nimport { CheckCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { createUseStyles } from 'react-jss';\n\nconst red = global_danger_color_100.value;\nconst green = global_success_color_100.value;\n\nconst useStyles = createUseStyles({\n  red: { color: red, fontWeight: 'bold', fontSize: '14px' },\n  green: { color: green, fontWeight: 'bold', fontSize: '14px' },\n});\n\ninterface Props {\n  touched?: FormikTouched<{\n    name: string;\n    url: string;\n    gpgKey: string;\n    gpgLoading: boolean;\n    expanded: boolean;\n  }>;\n  errors?: FormikErrors<{\n    name: string;\n    url: string;\n    gpgKey: string;\n    gpgLoading: boolean;\n    expanded: boolean;\n  }>;\n  loading?: boolean;\n}\n\nconst ContentValidity = ({ touched, errors, loading }: Props) => {\n  const classes = useStyles();\n  const required = ['name', 'url'];\n  const allTouched = required.every((val) => touched?.[val]);\n  const noErrors = Object.values(errors || {}).every((val) => !val);\n  const hasTouchedError = Object.keys(touched || {})\n    .filter((key) => !!touched?.[key])\n    .some((key) => errors?.[key]);\n\n  switch (true) {\n    case loading:\n      return <Spinner size='md' />;\n    case allTouched && noErrors:\n      return (\n        <Flex alignContent={{ default: 'alignContentCenter' }} direction={{ default: 'row' }}>\n          <FlexItem spacer={{ default: 'spacerSm' }}>\n            <CheckCircleIcon color={green} />\n          </FlexItem>\n          <FlexItem>\n            <span className={classes.green}>Valid</span>\n          </FlexItem>\n        </Flex>\n      );\n    case hasTouchedError:\n      return (\n        <Flex alignContent={{ default: 'alignContentCenter' }} direction={{ default: 'row' }}>\n          <FlexItem spacer={{ default: 'spacerSm' }}>\n            <ExclamationCircleIcon color={red} />\n          </FlexItem>\n          <FlexItem>\n            <span className={classes.red}>Invalid</span>\n          </FlexItem>\n        </Flex>\n      );\n    default:\n      return <></>;\n  }\n};\n\nexport default ContentValidity;\n","import { isEmpty } from 'lodash';\nimport * as Yup from 'yup';\nimport { FormikErrors } from 'formik';\nimport { ValidationResponse } from '../../../../services/Content/ContentApi';\nimport { NotificationPayload } from '../../../../services/Notifications/Notifications';\nimport ERROR_CODE from './httpErrorCodes.json';\nimport { AlertVariant } from '@patternfly/react-core';\n\nexport interface FormikValues {\n  name: string;\n  url: string;\n  gpgKey: string;\n  arch: string;\n  versions: string[];\n  gpgLoading: boolean;\n  metadataVerification: boolean;\n  expanded: boolean;\n}\n\nexport const REGEX_URL =\n  /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\n\nexport const isValidURL = (val: string) => {\n  if (!val) return false;\n  const regex = new RegExp(REGEX_URL);\n  return val.match(regex);\n};\n\nexport const mapFormikToAPIValues = (formikValues: FormikValues[]) =>\n  formikValues.map(({ name, url, arch, versions, gpgKey, metadataVerification }) => ({\n    name,\n    url,\n    distribution_arch: arch,\n    distribution_versions: versions,\n    gpg_key: gpgKey,\n    metadata_verification: metadataVerification,\n  }));\n\nconst mapNoMetaDataError = (validationData: ValidationResponse) =>\n  validationData.map(({ url, ...rest }) => ({\n    ...rest,\n    url: {\n      ...url,\n      error:\n        !url?.error && !url?.metadata_present\n          ? `Unable to retrieve YUM Metadata, Recieved HTTP ${url?.http_code}: ${\n              url ? ERROR_CODE[url.http_code] : ''\n            }`\n          : url?.error,\n    },\n  }));\n\nexport const mapValidationData = (\n  validationData: ValidationResponse,\n  formikErrors: FormikErrors<FormikValues | undefined>[],\n) => {\n  const updatedValidationData = mapNoMetaDataError(validationData);\n  const errors = updatedValidationData.map(({ name, url, gpg_key: gpgKey }, index: number) => ({\n    // First apply the errors found in the ValidationAPI\n    ...(name?.error ? { name: name?.error } : {}),\n    ...(url?.error ? { url: url?.error } : {}),\n    ...(gpgKey?.error ? { gpgKey: gpgKey?.error } : {}),\n    // Overwrite any errors with errors found within the UI itself\n    ...formikErrors[index],\n  }));\n\n  if (errors.every((err) => isEmpty(err))) {\n    return [];\n  }\n\n  return errors;\n};\n\nexport const makeValidationSchema = () => {\n  // This adds the uniqueProperty function to the below schema validation\n  Yup.addMethod(Yup.object, 'uniqueProperty', function (propertyName, message) {\n    return this.test('unique', message, function (value) {\n      if (!value || !value[propertyName]) {\n        return true;\n      }\n      if (\n        this.parent.filter((v) => v !== value).some((v) => v[propertyName] === value[propertyName])\n      ) {\n        throw this.createError({\n          path: `${this.path}.${propertyName}`,\n        });\n      }\n\n      return true;\n    });\n  });\n\n  return Yup.array(\n    Yup.object()\n      .shape({\n        name: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Required'),\n        url: Yup.string().url('Invalid URL').required('Required'),\n      })\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore-next-line\n      .uniqueProperty('name', 'Names must be unique')\n      .uniqueProperty('url', 'Url\\'s must be unique'),\n  );\n};\n\nexport const maxUploadSize = 32000;\nexport const failedFileUpload = (files: File[], notify: (arg: NotificationPayload) => void) => {\n  let description = 'Check the file and try again.';\n  if (files.length != 1) {\n    description = 'Only a single file upload is supported.';\n  } else if (files[0].size > maxUploadSize) {\n    description = 'The file is larger than ' + maxUploadSize + ' bytes.';\n  }\n  notify({\n    variant: AlertVariant.danger,\n    title: 'There was an problem uploading the file.',\n    description,\n  });\n};\n","import { useEffect, useMemo, useState } from 'react';\nimport {\n  Button,\n  Chip,\n  ChipGroup,\n  Flex,\n  FlexItem,\n  InputGroup,\n  SelectVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport DropdownSelect from '../../../components/DropdownSelect/DropdownSelect';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\nimport { global_BackgroundColor_100, global_secondary_color_100 } from '@patternfly/react-tokens';\nimport Hide from '../../../components/Hide/Hide';\nimport { FilterData, RepositoryParamsResponse } from '../../../services/Content/ContentApi';\nimport { useQueryClient } from 'react-query';\nimport { REPOSITORY_PARAMS_KEY } from '../../../services/Content/ContentQueries';\nimport useDebounce from '../../../Hooks/useDebounce';\nimport AddContent from './AddContent/AddContent';\nimport { createUseStyles } from 'react-jss';\nimport { isEmpty } from 'lodash';\nimport { useAppContext } from '../../../middleware/AppContext';\nimport ConditionalTooltip from '../../../components/ConditionalTooltip/ConditionalTooltip';\n\ninterface Props {\n  isLoading?: boolean;\n  setFilterData: (filterData: FilterData) => void;\n  filterData: FilterData;\n}\n\nconst useStyles = createUseStyles({\n  chipsContainer: {\n    backgroundColor: global_BackgroundColor_100.value,\n    paddingTop: '16px',\n  },\n  clearFilters: {\n    marginLeft: '16px',\n  },\n  searchInput: {\n    paddingRight: '35px',\n    marginRight: '-23px',\n  },\n  searchIcon: {\n    color: global_secondary_color_100.value,\n    position: 'relative',\n    top: '3px',\n    left: '-5px',\n    pointerEvents: 'none',\n  },\n});\n\nconst statusValues = ['Invalid', 'Pending', 'Unavailable', 'Valid'];\nexport type Filters = 'Name/URL' | 'Version' | 'Architecture' | 'Status';\n\nconst ContentListFilters = ({ isLoading, setFilterData, filterData }: Props) => {\n  const classes = useStyles();\n  const { rbac } = useAppContext();\n  const queryClient = useQueryClient();\n  const filters = ['Name/URL', 'Version', 'Architecture', 'Status'];\n  const [filterType, setFilterType] = useState<Filters>('Name/URL');\n  const [versionNamesLabels, setVersionNamesLabels] = useState({});\n  const [archNamesLabels, setArchNamesLabels] = useState({});\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedVersions, setSelectedVersions] = useState<string[]>([]);\n  const [selectedArches, setSelectedArches] = useState<string[]>([]);\n  const [selectedStatuses, setSelectedStatuses] = useState<string[]>([]);\n\n  const { distribution_arches = [], distribution_versions = [] } =\n    queryClient.getQueryData<RepositoryParamsResponse>(REPOSITORY_PARAMS_KEY) || {};\n\n  const clearFilters = () => {\n    setSearchQuery('');\n    setSelectedVersions([]);\n    setSelectedArches([]);\n    setSelectedStatuses([]);\n    setFilterData({ searchQuery: '', versions: [], arches: [], statuses: [] });\n  };\n\n  useEffect(() => {\n    // If the filters get cleared at the top level, sense that and clear them here.\n    if (\n      filterData.arches.length === 0 &&\n      filterData.versions.length === 0 &&\n      filterData.statuses.length === 0 &&\n      filterData.searchQuery === '' &&\n      (searchQuery !== '' ||\n        selectedArches.length !== 0 ||\n        selectedVersions.length !== 0 ||\n        selectedStatuses.length !== 0)\n    ) {\n      clearFilters();\n    }\n  }, [filterData]);\n\n  const {\n    searchQuery: debouncedSearchQuery,\n    selectedVersions: debouncedSelectedVersions,\n    selectedArches: debouncedSelectedArches,\n    selectedStatuses: debouncedSelectedStatuses,\n  } = useDebounce({\n    searchQuery,\n    selectedVersions,\n    selectedArches,\n    selectedStatuses,\n  });\n\n  const getLabels = (type: string, names: Array<string>) => {\n    const namesLabels = type === 'arch' ? distribution_arches : distribution_versions;\n\n    const labels: Array<string> = [];\n    names.forEach((name) => {\n      const found = namesLabels.find((v) => v.name === name);\n      if (found) {\n        labels.push(found.label);\n      }\n    });\n    return labels;\n  };\n\n  useEffect(() => {\n    setFilterData({\n      searchQuery: debouncedSearchQuery,\n      versions: getLabels('version', debouncedSelectedVersions),\n      arches: getLabels('arch', debouncedSelectedArches),\n      statuses: debouncedSelectedStatuses,\n    });\n  }, [\n    debouncedSearchQuery,\n    debouncedSelectedVersions,\n    debouncedSelectedArches,\n    debouncedSelectedStatuses,\n  ]);\n\n  const deleteItem = (id: string, chips, setChips) => {\n    const copyOfChips = [...chips];\n    const filteredCopy = copyOfChips.filter((chip) => chip !== id);\n    setChips(filteredCopy);\n  };\n\n  useEffect(() => {\n    if (\n      isEmpty(versionNamesLabels) &&\n      isEmpty(archNamesLabels) &&\n      distribution_arches.length !== 0 &&\n      distribution_versions.length !== 0\n    ) {\n      const arches = {};\n      const versions = {};\n      distribution_arches.forEach((arch) => (arches[arch.name] = arch.label));\n      distribution_versions.forEach((version) => (versions[version.name] = version.label));\n      setVersionNamesLabels(versions);\n      setArchNamesLabels(arches);\n    }\n  }, [distribution_arches, distribution_versions]);\n\n  const Filter = useMemo(() => {\n    switch (filterType) {\n      case 'Name/URL':\n        return (\n          <Flex>\n            <TextInput\n              isDisabled={isLoading}\n              id='search'\n              ouiaId='filter_search'\n              placeholder='Filter by name/url'\n              value={searchQuery}\n              onChange={(value) => setSearchQuery(value)}\n              className={classes.searchInput}\n            />\n            <SearchIcon size='sm' className={classes.searchIcon} />\n          </Flex>\n        );\n      case 'Version':\n        return (\n          <DropdownSelect\n            toggleAriaLabel='filter version'\n            toggleId='versionSelect'\n            ouiaId='filter_version'\n            isDisabled={isLoading}\n            options={Object.keys(versionNamesLabels)}\n            variant={SelectVariant.checkbox}\n            selectedProp={selectedVersions}\n            setSelected={setSelectedVersions}\n            placeholderText='Filter by version'\n          />\n        );\n      case 'Architecture':\n        return (\n          <DropdownSelect\n            toggleAriaLabel='filter architecture'\n            toggleId='archSelect'\n            ouiaId='filter_arch'\n            isDisabled={isLoading}\n            options={Object.keys(archNamesLabels)}\n            variant={SelectVariant.checkbox}\n            selectedProp={selectedArches}\n            setSelected={setSelectedArches}\n            placeholderText='Filter by architecture'\n          />\n        );\n      case 'Status':\n        return (\n          <DropdownSelect\n            toggleAriaLabel='filter status'\n            toggleId='statusSelect'\n            ouiaId='filter_status'\n            isDisabled={isLoading}\n            options={statusValues}\n            variant={SelectVariant.checkbox}\n            selectedProp={selectedStatuses}\n            setSelected={setSelectedStatuses}\n            placeholderText='Filter by status'\n          />\n        );\n      default:\n        return <></>;\n    }\n  }, [\n    filterType,\n    isLoading,\n    searchQuery,\n    versionNamesLabels,\n    selectedVersions,\n    archNamesLabels,\n    selectedArches,\n    selectedStatuses,\n  ]);\n\n  return (\n    <Flex>\n      <FlexItem>\n        <InputGroup>\n          <FlexItem>\n            <DropdownSelect\n              toggleId='filterSelectionDropdown'\n              ouiaId='filter_type'\n              isDisabled={isLoading}\n              options={filters}\n              variant={SelectVariant.single}\n              selectedProp={filterType}\n              setSelected={setFilterType}\n              placeholderText='filter'\n              toggleIcon={<FilterIcon />}\n            />\n          </FlexItem>\n          <FlexItem>{Filter}</FlexItem>\n        </InputGroup>\n      </FlexItem>\n      <FlexItem>\n        <ConditionalTooltip\n          content='You do not have the required permissions to perform this action.'\n          show={!rbac?.write}\n          setDisabled\n        >\n          <AddContent isDisabled={isLoading} />\n        </ConditionalTooltip>\n      </FlexItem>\n      <Hide\n        hide={\n          !(\n            selectedVersions.length ||\n            selectedArches.length ||\n            selectedStatuses.length ||\n            searchQuery != ''\n          )\n        }\n      >\n        <FlexItem fullWidth={{ default: 'fullWidth' }} className={classes.chipsContainer}>\n          <ChipGroup categoryName='Version'>\n            {selectedVersions.map((version) => (\n              <Chip\n                key={version}\n                onClick={() => deleteItem(version, selectedVersions, setSelectedVersions)}\n              >\n                {version}\n              </Chip>\n            ))}\n          </ChipGroup>\n          <ChipGroup categoryName='Architecture'>\n            {selectedArches.map((arch) => (\n              <Chip key={arch} onClick={() => deleteItem(arch, selectedArches, setSelectedArches)}>\n                {arch}\n              </Chip>\n            ))}\n          </ChipGroup>\n          <ChipGroup categoryName='Status'>\n            {selectedStatuses.map((status) => (\n              <Chip\n                key={status}\n                onClick={() => deleteItem(status, selectedStatuses, setSelectedStatuses)}\n              >\n                {status}\n              </Chip>\n            ))}\n          </ChipGroup>\n          {searchQuery !== '' && (\n            <ChipGroup categoryName='Name/URL'>\n              <Chip key='search_chip' onClick={() => setSearchQuery('')}>\n                {searchQuery}\n              </Chip>\n            </ChipGroup>\n          )}\n          {((debouncedSearchQuery !== '' && searchQuery !== '') ||\n            !!selectedVersions?.length ||\n            !!selectedArches?.length ||\n            !!selectedStatuses?.length) && (\n            <Button className={classes.clearFilters} onClick={clearFilters} variant='link' isInline>\n              Clear filters\n            </Button>\n          )}\n        </FlexItem>\n      </Hide>\n    </Flex>\n  );\n};\n\nexport default ContentListFilters;\n","import {\n  Button,\n  FileUpload,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Popover,\n  Radio,\n  SelectVariant,\n  Stack,\n  StackItem,\n  TextInput,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { CheckCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { TableComposable, Tbody, Td, Tr } from '@patternfly/react-table';\nimport {\n  global_Color_200,\n  global_success_color_100,\n  global_link_Color,\n} from '@patternfly/react-tokens';\nimport { useFormik } from 'formik';\nimport { useEffect, useMemo, useState } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport Hide from '../../../../components/Hide/Hide';\nimport useDebounce from '../../../../Hooks/useDebounce';\nimport {\n  REPOSITORY_PARAMS_KEY,\n  useEditContentQuery,\n  useFetchGpgKey,\n  useValidateContentList,\n} from '../../../../services/Content/ContentQueries';\nimport { RepositoryParamsResponse } from '../../../../services/Content/ContentApi';\nimport DropdownSelect from '../../../../components/DropdownSelect/DropdownSelect';\nimport { useQueryClient } from 'react-query';\nimport {\n  failedFileUpload,\n  isValidURL,\n  makeValidationSchema,\n  mapValidationData,\n  maxUploadSize,\n} from '../AddContent/helpers';\nimport ContentValidity from '../AddContent/components/ContentValidity';\nimport {\n  EditContentProps,\n  FormikEditValues,\n  mapFormikToEditAPIValues,\n  mapToDefaultFormikValues,\n} from './helpers';\nimport { isEmpty, isEqual } from 'lodash';\nimport ConditionalTooltip from '../../../../components/ConditionalTooltip/ConditionalTooltip';\nimport { useAppContext } from '../../../../middleware/AppContext';\nimport { useNotification } from '../../../../services/Notifications/Notifications';\nimport useDeepCompareEffect from '../../../../Hooks/useDeepCompareEffect';\n\nconst green = global_success_color_100.value;\n\nconst useStyles = createUseStyles({\n  description: {\n    paddingTop: '12px', // 4px on the title bottom padding makes this the \"standard\" 16 total padding\n    color: global_Color_200.value,\n  },\n  removeSideBorder: {\n    '&:after': {\n      borderLeft: 'none!important',\n    },\n  },\n  toggleAllRow: {\n    composes: ['$removeSideBorder'],\n    cursor: 'pointer',\n    borderBottom: 'none!important',\n    '& td': {\n      color: global_link_Color.value + '!important',\n      padding: '12px 0!important',\n    },\n    '& svg': {\n      fill: global_link_Color.value + '!important',\n      padding: '',\n    },\n  },\n  colHeader: {\n    '& td': {\n      '&:not(:last-child)': { cursor: 'pointer' },\n      padding: '12px 0!important',\n    },\n  },\n  mainContentCol: {\n    composes: ['$removeSideBorder'],\n    padding: '16px 0px 16px 36px!important',\n  },\n  toggleAction: {\n    composes: ['$removeSideBorder'],\n    '& button': {\n      padding: '8px',\n    },\n  },\n  saveButton: {\n    marginRight: '36px',\n    transition: 'unset!important',\n  },\n  singleContentCol: {\n    padding: '8px 0px 0px !important',\n  },\n  gpgKeyInput: {\n    '& .pf-c-form-control': {\n      backgroundPositionX: 'calc(100% - 1.3em)',\n    },\n  },\n});\n\nconst EditContentModal = ({ values, open, setClosed }: EditContentProps) => {\n  if (!open) return <></>;\n  const { hidePackageVerification } = useAppContext();\n  const initialValues = mapToDefaultFormikValues(values);\n  const [changeVerified, setChangeVerified] = useState(false);\n  const [gpgKeyList, setGpgKeyList] = useState<Array<string>>(\n    initialValues.map(({ gpgKey }) => gpgKey),\n  );\n  const classes = useStyles();\n  const queryClient = useQueryClient();\n  const formik = useFormik({\n    initialValues: initialValues,\n    validateOnBlur: false,\n    validateOnChange: false,\n    validationSchema: makeValidationSchema(),\n    initialTouched: values.map(() => ({ name: true, url: true })),\n    onSubmit: () => undefined,\n  });\n\n  const valuesHaveChanged = useMemo(\n    () => !isEqual(initialValues, formik.values),\n    [initialValues, formik.values],\n  );\n\n  const updateGpgKey = (index: number, value: string) => {\n    setChangeVerified(false);\n    const updatedData: Array<string> = [...gpgKeyList];\n    updatedData[index] = value;\n    setGpgKeyList(updatedData);\n  };\n  const { fetchGpgKey, isLoading: isFetchingGpgKey } = useFetchGpgKey();\n\n  const debouncedGpgKeyList = useDebounce(gpgKeyList, 300);\n\n  const updateGpgKeyList = async (list: Array<string>) => {\n    const updatedData = await Promise.all(\n      [...formik.values].map(async (values, index) => {\n        const updateValue = list[index];\n        if (isValidURL(updateValue)) {\n          const result = await fetchGpgKey(updateValue);\n          // If successful\n          if (result !== updateValue) {\n            updateGpgKey(index, result);\n            return {\n              ...values,\n              gpgKey: result,\n              ...(!hidePackageVerification && values.gpgKey === '' && !!updateValue\n                ? {\n                    metadataVerification:\n                      !!validationList?.[index]?.url?.metadata_signature_present,\n                  }\n                : {}),\n            };\n          }\n        }\n\n        return {\n          ...values,\n          gpgKey: updateValue,\n          ...(!hidePackageVerification && values.gpgKey === '' && !!updateValue\n            ? {\n                metadataVerification: !!validationList?.[index]?.url?.metadata_signature_present,\n              }\n            : {}),\n        };\n      }),\n    );\n\n    formik.setValues(updatedData);\n  };\n\n  const { distribution_arches: distArches = [], distribution_versions: distVersions = [] } =\n    queryClient.getQueryData<RepositoryParamsResponse>(REPOSITORY_PARAMS_KEY) || {};\n\n  useEffect(() => {\n    updateGpgKeyList(debouncedGpgKeyList);\n  }, [debouncedGpgKeyList]);\n\n  const { distributionArches, distributionVersions } = useMemo(() => {\n    const distributionArches = {};\n    const distributionVersions = {};\n    distArches.forEach(({ name, label }) => (distributionArches[name] = label));\n    distVersions.forEach(({ name, label }) => (distributionVersions[name] = label));\n    return { distributionArches, distributionVersions };\n  }, [distArches, distVersions]);\n\n  const closeModal = () => {\n    setClosed();\n    formik.resetForm();\n    setGpgKeyList(['']);\n  };\n\n  const { mutateAsync: editContent, isLoading: isEditing } = useEditContentQuery(\n    queryClient,\n    mapFormikToEditAPIValues(formik.values),\n  );\n\n  const createDataLengthOf1 = formik.values.length === 1;\n\n  const allExpanded = !formik.values.some(({ expanded }) => !expanded);\n\n  const expandAllToggle = () => {\n    formik.setValues([...formik.values.map((vals) => ({ ...vals, expanded: !allExpanded }))]);\n  };\n\n  const updateVariable = (index: number, newValue) => {\n    setChangeVerified(false);\n    const updatedData = [...formik.values];\n    updatedData[index] = { ...updatedData[index], ...newValue };\n    formik.setValues(updatedData);\n  };\n\n  const getFieldValidation = (\n    index: number,\n    field: keyof FormikEditValues,\n  ): 'default' | 'success' | 'error' => {\n    const hasNotChanged = isEqual(initialValues[index]?.[field], formik.values[index]?.[field]);\n    const errors = !!formik.errors[index]?.[field];\n    switch (true) {\n      case errors:\n        return 'error';\n      case hasNotChanged:\n        return 'default';\n      case !hasNotChanged:\n        return 'success';\n      default:\n        return 'default';\n    }\n  };\n\n  const debouncedValues = useDebounce(formik.values);\n\n  const {\n    mutateAsync: validateContentList,\n    data: validationList,\n    isLoading: isValidating,\n  } = useValidateContentList();\n\n  useDeepCompareEffect(() => {\n    if (open)\n      validateContentList(\n        debouncedValues.map(({ name, url, gpgKey, metadataVerification, uuid }) => ({\n          name,\n          url,\n          gpg_key: gpgKey,\n          metadata_verification: metadataVerification,\n          uuid,\n        })),\n      ).then(async (validationData) => {\n        const formikErrors = await formik.validateForm(debouncedValues);\n        const mappedErrorData = mapValidationData(validationData, formikErrors);\n        formik.setErrors(mappedErrorData);\n        setChangeVerified(true);\n      });\n  }, [debouncedValues, values, open]);\n\n  const onToggle = (index: number) => {\n    if (formik.values[index]?.expanded) {\n      updateVariable(index, { ...formik.values[index], expanded: false });\n    } else updateVariable(index, { ...formik.values[index], expanded: true });\n  };\n\n  const updateArchAndVersion = (index: number) => {\n    const url = formik.values[index]?.url;\n    if (\n      isValidURL(url) &&\n      (formik.values[index]?.arch === 'any' || formik.values[index].versions[0] === 'any')\n    ) {\n      const arch =\n        (formik.values[index]?.arch !== 'any' && formik.values[index]?.arch) ||\n        distArches.find(({ name, label }) => url.includes(name) || url.includes(label))?.label ||\n        'any';\n\n      let versions: Array<string> = [];\n      if (formik.values[index]?.versions?.length && formik.values[index].versions[0] !== 'any') {\n        versions = formik.values[index]?.versions;\n      } else {\n        const newVersion = distVersions.find(\n          ({ name, label }) => url.includes(name) || url.includes('/' + label),\n        )?.label;\n        if (newVersion) versions = [newVersion];\n        if (isEmpty(versions)) versions = ['any'];\n      }\n      if (formik.values[index]?.arch !== arch && !isEqual(versions, formik.values[index]?.arch)) {\n        const updatedData = [...formik.values];\n        updatedData[index] = { ...updatedData[index], ...{ arch, versions } };\n        formik.setValues(updatedData);\n      }\n    }\n  };\n\n  const urlOnBlur = (index: number) => {\n    updateArchAndVersion(index);\n  };\n\n  const setVersionSelected = (value: string[], index: number) => {\n    let valueToUpdate = value.map((val) => distributionVersions[val]);\n    if (value.length === 0 || valueToUpdate[value.length - 1] === 'any') {\n      valueToUpdate = ['any'];\n    }\n    if (valueToUpdate.length > 1 && valueToUpdate.includes('any')) {\n      valueToUpdate = valueToUpdate.filter((val) => val !== 'any');\n    }\n\n    updateVariable(index, {\n      versions: valueToUpdate,\n    });\n  };\n\n  const { notify } = useNotification();\n\n  const actionTakingPlace = isFetchingGpgKey || isEditing || isValidating || !changeVerified;\n\n  return (\n    <Modal\n      position='top'\n      variant={ModalVariant.medium}\n      title='Edit custom repository'\n      ouiaId='edit_custom_repository'\n      ouiaSafe={!actionTakingPlace}\n      help={\n        <Popover\n          headerContent={<div>Edit custom repository</div>}\n          bodyContent={<div>Use this form to edit the values of an existing repository.</div>}\n        >\n          <Button variant='plain' aria-label='Help'>\n            <OutlinedQuestionCircleIcon />\n          </Button>\n        </Popover>\n      }\n      description={\n        <p className={classes.description}>\n          Edit by completing the form. Default values may be provided automatically.\n        </p>\n      }\n      isOpen={open}\n      onClose={closeModal}\n      footer={\n        <Stack>\n          <StackItem>\n            <Button\n              className={classes.saveButton}\n              key='confirm'\n              ouiaId='edit_modal_save'\n              variant='primary'\n              isLoading={actionTakingPlace}\n              isDisabled={\n                !changeVerified ||\n                !formik.isValid ||\n                actionTakingPlace ||\n                !valuesHaveChanged ||\n                !isEqual(formik.values, debouncedValues)\n              }\n              onClick={() => {\n                editContent().then(closeModal);\n              }}\n            >\n              {valuesHaveChanged ? 'Save changes' : 'No changes'}\n            </Button>\n            <Button key='cancel' variant='link' onClick={closeModal} ouiaId='edit_modal_cancel'>\n              Cancel\n            </Button>\n          </StackItem>\n        </Stack>\n      }\n    >\n      <TableComposable aria-label='Table for edit modal' ouiaId='edit_modal_table'>\n        <Hide hide={createDataLengthOf1}>\n          <Tbody isExpanded={allExpanded}>\n            <Tr onClick={expandAllToggle} className={classes.toggleAllRow}>\n              <Td\n                className={classes.toggleAction}\n                isActionCell\n                expand={{\n                  rowIndex: 0,\n                  isExpanded: allExpanded,\n                }}\n              />\n              <Td dataLabel='expand-collapse'>{allExpanded ? 'Collapse all' : 'Expand all'}</Td>\n            </Tr>\n          </Tbody>\n        </Hide>\n        {formik.values.map(\n          (\n            { expanded, name, url, arch, gpgKey, versions, gpgLoading, metadataVerification },\n            index,\n          ) => (\n            <Tbody key={index} isExpanded={createDataLengthOf1 ? undefined : expanded}>\n              <Hide hide={createDataLengthOf1}>\n                <Tr className={classes.colHeader}>\n                  <Td\n                    onClick={() => onToggle(index)}\n                    className={classes.toggleAction}\n                    isActionCell\n                    expand={{\n                      rowIndex: index,\n                      isExpanded: expanded,\n                    }}\n                  />\n                  <Td width={35} onClick={() => onToggle(index)} dataLabel={name}>\n                    {name || 'New content'}\n                  </Td>\n                  <Td onClick={() => onToggle(index)} dataLabel='validity'>\n                    <ContentValidity\n                      touched={formik.touched[index]}\n                      errors={formik.errors[index]}\n                    />\n                  </Td>\n                </Tr>\n              </Hide>\n              <Tr isExpanded={createDataLengthOf1 ? undefined : expanded}>\n                <Td\n                  colSpan={4}\n                  className={\n                    createDataLengthOf1 ? classes.singleContentCol : classes.mainContentCol\n                  }\n                >\n                  <Form>\n                    <FormGroup\n                      label='Name'\n                      isRequired\n                      fieldId='namegroup'\n                      validated={getFieldValidation(index, 'name')}\n                      helperTextInvalid={formik.errors[index]?.name}\n                    >\n                      <TextInput\n                        isRequired\n                        id='name'\n                        name='name'\n                        label='Name'\n                        ouiaId='input_name'\n                        type='text'\n                        validated={getFieldValidation(index, 'name')}\n                        onChange={(value) => {\n                          updateVariable(index, { name: value });\n                        }}\n                        value={name || ''}\n                        placeholder='Enter name'\n                      />\n                    </FormGroup>\n                    <FormGroup\n                      label='URL'\n                      isRequired\n                      fieldId='url'\n                      validated={getFieldValidation(index, 'url')}\n                      helperTextInvalid={formik.errors[index]?.url}\n                    >\n                      <TextInput\n                        isRequired\n                        type='url'\n                        validated={getFieldValidation(index, 'url')}\n                        onBlur={() => urlOnBlur(index)}\n                        onChange={(value) => {\n                          if (url !== value) {\n                            updateVariable(index, { url: value });\n                          }\n                        }}\n                        value={url || ''}\n                        placeholder='https://'\n                        id='url'\n                        name='url'\n                        label='Url'\n                        ouiaId='input_url'\n                      />\n                    </FormGroup>\n                    <FormGroup\n                      label='Restrict architecture'\n                      aria-label='restrict_to_architecture'\n                      labelIcon={\n                        <Tooltip content='Optional: Select value to restrict package architecture'>\n                          <OutlinedQuestionCircleIcon\n                            className='pf-u-ml-xs'\n                            color={global_Color_200.value}\n                          />\n                        </Tooltip>\n                      }\n                      fieldId='arch'\n                    >\n                      <DropdownSelect\n                        ouiaId='restrict_to_architecture'\n                        validated={getFieldValidation(index, 'arch')}\n                        menuAppendTo={document.body}\n                        toggleId={'archSelection' + index}\n                        options={Object.keys(distributionArches)}\n                        variant={SelectVariant.single}\n                        selectedProp={Object.keys(distributionArches).find(\n                          (key: string) => arch === distributionArches[key],\n                        )}\n                        setSelected={(value) =>\n                          updateVariable(index, { arch: distributionArches[value] })\n                        }\n                      />\n                    </FormGroup>\n                    <FormGroup\n                      label='Restrict OS version'\n                      aria-label='restrict_to_os_version'\n                      labelIcon={\n                        <Tooltip content='Optional: Select value to restrict package OS version'>\n                          <OutlinedQuestionCircleIcon\n                            className='pf-u-ml-xs'\n                            color={global_Color_200.value}\n                          />\n                        </Tooltip>\n                      }\n                      fieldId='version'\n                    >\n                      <DropdownSelect\n                        ouiaId='restrict_to_os_version'\n                        validated={getFieldValidation(index, 'versions')}\n                        menuAppendTo={document.body}\n                        toggleId={'versionSelection' + index}\n                        options={Object.keys(distributionVersions)}\n                        variant={SelectVariant.typeaheadMulti}\n                        selectedProp={Object.keys(distributionVersions).filter((key: string) =>\n                          versions?.includes(distributionVersions[key]),\n                        )}\n                        placeholderText={versions?.length ? '' : 'Any version'}\n                        setSelected={(value) => setVersionSelected(value, index)}\n                      />\n                    </FormGroup>\n                    <FormGroup\n                      label='GPG key'\n                      labelIcon={\n                        <Tooltip content='Optional: Add GPG Key file or URL'>\n                          <OutlinedQuestionCircleIcon\n                            className='pf-u-ml-xs'\n                            color={global_Color_200.value}\n                          />\n                        </Tooltip>\n                      }\n                      fieldId='gpgKey'\n                      validated={getFieldValidation(index, 'gpgKey')}\n                      helperTextInvalid={formik.errors[index]?.gpgKey}\n                    >\n                      <FileUpload\n                        className={classes.gpgKeyInput}\n                        validated={getFieldValidation(index, 'gpgKey')}\n                        id='gpgKey-uploader'\n                        aria-label='gpgkey_file_to_upload'\n                        type='text'\n                        filenamePlaceholder='Drag a file here or upload one'\n                        textAreaPlaceholder='Paste GPG key or URL here'\n                        value={gpgKeyList[index]}\n                        isLoading={gpgLoading}\n                        spellCheck={false}\n                        onDataChange={(value) => updateGpgKey(index, value)}\n                        onTextChange={(value) => updateGpgKey(index, value)}\n                        onClearClick={() => updateGpgKey(index, '')}\n                        dropzoneProps={{\n                          maxSize: maxUploadSize,\n                          onDropRejected: (files) => failedFileUpload(files, notify),\n                        }}\n                        allowEditingUploadedText\n                        browseButtonText='Upload'\n                      />\n                    </FormGroup>\n                    <Hide hide={hidePackageVerification || !gpgKey}>\n                      <FormGroup fieldId='metadataVerification' label='Use GPG key for' isInline>\n                        <Radio\n                          isDisabled={\n                            validationList?.[index]?.url?.metadata_signature_present !== true\n                          }\n                          id='package verification only'\n                          name='package-verification-only'\n                          label='Package verification only'\n                          isChecked={!metadataVerification}\n                          onChange={() => updateVariable(index, { metadataVerification: false })}\n                        />\n                        <ConditionalTooltip\n                          show={validationList?.[index]?.url?.metadata_signature_present !== true}\n                          content=\"This repository's metadata is not signed, metadata verification is not possible.\"\n                        >\n                          <Radio\n                            isDisabled={\n                              validationList?.[index]?.url?.metadata_signature_present !== true\n                            }\n                            id='Package and metadata verification'\n                            name='package-and-repository-verification'\n                            label='Package and metadata verification'\n                            isChecked={metadataVerification}\n                            onChange={() => updateVariable(index, { metadataVerification: true })}\n                          />\n                        </ConditionalTooltip>\n                        <Hide\n                          hide={getFieldValidation(index, 'metadataVerification') !== 'success'}\n                        >\n                          <CheckCircleIcon noVerticalAlign color={green} />\n                        </Hide>\n                      </FormGroup>\n                    </Hide>\n                  </Form>\n                </Td>\n              </Tr>\n            </Tbody>\n          ),\n        )}\n      </TableComposable>\n    </Modal>\n  );\n};\n\nexport default EditContentModal;\n","import { ContentItem, EditContentRequest } from '../../../../services/Content/ContentApi';\nexport interface EditContentProps {\n  setClosed: () => void;\n  open: boolean;\n  values: ContentItem[];\n}\n\nexport interface FormikEditValues {\n  name: string;\n  url: string;\n  gpgKey: string;\n  metadataVerification: boolean;\n  arch: string;\n  versions: string[];\n  gpgLoading: boolean;\n  expanded: boolean;\n  uuid: string;\n}\n\nexport const mapFormikToEditAPIValues = (formikValues: FormikEditValues[]): EditContentRequest =>\n  formikValues.map(({ name, url, arch, versions, gpgKey, metadataVerification, uuid }) => ({\n    uuid,\n    name,\n    url,\n    distribution_arch: arch,\n    distribution_versions: versions,\n    gpg_key: gpgKey,\n    metadata_verification: metadataVerification,\n  }));\n\nexport const mapToDefaultFormikValues = (values: EditContentProps['values']): FormikEditValues[] =>\n  values.map(\n    (\n      {\n        name,\n        url,\n        distribution_arch: arch,\n        distribution_versions: versions,\n        uuid,\n        gpg_key: gpgKey,\n        metadata_verification: metadataVerification,\n      },\n      index,\n    ) => ({\n      name,\n      url,\n      arch,\n      versions,\n      gpgKey,\n      gpgLoading: false,\n      metadataVerification,\n      expanded: index + 1 === values.length,\n      uuid,\n    }),\n  );\n","import { Button, Text, Tooltip } from '@patternfly/react-core';\nimport { createUseStyles } from 'react-jss';\nimport { global_disabled_color_100 } from '@patternfly/react-tokens';\nimport { useState } from 'react';\nimport Hide from '../../../components/Hide/Hide';\nimport { ContentItem } from '../../../services/Content/ContentApi';\nimport PackageModal from './PackageModal/PackageModal';\n\nconst useStyles = createUseStyles({\n  text: {\n    color: global_disabled_color_100.value,\n    width: 'fit-content',\n  },\n  link: {\n    padding: 0,\n  },\n});\n\ninterface Props {\n  rowData: ContentItem;\n}\n\nconst PackageCount = ({ rowData }: Props) => {\n  const classes = useStyles();\n  const [modalOpen, setModalOpen] = useState(false);\n\n  if (!rowData.package_count && rowData.status === 'Pending') {\n    return (\n      <Tooltip isContentLeftAligned content='Introspection is in progress'>\n        <Text className={classes.text}>N/A</Text>\n      </Tooltip>\n    );\n  }\n\n  if (rowData.status === 'Invalid') {\n    return (\n      <Tooltip isContentLeftAligned content='Repository is invalid.'>\n        <Text className={classes.text}>N/A</Text>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <>\n      <Hide hide={!modalOpen}>\n        <PackageModal rowData={rowData} closeModal={() => setModalOpen(false)} />\n      </Hide>\n      <Button\n        ouiaId='package_count_button'\n        variant='link'\n        onClick={() => setModalOpen(true)}\n        className={classes.link}\n      >\n        {rowData.package_count}\n      </Button>\n    </>\n  );\n};\n\nexport default PackageCount;\n","import {\n  Button,\n  Flex,\n  FlexItem,\n  Grid,\n  Modal,\n  ModalVariant,\n  OnPerPageSelect,\n  OnSetPage,\n  Pagination,\n  PaginationVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport {\n  InnerScrollContainer,\n  TableComposable,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  ThProps,\n  Tr,\n} from '@patternfly/react-table';\nimport {\n  global_BackgroundColor_100,\n  global_secondary_color_100,\n  global_Color_200,\n} from '@patternfly/react-tokens';\nimport { useEffect, useMemo, useState } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components';\nimport Hide from '../../../../components/Hide/Hide';\nimport { ContentItem, PackageItem } from '../../../../services/Content/ContentApi';\nimport { useGetPackagesQuery } from '../../../../services/Content/ContentQueries';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport useDebounce from '../../../../Hooks/useDebounce';\nimport EmptyPackageState from './components/EmptyPackageState';\n\nconst useStyles = createUseStyles({\n  description: {\n    paddingTop: '12px', // 4px on the title bottom padding makes this the \"standard\" 16 total padding\n    paddingBottom: '8px',\n    color: global_Color_200.value,\n  },\n  mainContainer: {\n    backgroundColor: global_BackgroundColor_100.value,\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n  },\n  topContainer: {\n    justifyContent: 'space-between',\n    padding: '16px 24px',\n    height: 'fit-content',\n  },\n  bottomContainer: {\n    justifyContent: 'space-between',\n    height: 'fit-content',\n  },\n  searchInput: {\n    paddingRight: '35px',\n    marginRight: '-23px',\n  },\n  searchIcon: {\n    color: global_secondary_color_100.value,\n    position: 'relative',\n    top: '3px',\n    left: '-5px',\n    pointerEvents: 'none',\n  },\n});\n\ninterface Props {\n  rowData: ContentItem;\n  closeModal: () => void;\n}\n\nconst perPageKey = 'packagePerPage';\n\nexport default function PackageModal({\n  rowData: { name, uuid, package_count: packageCount },\n  closeModal,\n}: Props) {\n  const classes = useStyles();\n  const storedPerPage = Number(localStorage.getItem(perPageKey)) || 20;\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(storedPerPage);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [activeSortIndex, setActiveSortIndex] = useState<number>(0);\n  const [activeSortDirection, setActiveSortDirection] = useState<'asc' | 'desc'>('asc');\n\n  const columnHeaders = ['Name', 'Version', 'Release', 'Arch'];\n\n  const columnSortAttributes = ['name', 'version', 'release', 'arch'];\n\n  const sortString = useMemo(\n    () => columnSortAttributes[activeSortIndex] + ':' + activeSortDirection,\n    [activeSortIndex, activeSortDirection],\n  );\n\n  const debouncedSearchQuery = useDebounce(searchQuery);\n\n  useEffect(() => {\n    setPage(1);\n  }, [debouncedSearchQuery, sortString]);\n\n  const {\n    isLoading,\n    isFetching,\n    error,\n    isError,\n    data = { data: [], meta: { count: 0, limit: 20, offset: 0 } },\n  } = useGetPackagesQuery(uuid, packageCount, page, perPage, debouncedSearchQuery, sortString);\n\n  const onSetPage: OnSetPage = (_, newPage) => setPage(newPage);\n\n  const onPerPageSelect: OnPerPageSelect = (_, newPerPage, newPage) => {\n    // Save this value through page refresh for use on next reload\n\n    setPerPage(newPerPage);\n    setPage(newPage);\n    localStorage.setItem(perPageKey, newPerPage.toString());\n  };\n\n  const sortParams = (columnIndex: number, isDisabled: boolean): ThProps['sort'] | undefined => {\n    if (isDisabled) return;\n    return {\n      sortBy: {\n        index: activeSortIndex,\n        direction: activeSortDirection,\n        defaultDirection: 'asc', // starting sort direction when first sorting a column. Defaults to 'asc'\n      },\n      onSort: (_event, index, direction) => {\n        setActiveSortIndex(index);\n        setActiveSortDirection(direction);\n      },\n      columnIndex,\n    };\n  };\n\n  // Error is caught in the wrapper component\n  if (isError) throw error;\n\n  const {\n    data: packageList = [],\n    meta: { count = 0 },\n  } = data;\n\n  const fetchingOrLoading = isFetching || isLoading;\n\n  const notLoadingZeroCount = !fetchingOrLoading && !count;\n\n  return (\n    <Modal\n      key={uuid}\n      position='top'\n      hasNoBodyWrapper\n      aria-label='RPM package modal'\n      ouiaId='rpm_package_modal'\n      ouiaSafe={fetchingOrLoading}\n      variant={ModalVariant.medium}\n      title='Packages'\n      description={\n        <p className={classes.description}>\n          View list of packages for <b>{name}</b>\n        </p>\n      }\n      isOpen\n      onClose={closeModal}\n      footer={\n        <Button key='close' variant='secondary' onClick={closeModal}>\n          Close\n        </Button>\n      }\n    >\n      <InnerScrollContainer>\n        <Grid className={classes.mainContainer}>\n          <Flex className={classes.topContainer}>\n            <Flex>\n              <TextInput\n                id='search'\n                ouiaId='name_search'\n                placeholder='Filter by name'\n                value={searchQuery}\n                onChange={(value) => setSearchQuery(value)}\n                className={classes.searchInput}\n              />\n              <SearchIcon size='sm' className={classes.searchIcon} />\n            </Flex>\n            <FlexItem>\n              <Hide hide={notLoadingZeroCount}>\n                <Pagination\n                  id='top-pagination-id'\n                  widgetId='topPaginationWidgetId'\n                  perPageComponent='button'\n                  itemCount={count}\n                  perPage={perPage}\n                  page={page}\n                  onSetPage={onSetPage}\n                  isCompact\n                  onPerPageSelect={onPerPageSelect}\n                />\n              </Hide>\n            </FlexItem>\n          </Flex>\n          <Hide hide={!fetchingOrLoading}>\n            <Grid className={classes.mainContainer}>\n              <SkeletonTable\n                rowSize={perPage}\n                colSize={columnHeaders.length}\n                variant={TableVariant.compact}\n              />\n            </Grid>\n          </Hide>\n          <Hide hide={fetchingOrLoading}>\n            <TableComposable\n              aria-label='Custom repositories table'\n              ouiaId='packages_table'\n              variant='compact'\n            >\n              <Thead>\n                <Tr>\n                  {columnHeaders.map((columnHeader, index) => (\n                    <Th\n                      key={columnHeader + '_column'}\n                      sort={sortParams(index, notLoadingZeroCount)}\n                    >\n                      {columnHeader}\n                    </Th>\n                  ))}\n                </Tr>\n              </Thead>\n              <Tbody>\n                {packageList.map(({ name, version, release, arch }: PackageItem, index: number) => (\n                  <Tr key={name + index}>\n                    <Td>{name}</Td>\n                    <Td>{version}</Td>\n                    <Td>{release}</Td>\n                    <Td>{arch}</Td>\n                  </Tr>\n                ))}\n                <Hide hide={!notLoadingZeroCount}>\n                  <EmptyPackageState clearSearch={() => setSearchQuery('')} />\n                </Hide>\n              </Tbody>\n            </TableComposable>\n          </Hide>\n          <Flex className={classes.bottomContainer}>\n            <FlexItem />\n            <FlexItem>\n              <Hide hide={notLoadingZeroCount}>\n                <Pagination\n                  id='bottom-pagination-id'\n                  widgetId='bottomPaginationWidgetId'\n                  perPageComponent='button'\n                  itemCount={count}\n                  perPage={perPage}\n                  page={page}\n                  onSetPage={onSetPage}\n                  variant={PaginationVariant.bottom}\n                  onPerPageSelect={onPerPageSelect}\n                />\n              </Hide>\n            </FlexItem>\n          </Flex>\n        </Grid>\n      </InnerScrollContainer>\n    </Modal>\n  );\n}\n","import {\n  EmptyStateBody,\n  EmptyState,\n  EmptyStateVariant,\n  Title,\n  EmptyStateIcon,\n  Button,\n  Bullseye,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons/dist/js/icons';\nimport { Td, Tr } from '@patternfly/react-table';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  emptyStateContainer: {\n    display: 'flex',\n    flexGrow: 1,\n    margin: 'auto',\n  },\n});\n\ninterface Props {\n  clearSearch: () => void;\n}\n\nexport default function EmptyPackageState({ clearSearch }: Props) {\n  const classes = useStyles();\n  return (\n    <Tr>\n      <Td colSpan={4}>\n        <Bullseye>\n          <EmptyState variant={EmptyStateVariant.full} className={classes.emptyStateContainer}>\n            <EmptyStateIcon icon={SearchIcon} />\n            <Title headingLevel='h2' size='lg'>\n              No packages match the search criteria\n            </Title>\n            <EmptyStateBody>Clear your current search to show more results</EmptyStateBody>\n            <Button ouiaId='clear_filters' variant='link' onClick={clearSearch}>\n              Clear search\n            </Button>\n          </EmptyState>\n        </Bullseye>\n      </Td>\n    </Tr>\n  );\n}\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n} from '@patternfly/react-icons';\nimport {\n  Button,\n  Flex,\n  FlexItem,\n  Popover,\n  Spinner,\n  Stack,\n  StackItem,\n  Tooltip,\n} from '@patternfly/react-core';\nimport StatusText from '../../../components/StatusText/StatusText';\nimport {\n  global_danger_color_100,\n  global_success_color_100,\n  global_warning_color_100,\n} from '@patternfly/react-tokens';\nimport { createUseStyles } from 'react-jss';\nimport dayjs from 'dayjs';\nimport relativeTime = require('dayjs/plugin/relativeTime');\nimport { ContentItem } from '../../../services/Content/ContentApi';\nimport ConditionalTooltip from '../../../components/ConditionalTooltip/ConditionalTooltip';\nimport { useAppContext } from '../../../middleware/AppContext';\ndayjs.extend(relativeTime);\n\nconst red = global_danger_color_100.value;\nconst green = global_success_color_100.value;\nconst gold = global_warning_color_100.value;\n\nconst useStyles = createUseStyles({\n  spinner: {\n    animationDuration: '6s !important',\n    margin: '-3px 0',\n  },\n});\n\ninterface Props {\n  rowData: ContentItem;\n  retryHandler?: (string) => Promise<void>;\n}\n\ninterface DescriptionProps {\n  error?: string;\n  count?: number;\n  time?: string;\n}\n\ninterface FooterProps {\n  retryHandler?: (string) => Promise<void>;\n  uuid: string;\n}\n\nconst PopoverDescription = ({ error, count, time }: DescriptionProps) => {\n  const timeText = time === '' || time === undefined ? 'Never' : dayjs(time).fromNow();\n  return (\n    <div>\n      {error}\n      <Flex>\n        <Stack className='pf-u-mt-sm'>\n          <StackItem className='pf-u-font-weight-bold'>Last introspection</StackItem>\n          <StackItem> {timeText} </StackItem>\n        </Stack>\n        <Stack className='pf-u-mt-sm'>\n          <StackItem className='pf-u-font-weight-bold'>Failed attempts</StackItem>\n          <StackItem> {count} </StackItem>\n        </Stack>\n      </Flex>\n    </div>\n  );\n};\n\nconst PopoverFooter = ({ retryHandler, uuid }: FooterProps) => {\n  const { rbac } = useAppContext();\n  return (\n    <Flex>\n      <ConditionalTooltip\n        content='You do not have the required permissions to perform this action.'\n        show={!rbac?.write}\n        setDisabled\n      >\n        <Button variant='link' isInline onClick={() => (retryHandler ? retryHandler(uuid) : null)}>\n          Retry\n        </Button>\n      </ConditionalTooltip>\n    </Flex>\n  );\n};\n\nconst StatusIcon = ({\n  rowData: {\n    uuid,\n    status,\n    failed_introspections_count: failedIntrospectionsCount,\n    last_introspection_time: lastIntrospectionTime,\n    last_introspection_error: error,\n  },\n  retryHandler,\n}: Props) => {\n  const classes = useStyles();\n\n  switch (status) {\n    case 'Valid':\n      return (\n        <Flex alignContent={{ default: 'alignContentCenter' }} direction={{ default: 'row' }}>\n          <FlexItem spacer={{ default: 'spacerSm' }}>\n            <CheckCircleIcon color={green} />\n          </FlexItem>\n          <FlexItem>\n            <StatusText color='green'>Valid</StatusText>\n          </FlexItem>\n        </Flex>\n      );\n    case 'Invalid':\n      return (\n        <Flex alignContent={{ default: 'alignContentCenter' }} direction={{ default: 'row' }}>\n          <FlexItem spacer={{ default: 'spacerSm' }}>\n            <ExclamationCircleIcon color={red} />\n          </FlexItem>\n          <FlexItem>\n            <Popover\n              aria-label='invalid popover'\n              alertSeverityVariant='danger'\n              headerContent='Invalid'\n              headerIcon={<ExclamationCircleIcon />}\n              bodyContent={\n                <PopoverDescription\n                  error={error}\n                  count={failedIntrospectionsCount}\n                  time={lastIntrospectionTime}\n                />\n              }\n              position='left'\n              footerContent={<PopoverFooter retryHandler={retryHandler} uuid={uuid} />}\n            >\n              <Button variant='link' isInline>\n                <StatusText color='red' isLink>\n                  Invalid\n                </StatusText>\n              </Button>\n            </Popover>\n          </FlexItem>\n        </Flex>\n      );\n    case 'Unavailable':\n      return (\n        <Flex alignContent={{ default: 'alignContentCenter' }} direction={{ default: 'row' }}>\n          <FlexItem spacer={{ default: 'spacerSm' }}>\n            <ExclamationTriangleIcon color={gold} />\n          </FlexItem>\n          <FlexItem>\n            <Popover\n              aria-label='unavailable popover'\n              alertSeverityVariant='warning'\n              headerContent='Unavailable'\n              headerIcon={<ExclamationTriangleIcon />}\n              bodyContent={\n                <PopoverDescription\n                  error={error}\n                  count={failedIntrospectionsCount}\n                  time={lastIntrospectionTime}\n                />\n              }\n              position='left'\n              footerContent={<PopoverFooter retryHandler={retryHandler} uuid={uuid} />}\n            >\n              <StatusText color='gold' isLink>\n                Unavailable\n              </StatusText>\n            </Popover>\n          </FlexItem>\n        </Flex>\n      );\n    case 'Pending':\n      return (\n        <Tooltip position='top-start' content='Repository is being introspected'>\n          <Flex alignContent={{ default: 'alignContentCenter' }} direction={{ default: 'row' }}>\n            <FlexItem spacer={{ default: 'spacerSm' }}>\n              <Spinner size='md' className={classes.spinner} />\n            </FlexItem>\n            <FlexItem>\n              <StatusText color='blue'>In progress</StatusText>\n            </FlexItem>\n          </Flex>\n        </Tooltip>\n      );\n    default:\n      return <></>;\n  }\n};\n\nexport default StatusIcon;\n","import {\n  Button,\n  Flex,\n  FlexItem,\n  Grid,\n  InputGroup,\n  OnPerPageSelect,\n  OnSetPage,\n  Pagination,\n  PaginationVariant,\n  Spinner,\n  TextInput,\n} from '@patternfly/react-core';\nimport { TableComposable, TableVariant, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table';\nimport {\n  global_BackgroundColor_100,\n  global_secondary_color_100,\n  global_disabled_color_100,\n} from '@patternfly/react-tokens';\nimport { useEffect, useState, useMemo } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components';\n\nimport {\n  usePopularRepositoriesQuery,\n  useDeletePopularRepositoryMutate,\n  useRepositoryParams,\n  useAddPopularRepositoryQuery,\n} from '../../services/Content/ContentQueries';\nimport { CreateContentRequest, FilterData } from '../../services/Content/ContentApi';\nimport Hide from '../../components/Hide/Hide';\nimport { useQueryClient } from 'react-query';\nimport { useAppContext } from '../../middleware/AppContext';\nimport ConditionalTooltip from '../../components/ConditionalTooltip/ConditionalTooltip';\nimport UrlWithExternalIcon from '../../components/UrlWithLinkIcon/UrlWithLinkIcon';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport useDebounce from '../../Hooks/useDebounce';\nimport EmptyTableState from '../../components/EmptyTableState/EmptyTableState';\n\nconst useStyles = createUseStyles({\n  mainContainer: {\n    backgroundColor: global_BackgroundColor_100.value,\n    display: 'flex',\n    flexDirection: 'column',\n  },\n\n  topContainer: {\n    justifyContent: 'space-between',\n    padding: '16px 24px', // This is needed\n    height: 'fit-content',\n  },\n  bottomContainer: {\n    justifyContent: 'space-between',\n    height: 'fit-content',\n  },\n  invisible: {\n    opacity: 0,\n  },\n  searchInput: {\n    paddingRight: '35px',\n    marginRight: '-23px',\n  },\n  searchIcon: {\n    color: global_secondary_color_100.value,\n    position: 'relative',\n    left: '-5px',\n    pointerEvents: 'none',\n  },\n  addRepositoriesButton: {\n    marginLeft: '16px',\n  },\n  checkboxMinWidth: {\n    minWidth: '45px!important',\n  },\n  disabled: {\n    color: global_disabled_color_100.value,\n  },\n});\n\nconst perPageKey = 'popularRepositoriesperPage';\n\nconst PopularRepositoriesTable = () => {\n  const classes = useStyles();\n  const queryClient = useQueryClient();\n  const { rbac } = useAppContext();\n  const [checkedRepositories, setCheckedRepositories] = useState<boolean[]>([]);\n  const [selectedData, setSelectedData] = useState<CreateContentRequest>([]);\n  const [selectedUUID, setSelectedUUID] = useState<string>('');\n\n  const storedPerPage = Number(localStorage.getItem(perPageKey)) || 20;\n  const [page, setPage] = useState(1);\n  const [searchValue, setSearchValue] = useState('');\n  const debouncedSearchValue = useDebounce(searchValue);\n  const [perPage, setPerPage] = useState(storedPerPage);\n\n  const {\n    isLoading,\n    error,\n    isError,\n    isFetching,\n    data = { data: [], meta: { count: 0, limit: 20, offset: 0 } },\n  } = usePopularRepositoriesQuery(page, perPage, { searchQuery: debouncedSearchValue });\n\n  const areAllReposAdded = useMemo(() => data.data.every(({ uuid }) => !!uuid), [data]);\n\n  const atLeastOneRepoChecked = useMemo(\n    () => checkedRepositories.some((val) => val),\n    [checkedRepositories],\n  );\n\n  const areAllReposSelected = useMemo(\n    () =>\n      !areAllReposAdded && data.data.every(({ uuid }, key) => !!uuid || checkedRepositories[key]),\n    [data, checkedRepositories, areAllReposAdded],\n  );\n\n  const {\n    isLoading: repositoryParamsLoading,\n    error: repositoryParamsError,\n    isError: repositoryParamsIsError,\n    data: { distribution_versions: distVersions, distribution_arches: distArches } = {\n      distribution_versions: [],\n      distribution_arches: [],\n    },\n  } = useRepositoryParams();\n\n  const { mutateAsync: addContentQuery, isLoading: isAdding } = useAddPopularRepositoryQuery(\n    queryClient,\n    selectedData,\n    page,\n    perPage,\n    { searchQuery: debouncedSearchValue } as FilterData,\n  );\n\n  useEffect(() => {\n    if (!isFetching) {\n      setSelectedData([]);\n      setSelectedUUID('');\n      setCheckedRepositories(data.data.map(() => false));\n    }\n  }, [isFetching]);\n\n  useEffect(() => {\n    if (data?.data?.length > 0 && checkedRepositories.length === 0) {\n      setCheckedRepositories(data.data.map(() => false));\n    }\n  }, [data?.data?.length]);\n\n  useEffect(() => {\n    if (selectedData.length != 0) {\n      addContentQuery().then(\n        () => setSelectedData([]),\n        () => setSelectedData([]),\n      );\n    }\n  }, [selectedData]);\n\n  useEffect(() => {\n    if (selectedUUID) {\n      deleteItem(selectedUUID).then(undefined, () => setSelectedUUID(''));\n    }\n  }, [selectedUUID]);\n\n  const onSelectRepo = (index: number, value: boolean) => {\n    const newValue = checkedRepositories;\n    newValue[index] = value;\n    setCheckedRepositories([...newValue]);\n  };\n\n  const selectAllRepos = (_, checked: boolean) =>\n    setCheckedRepositories(data.data.map(() => checked));\n\n  const archesDisplay = (arch: string) => distArches.find(({ label }) => arch === label)?.name;\n\n  const versionDisplay = (versions: Array<string>): string =>\n    distVersions\n      .filter(({ label }) => versions?.includes(label))\n      .map(({ name }) => name)\n      .join(', ');\n\n  const { mutateAsync: deleteItem, isLoading: isDeleting } = useDeletePopularRepositoryMutate(\n    queryClient,\n    page,\n    perPage,\n    { searchQuery: debouncedSearchValue } as FilterData,\n  );\n\n  // Other update actions will be added to this later.\n  const actionTakingPlace = isDeleting || isFetching || repositoryParamsLoading || isAdding;\n\n  const onSetPage: OnSetPage = (_, newPage) => setPage(newPage);\n\n  const onPerPageSelect: OnPerPageSelect = (_, newPerPage, newPage) => {\n    // Save this value through page refresh for use on next reload\n    localStorage.setItem(perPageKey, newPerPage.toString());\n    setPerPage(newPerPage);\n    setPage(newPage);\n  };\n\n  const addSelected = () => {\n    const request: CreateContentRequest = [];\n    checkedRepositories.forEach((checked, index) => {\n      if (checked && data?.data[index] && !data.data[index].uuid) {\n        const {\n          suggested_name,\n          url,\n          distribution_versions,\n          distribution_arch,\n          gpg_key,\n          metadata_verification,\n        } = data.data[index];\n\n        request.push({\n          name: suggested_name,\n          url,\n          distribution_versions,\n          distribution_arch,\n          gpg_key,\n          metadata_verification,\n        });\n      }\n    });\n    setSelectedData(request);\n  };\n\n  const columnHeaders = ['Name', 'Architecture', 'Versions'];\n\n  // Error is caught in the wrapper component\n  if (isError) throw error;\n  if (repositoryParamsIsError) throw repositoryParamsError;\n\n  const {\n    data: popularData = [],\n    meta: { count = 0 },\n  } = data;\n\n  return (\n    <Grid\n      data-ouia-safe={!actionTakingPlace}\n      data-ouia-component-id='popular_repositories_page'\n      className={classes.mainContainer}\n    >\n      <Flex className={classes.topContainer}>\n        <FlexItem>\n          <InputGroup>\n            <FlexItem>\n              <TextInput\n                isDisabled={isLoading}\n                id='search'\n                ouiaId='popular_filter_search'\n                placeholder='Filter by name/url'\n                value={searchValue}\n                onChange={setSearchValue}\n                className={classes.searchInput}\n              />\n              <SearchIcon size='sm' className={classes.searchIcon} />\n            </FlexItem>\n            <FlexItem>\n              <ConditionalTooltip\n                content='You do not have the required permissions to perform this action.'\n                show={!rbac?.write}\n                setDisabled\n              >\n                <Button\n                  onClick={addSelected}\n                  className={classes.addRepositoriesButton}\n                  isDisabled={!atLeastOneRepoChecked}\n                  ouiaId='add_checked_repos'\n                >\n                  Add repositories\n                </Button>\n              </ConditionalTooltip>\n            </FlexItem>\n          </InputGroup>\n        </FlexItem>\n        <FlexItem>\n          <Hide hide={isLoading}>\n            <Pagination\n              id='top-pagination-id'\n              widgetId='topPaginationWidgetId'\n              perPageComponent='button'\n              isDisabled={isLoading}\n              itemCount={count}\n              perPage={perPage}\n              page={page}\n              onSetPage={onSetPage}\n              isCompact\n              onPerPageSelect={onPerPageSelect}\n            />\n          </Hide>\n        </FlexItem>\n      </Flex>\n      <Hide hide={!isLoading}>\n        <Grid className={classes.mainContainer}>\n          <SkeletonTable\n            rowSize={perPage}\n            colSize={columnHeaders.length}\n            variant={TableVariant.compact}\n          />\n        </Grid>\n      </Hide>\n      <Hide hide={isLoading}>\n        <>\n          <TableComposable\n            aria-label='Popular repositories table'\n            ouiaId='popular_repos_table'\n            variant='compact'\n          >\n            <Thead>\n              <Tr>\n                <Hide hide={!rbac?.write}>\n                  <Th\n                    className={classes.checkboxMinWidth}\n                    select={{\n                      onSelect: selectAllRepos,\n                      isSelected: areAllReposSelected,\n                      isHeaderSelectDisabled: areAllReposAdded,\n                    }}\n                  />\n                </Hide>\n                {columnHeaders.map((columnHeader) => (\n                  <Th key={columnHeader + 'column'}>{columnHeader}</Th>\n                ))}\n                <Th>\n                  <Spinner size='md' className={actionTakingPlace ? '' : classes.invisible} />\n                </Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {popularData.map(\n                (\n                  {\n                    uuid,\n                    existing_name,\n                    suggested_name,\n                    url,\n                    distribution_arch,\n                    distribution_versions,\n                    gpg_key,\n                    metadata_verification,\n                  },\n                  key,\n                ) => (\n                  <Tr key={suggested_name + key}>\n                    <Hide hide={!rbac?.write}>\n                      <Td\n                        select={{\n                          rowIndex: key,\n                          onSelect: (_event, isSelecting) => onSelectRepo(key, isSelecting),\n                          isSelected: uuid ? false : checkedRepositories[key],\n                          disable: !!uuid,\n                        }}\n                      />\n                    </Hide>\n                    <Td>\n                      <>\n                        <Flex direction={{ default: 'row' }}>\n                          <FlexItem> {suggested_name}</FlexItem>\n                          {existing_name && suggested_name !== existing_name && (\n                            <FlexItem className={classes.disabled}>\n                              Current name: {existing_name}\n                            </FlexItem>\n                          )}\n                        </Flex>\n                        <UrlWithExternalIcon href={url} />\n                      </>\n                    </Td>\n                    <Td>{archesDisplay(distribution_arch)}</Td>\n                    <Td>{versionDisplay(distribution_versions)}</Td>\n                    <Td width={10}>\n                      <ConditionalTooltip\n                        content='You do not have the required permissions to perform this action.'\n                        show={!rbac?.write}\n                        setDisabled\n                      >\n                        {uuid ? (\n                          <Button\n                            isDisabled={uuid === selectedUUID || isAdding}\n                            onClick={() => setSelectedUUID(uuid)}\n                            variant='danger'\n                            ouiaId='remove_popular_repo'\n                          >\n                            Remove\n                          </Button>\n                        ) : (\n                          <Button\n                            variant='secondary'\n                            isDisabled={selectedData[key]?.url === url || isFetching || isDeleting}\n                            onClick={() => {\n                              const newData: CreateContentRequest = [];\n                              newData[key] = {\n                                name: suggested_name,\n                                url,\n                                distribution_versions,\n                                distribution_arch,\n                                gpg_key,\n                                metadata_verification,\n                              };\n                              setSelectedData(newData);\n                            }}\n                            ouiaId='add_popular_repo'\n                          >\n                            Add\n                          </Button>\n                        )}\n                      </ConditionalTooltip>\n                    </Td>\n                  </Tr>\n                ),\n              )}\n            </Tbody>\n          </TableComposable>\n          <Flex className={classes.bottomContainer}>\n            <FlexItem />\n            <FlexItem>\n              <Pagination\n                id='bottom-pagination-id'\n                widgetId='bottomPaginationWidgetId'\n                perPageComponent='button'\n                itemCount={count}\n                perPage={perPage}\n                page={page}\n                onSetPage={onSetPage}\n                variant={PaginationVariant.bottom}\n                onPerPageSelect={onPerPageSelect}\n              />\n            </FlexItem>\n          </Flex>\n        </>\n      </Hide>\n      <Hide hide={data.data.length !== 0 || isLoading}>\n        <EmptyTableState\n          clearFilters={() => setSearchValue('')}\n          notFiltered={true}\n          itemName='popular repositories'\n        />\n      </Hide>\n    </Grid>\n  );\n};\n\nexport default PopularRepositoriesTable;\n","import { useMemo } from 'react';\nimport { Grid, Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { Routes, Route, Navigate, useLocation, Link } from 'react-router-dom';\nimport { global_BackgroundColor_100 } from '@patternfly/react-tokens';\n\nimport { createUseStyles } from 'react-jss';\nimport { ErrorPage } from './components/Error/ErrorPage';\nimport ContentListTable from './Pages/ContentListTable/ContentListTable';\nimport PopularRepositoriesTable from './Pages/PopularRepositoriesTable/PopularRepositoriesTable';\nimport { last } from 'lodash';\nimport Header from './components/Header/Header';\nimport QuickStart from './components/QuickStart/QuickStart';\nimport AdminTaskTable from './Pages/AdminTaskTable/AdminTaskTable';\nimport { useAppContext } from './middleware/AppContext';\n\nconst useStyles = createUseStyles({\n  tabs: {\n    backgroundColor: global_BackgroundColor_100.value,\n  },\n  tab: {\n    '& button': {\n      padding: 0, // Remove the default button padding\n    },\n  },\n  link: {\n    color: 'inherit', // Receives parent \"Tab\" components color\n    textDecoration: 'none',\n    padding: '8px 16px', // Add it back so that the entire clickable area works\n    '&:focus-visible': {\n      outlineOffset: '-6px',\n    },\n  },\n  containerMargin: {\n    margin: '24px',\n  },\n});\n\nexport const DEFAULT_ROUTE = '';\nexport const POPULAR_REPOSITORIES_ROUTE = 'popular-repositories';\nexport const ADMIN_TASKS_ROUTE = 'admin-tasks';\n\nexport default function MainRoutes() {\n  const classes = useStyles();\n  const { pathname, key: locationKey } = useLocation();\n  const { features } = useAppContext();\n  const currentRoute = useMemo(() => last(pathname.split('/')), [pathname]);\n\n  const tabbedRoutes = useMemo(() => {\n    const tabs = [\n      {\n        title: 'Your repositories',\n        route: DEFAULT_ROUTE,\n        Element: ContentListTable,\n      },\n      {\n        title: 'Popular repositories',\n        route: POPULAR_REPOSITORIES_ROUTE,\n        Element: PopularRepositoriesTable,\n      },\n    ];\n    if (features?.admintasks?.enabled && features.admintasks?.accessible) {\n      tabs.push({\n        title: 'Admin tasks',\n        route: ADMIN_TASKS_ROUTE,\n        Element: AdminTaskTable,\n      });\n    }\n    return tabs;\n  }, [features?.admintasks?.enabled, features?.admintasks?.accessible]);\n\n  return (\n    <>\n      <Header />\n\n      <Tabs className={classes.tabs} ouiaId='routed-tabs' activeKey={currentRoute}>\n        {tabbedRoutes.map(({ title, route }) => (\n          <Tab\n            className={classes.tab}\n            keyParams={route}\n            key={route}\n            tabIndex={-1} // This prevents the tab from being targetable by accessibility features.\n            eventKey={route || 'content'} // the current route will be \"content\" when there is no route specified (root)\n            aria-label={title}\n            ouiaId={title}\n            title={\n              <Link className={classes.link} accessKey={route} key={route} to={route}>\n                <TabTitleText>{title}</TabTitleText>\n              </Link>\n            }\n          />\n        ))}\n      </Tabs>\n      <QuickStart />\n      <Routes key={locationKey}>\n        {tabbedRoutes.map(({ route, Element }, key) => (\n          <Route\n            key={key.toString()}\n            path={route}\n            element={\n              <ErrorPage>\n                <Grid className={classes.containerMargin}>\n                  <Element />\n                </Grid>\n              </ErrorPage>\n            }\n          />\n        ))}\n        <Route path='*' element={<Navigate to={DEFAULT_ROUTE} replace />} />\n      </Routes>\n    </>\n  );\n}\n","import { Tooltip, TooltipProps } from '@patternfly/react-core';\nimport { cloneElement } from 'react';\n\ninterface Props extends TooltipProps {\n  show: boolean;\n  setDisabled?: boolean;\n}\n\nconst ConditionalTooltip = ({ show, children, setDisabled, ...rest }: Props) =>\n  show ? (\n    <Tooltip {...rest}>\n      <div>\n        {children && cloneElement(children, setDisabled ? { isDisabled: setDisabled } : undefined)}\n      </div>\n    </Tooltip>\n  ) : (\n    <>{children}</>\n  );\n\nexport default ConditionalTooltip;\n","import { Select, SelectOption, SelectProps, SelectVariant } from '@patternfly/react-core';\nimport React, { Dispatch, SetStateAction, useState } from 'react';\n\ninterface DropdownSelectProps extends Partial<SelectProps> {\n  options: Array<string>;\n  variant: SelectVariant.single | SelectVariant.checkbox | SelectVariant.typeaheadMulti;\n  selectedProp: any; // eslint-disable-line\n  setSelected: Dispatch<SetStateAction<any>>; // eslint-disable-line\n  toggleIcon?: React.ReactElement;\n  placeholderText?: string | React.ReactNode;\n  isDisabled?: boolean;\n}\n\nconst DropdownSelect = ({\n  options,\n  variant,\n  selectedProp,\n  setSelected,\n  toggleIcon,\n  placeholderText,\n  isDisabled,\n  ...rest\n}: DropdownSelectProps) => {\n  const selected = Array.isArray(selectedProp) ? selectedProp : [selectedProp];\n  const [isOpen, setIsOpen] = useState(false);\n  const onToggle = (isOpen) => setIsOpen(isOpen);\n\n  const selectFrom = options.map((option, index) => (\n    <SelectOption key={option + index} id={option} value={option} />\n  ));\n\n  const onSelect = (_event, selection) => {\n    switch (variant) {\n      case SelectVariant.single:\n        setSelected(selection);\n        setIsOpen(false);\n        break;\n      case SelectVariant.typeaheadMulti:\n      case SelectVariant.checkbox:\n        if (Array.isArray(selectedProp)) {\n          if (selected.includes(selection)) {\n            const remaining = selected.filter((item) => item !== selection);\n            setSelected(remaining);\n            break;\n          }\n          setSelected([...selected, selection]);\n          break;\n        }\n        break;\n    }\n  };\n\n  return (\n    <Select\n      isDisabled={isDisabled}\n      variant={variant}\n      onSelect={onSelect}\n      selections={selected}\n      isOpen={isOpen}\n      onToggle={onToggle}\n      placeholderText={placeholderText}\n      isCheckboxSelectionBadgeHidden\n      toggleIcon={toggleIcon}\n      {...rest}\n    >\n      {selectFrom}\n    </Select>\n  );\n};\n\nexport default DropdownSelect;\n","import {\n  EmptyStateBody,\n  EmptyState,\n  EmptyStateVariant,\n  Title,\n  EmptyStateIcon,\n  Button,\n} from '@patternfly/react-core';\nimport { SearchIcon, PlusCircleIcon } from '@patternfly/react-icons/dist/js/icons';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  emptyStateContainer: {\n    display: 'flex',\n    flexGrow: 1,\n  },\n  emptyStateBody: {\n    marginBottom: '16px',\n  },\n});\n\ninterface Props {\n  notFiltered?: boolean;\n  clearFilters: () => void;\n  itemName: string;\n  notFilteredBody?: string;\n  notFilteredButton?: React.ReactNode;\n}\n\nconst EmptyTableState = ({\n  notFiltered,\n  clearFilters,\n  itemName,\n  notFilteredBody,\n  notFilteredButton,\n}: Props) => {\n  const classes = useStyles();\n  return (\n    <EmptyState variant={EmptyStateVariant.full} className={classes.emptyStateContainer}>\n      <EmptyStateIcon icon={notFiltered ? PlusCircleIcon : SearchIcon} />\n      <Title headingLevel='h2' size='lg' ouiaId='empty_custom_title'>\n        {notFiltered ? `No ${itemName}` : `No ${itemName} match the filter criteria`}\n      </Title>\n      <EmptyStateBody className={classes.emptyStateBody}>\n        {notFiltered ? notFilteredBody : 'Clear all filters to show more results'}\n      </EmptyStateBody>\n      {notFiltered ? (\n        notFilteredButton\n      ) : (\n        <Button ouiaId='clear_filters' variant='link' onClick={clearFilters}>\n          Clear all filters\n        </Button>\n      )}\n    </EmptyState>\n  );\n};\n\nexport default EmptyTableState;\n","import { ErrorBoundary as _ErrorBoundaryPage } from '@redhat-cloud-services/frontend-components';\n\nconst ErrorBoundaryPage = _ErrorBoundaryPage as unknown as React.FunctionComponent<{\n  children?: React.ReactNode;\n  headerTitle: string;\n  errorTitle?: string;\n  errorDescription?: string;\n}>;\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport const ErrorPage = ({ children }: Props) => (\n  <ErrorBoundaryPage\n    headerTitle='Content Sources'\n    errorTitle='Unhandled error'\n    errorDescription='There was a problem trying to process your request'\n  >\n    {children}\n  </ErrorBoundaryPage>\n);\n","import { Text } from '@patternfly/react-core';\nimport {\n  PageHeader as _PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components';\nimport { PageHeaderProps as _PageHeaderProps } from '@redhat-cloud-services/frontend-components/PageHeader/PageHeader';\nimport { global_Color_100 } from '@patternfly/react-tokens';\n\nimport { FunctionComponent, ReactElement } from 'react';\nimport { createUseStyles } from 'react-jss';\n\ninterface PageHeaderProps extends _PageHeaderProps {\n  children?: ReactElement | Array<ReactElement>;\n}\n\n// Example of how to extend inaccurately typed imports\nconst PageHeader = _PageHeader as FunctionComponent<PageHeaderProps>;\n\nconst useStyles = createUseStyles({\n  subtext: {\n    color: global_Color_100.value,\n    paddingTop: '8px',\n  },\n});\n\nexport default function Header() {\n  const classes = useStyles();\n\n  return (\n    <PageHeader>\n      <PageHeaderTitle title='Custom Repositories' />\n      <Text className={classes.subtext} ouiaId='custom_repositories_description'>\n        View all custom repositories within your organization.\n      </Text>\n    </PageHeader>\n  );\n}\n","interface Props {\n  hide: boolean;\n  children?: React.ReactNode;\n}\n\nconst Hide = ({ hide, children }: Props) => (hide ? <></> : <>{children}</>);\n\nexport default Hide;\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Grid,\n  Title,\n} from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons';\nimport {\n  PageHeader as _PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components';\nimport { FunctionComponent } from 'react';\n\nconst PageHeader = _PageHeader as unknown as FunctionComponent<{\n  children: React.ReactNode;\n}>;\n\nexport const NoPermissionsPage: React.FunctionComponent = () => (\n  <>\n    <PageHeader>\n      <PageHeaderTitle title='Repositories' />\n    </PageHeader>\n    <Grid style={{ margin: '24px' }}>\n      <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={LockIcon} />\n        <Title headingLevel='h5' size='lg'>\n          You do not have access to Repositories\n        </Title>\n        <EmptyStateBody>\n          Contact your organization administrator(s) for more information.\n        </EmptyStateBody>\n      </EmptyState>\n    </Grid>\n  </>\n);\n","import { Button, ExpandableSection, Grid, Spinner, Text } from '@patternfly/react-core';\nimport { global_BackgroundColor_100 } from '@patternfly/react-tokens';\n\nimport { useMemo, useState } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { ArrowRightIcon } from '@patternfly/react-icons';\n\nconst useStyles = createUseStyles({\n  quickstartContainer: {\n    margin: '24px 24px 0',\n    backgroundColor: global_BackgroundColor_100.value,\n  },\n  quickstartSpinner: {\n    margin: '0 0 -4px 5px',\n  },\n  buildCustomButton: {\n    marginTop: '20px',\n    padding: 0,\n    fontWeight: 600,\n  },\n});\n\ninterface QuickStarts {\n  version: number;\n  updateQuickStarts: (key: string, quickstarts: unknown[]) => void;\n  toggle: (quickstartId: string) => void;\n  Catalog: unknown;\n  activateQuickstart: (key: string) => Promise<void>;\n}\n\nexport default function QuickStart() {\n  const { isBeta, quickStarts } = useChrome();\n  // This value only needs to be computed once\n  // So we wrap it in a useMemo and give it an empty dependency array to prevent it from being called on every render.\n  const isPreview = useMemo(isBeta, []);\n  const [isExpanded, setIsExpanded] = useState(isPreview);\n  const [quickStartLoading, setQuickStartLoading] = useState(false);\n  const classes = useStyles();\n\n  if (!isPreview) return <></>;\n\n  const onToggle = () => setIsExpanded((prev) => !prev);\n  const activateQuickStart = async () => {\n    setQuickStartLoading(true);\n    try {\n      await (quickStarts as QuickStarts)?.activateQuickstart('insights-custom-repos');\n      onToggle();\n    } catch (error) {\n      console.warn(error);\n    }\n    setQuickStartLoading(false);\n  };\n\n  return (\n    <Grid className={classes.quickstartContainer}>\n      <ExpandableSection\n        toggleText='Need help getting started with Preview features?'\n        onToggle={onToggle}\n        isExpanded={isExpanded}\n        displaySize='large'\n        aria-label='quickStart-expansion'\n        data-ouia-component-id='quickstart_expand'\n      >\n        <Text>For help getting started, access the quick start below:</Text>\n        <Button\n          className={classes.buildCustomButton}\n          iconPosition='right'\n          icon={\n            quickStartLoading ? (\n              <Spinner size='md' className={classes.quickstartSpinner} />\n            ) : (\n              <ArrowRightIcon />\n            )\n          }\n          variant='link'\n          ouiaId='quickstart_link'\n          onClick={activateQuickStart}\n          isDisabled={quickStartLoading}\n        >\n          Build an Image with Custom Content\n        </Button>\n      </ExpandableSection>\n    </Grid>\n  );\n}\n","import { createUseStyles } from 'react-jss';\nimport {\n  global_danger_color_200,\n  global_info_color_200,\n  global_success_color_200,\n  global_warning_color_200,\n} from '@patternfly/react-tokens';\n\nconst red = global_danger_color_200.value;\nconst green = global_success_color_200.value;\nconst gold = global_warning_color_200.value;\nconst blue = global_info_color_200.value;\n\ninterface Props {\n  color: 'red' | 'green' | 'gold' | 'blue';\n  isLink?: boolean;\n  children?: React.ReactNode;\n}\n\nconst useStyles = ({ isLink }: Props) =>\n  createUseStyles({\n    fontStyle: {\n      fontWeight: 'bold',\n      fontSize: '14px',\n      ...(isLink\n        ? {\n            textDecoration: 'grey dotted underline',\n            cursor: 'pointer',\n          }\n        : {}),\n    },\n    red: { extend: 'fontStyle', color: red },\n    green: { extend: 'fontStyle', color: green },\n    gold: { extend: 'fontStyle', color: gold },\n    blue: { extend: 'fontStyle', color: blue },\n  });\n\nconst StatusText = (props: Props) => {\n  const classes = useStyles(props)();\n  const { color, children } = props;\n\n  return <span className={classes[color]}>{children}</span>;\n};\n\nexport default StatusText;\n","import { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  link: {\n    alignItems: 'center',\n    display: 'flex',\n    width: 'fit-content', // Prevents overflow of clickable area beyond visible content\n  },\n  icon: {\n    marginLeft: '5px',\n  },\n});\n\ninterface Props {\n  href: string;\n}\n\nconst UrlWithExternalIcon = ({ href }: Props) => {\n  const classes = useStyles();\n  return (\n    <a href={href} className={classes.link} rel='noreferrer' target='_blank'>\n      {href} <ExternalLinkAltIcon className={classes.icon} />\n    </a>\n  );\n};\n\nexport default UrlWithExternalIcon;\n","import { createContext, ReactNode, useContext, useEffect, useState } from 'react';\nimport { useFlag } from '@unleash/proxy-client-react';\nimport { fetchRBAC, Rbac } from '@redhat-cloud-services/insights-common-typescript';\nimport { Features } from '../services/Features/FeatureApi';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { getRegistry as _getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { insights } from '../../package.json';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { useFetchFeaturesQuery } from '../services/Features/FeatureQueries';\n\nconst getRegistry = _getRegistry as unknown as () => { register: ({ notifications }) => void };\nconst { appname } = insights;\n\nexport interface AppContextInterface {\n  hidePackageVerification: boolean;\n  rbac?: { read: boolean; write: boolean };\n  features: Features | null;\n  isFetchingFeatures: boolean;\n}\n\nexport const AppContext = createContext({} as AppContextInterface);\n\nexport const ContextProvider = ({ children }: { children: ReactNode }) => {\n  const [rbac, setRbac] = useState<Rbac | undefined>(undefined);\n  const [features, setFeatures] = useState<Features | null>(null);\n  const hidePackageVerification = useFlag('content-sources.hide-package-verification') || false;\n  const chrome = useChrome();\n  const { fetchFeatures, isLoading: isFetchingFeatures } = useFetchFeaturesQuery();\n\n  useEffect(() => {\n    // Get chrome and register app\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer });\n\n    if (chrome && !rbac) {\n      // Get permissions and store them in context\n      chrome.auth.getUser().then(async () => fetchRBAC(appname).then(setRbac));\n    }\n\n    (async () => {\n      const fetchedFeatures = await fetchFeatures();\n      setFeatures(fetchedFeatures);\n    })();\n  }, [!!chrome]);\n\n  return (\n    <AppContext.Provider\n      value={{\n        hidePackageVerification,\n        rbac: rbac\n          ? {\n              read: rbac?.hasPermission('content-sources', 'repositories', 'read'),\n              write: rbac?.hasPermission('content-sources', 'repositories', 'write'),\n            }\n          : undefined,\n        features: features,\n        isFetchingFeatures: isFetchingFeatures,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useAppContext = () => useContext(AppContext);\n","import axios from 'axios';\nimport { Links, Meta } from '../Content/ContentApi';\n\nexport interface AdminTaskFilterData {\n  statuses: string[];\n  accountId: string;\n  orgId: string;\n}\n\nexport interface PulpData {\n  sync?: Record<string, unknown>;\n  publication?: Record<string, unknown>;\n  distribution?: Record<string, unknown>;\n}\n\nexport interface AdminTask {\n  uuid: string;\n  account_id?: string;\n  org_id: string;\n  typename: string;\n  status: 'running' | 'failed' | 'completed' | 'canceled' | 'pending';\n  queued_at: string;\n  started_at: string;\n  finished_at: string;\n  error: string;\n  payload?: Record<string, unknown>;\n  pulp?: PulpData;\n}\n\nexport type AdminTaskList = AdminTask[];\n\nexport interface AdminTaskListResponse {\n  data: AdminTaskList;\n  links: Links;\n  meta: Meta;\n}\n\nexport const getAdminTasks: (\n  page: number,\n  limit: number,\n  filterData: AdminTaskFilterData,\n  sortBy: string,\n) => Promise<AdminTaskListResponse> = async (page, limit, filterData, sortBy) => {\n  const accountIdParam = filterData.accountId;\n  const orgIdParam = filterData.orgId;\n  const statusParam = filterData?.statuses?.join(',').toLowerCase();\n  const { data } = await axios.get(\n    `/api/content-sources/v1/admin/tasks/?offset=${\n      (page - 1) * limit\n    }&limit=${limit}&account_id=${accountIdParam}&org_id=${orgIdParam}&status=${statusParam}&sort_by=${sortBy}`,\n  );\n  return data;\n};\n\nexport const getAdminTask: (uuid: string) => Promise<AdminTask> = async (uuid) => {\n  const { data } = await axios.get(`/api/content-sources/v1/admin/tasks/${uuid}`);\n  return data;\n};\n","import { AlertVariant } from '@patternfly/react-core';\nimport { useState } from 'react';\nimport { useQuery } from 'react-query';\nimport { useNotification } from '../Notifications/Notifications';\nimport {\n  AdminTaskFilterData,\n  AdminTaskListResponse,\n  getAdminTasks,\n  AdminTask,\n  getAdminTask,\n} from './AdminTaskApi';\n\nexport const ADMIN_TASK_LIST_KEY = 'ADMIN_TASK_LIST_KEY';\nexport const ADMIN_TASK_KEY = 'ADMIN_TASK_KEY';\n\nconst ADMIN_TASK_LIST_POLLING_TIME = 15000; // 15 seconds\n\nexport const useAdminTaskListQuery = (\n  page: number,\n  limit: number,\n  filterData: AdminTaskFilterData,\n  sortBy: string,\n) => {\n  const [polling, setPolling] = useState(false);\n  const [pollCount, setPollCount] = useState(0);\n\n  return useQuery<AdminTaskListResponse>(\n    [ADMIN_TASK_LIST_KEY, page, limit, sortBy, ...Object.values(filterData)],\n    () => getAdminTasks(page, limit, filterData, sortBy),\n    {\n      onSuccess: (data) => {\n        const containsRunning = data?.data?.some(({ status }) => status === 'running');\n        if (polling && containsRunning) {\n          // Count each consecutive time polling occurs\n          setPollCount(pollCount + 1);\n        }\n        if (polling && !containsRunning) {\n          // We were polling, but now the data is valid, we stop the count.\n          setPollCount(0);\n        }\n        if (pollCount > 40) {\n          // If polling occurs 40 times in a row, we stop it. Likely a data/kafka issue has occurred with the API.\n          return setPolling(false);\n        }\n        // This sets the polling state based whether the data contains any \"Running\" status\n        return setPolling(containsRunning);\n      },\n      onError: () => {\n        setPolling(false);\n        setPollCount(0);\n      },\n      refetchInterval: polling ? ADMIN_TASK_LIST_POLLING_TIME : undefined,\n      refetchIntervalInBackground: false, // This prevents endless polling when our app isn't the focus tab in a browser\n      refetchOnWindowFocus: polling, // If polling and navigate to another tab, on refocus, we want to poll once more. (This is based off of the stalestime below)\n      keepPreviousData: true,\n      staleTime: 20000,\n    },\n  );\n};\n\nexport const useFetchAdminTaskQuery = (uuid?: string, status?: AdminTask['status']) => {\n  const { notify } = useNotification();\n\n  return useQuery<AdminTask>(\n    [ADMIN_TASK_KEY, uuid, status],\n    () => getAdminTask(uuid as string), // Will be disabled if undefined\n    {\n      onError(err) {\n        const { data } = err as { data: { message: string | undefined } | string };\n        const description = typeof data === 'string' ? data : data?.message;\n        notify({\n          variant: AlertVariant.danger,\n          title: 'Error fetching admin task from UUID',\n          description,\n        });\n      },\n      enabled: !!uuid,\n      keepPreviousData: true,\n      staleTime: 20000,\n    },\n  );\n};\n","import axios from 'axios';\n\nexport interface ContentItem {\n  uuid: string;\n  name: string;\n  package_count: number;\n  url: string;\n  distribution_versions: Array<string>;\n  distribution_arch: string;\n  account_id: string;\n  org_id: string;\n  status: string;\n  last_introspection_error: string;\n  last_introspection_time: string;\n  failed_introspections_count: number;\n  gpg_key: string;\n  metadata_verification: boolean;\n}\n\nexport interface PopularRepository {\n  uuid: string;\n  existing_name: string;\n  suggested_name: string;\n  url: string;\n  distribution_versions: Array<string>;\n  distribution_arch: string;\n  gpg_key: string;\n  metadata_verification: boolean;\n}\n\nexport interface CreateContentRequestItem {\n  name: string;\n  url: string;\n  distribution_versions?: Array<string>;\n  distribution_arch?: string;\n  gpg_key?: string;\n  metadata_verification?: boolean;\n  snapshot?: boolean;\n}\n\nexport interface ErrorItem {\n  status: number;\n  title?: string;\n  detail?: string;\n}\n\nexport interface ErrorResponse {\n  errors: ErrorItem[];\n}\n\nexport type CreateContentRequestResponse = ContentItem[] | ErrorResponse;\n\nexport type CreateContentRequest = Array<CreateContentRequestItem>;\n\nexport interface EditContentRequestItem {\n  uuid: string;\n  name: string;\n  url: string;\n  distribution_arch: string;\n  distribution_versions: string[];\n  gpg_key: string;\n  metadata_verification: boolean;\n}\n\nexport type EditContentRequest = Array<EditContentRequestItem>;\n\nexport type ContentList = Array<ContentItem>;\n\nexport type Links = {\n  first: string;\n  last: string;\n  next: string;\n  prev: string;\n};\n\nexport type Meta = {\n  count: number;\n  limit: number;\n  offset: number;\n};\n\nexport interface ContentListResponse {\n  data: ContentList;\n  links: Links;\n  meta: Meta;\n}\n\nexport interface PopularRepositoriesResponse {\n  data: PopularRepository[];\n  links: Links;\n  meta: Meta;\n}\n\nexport interface RepositoryParamsResponse {\n  distribution_versions: Array<NameLabel>;\n  distribution_arches: Array<NameLabel>;\n}\n\nexport interface GpgKeyResponse {\n  gpg_key: string;\n}\n\nexport type NameLabel = {\n  name: string;\n  label: string;\n};\n\nexport type FilterData = {\n  searchQuery: string;\n  versions: Array<string>;\n  arches: Array<string>;\n  statuses: Array<string>;\n};\n\nexport type ValidateItem = {\n  skipped: boolean;\n  valid: boolean;\n  error: string;\n};\n\nexport interface ValidationUrl extends ValidateItem {\n  http_code: number;\n  metadata_present: boolean;\n  metadata_signature_present: boolean;\n}\n\nexport type ValidationResponse = {\n  name?: ValidateItem;\n  url?: ValidationUrl;\n  distribution_versions?: ValidateItem;\n  distribution_arch?: ValidateItem;\n  gpg_key?: ValidateItem;\n}[];\n\nexport interface PackageItem {\n  arch: string;\n  checksum: string;\n  epoch: number;\n  name: string;\n  release: string;\n  summary: string;\n  uuid: string;\n  version: string;\n}\n\nexport type PackagesResponse = {\n  data: PackageItem[];\n  links: Links;\n  meta: Meta;\n};\n\nexport type IntrospectRepositoryRequestItem = {\n  uuid: string;\n  reset_count?: boolean;\n};\n\nexport const getPopularRepositories: (\n  page: number,\n  limit: number,\n  filterData?: Partial<FilterData>,\n  sortBy?: string,\n) => Promise<PopularRepositoriesResponse> = async (page, limit, filterData, sortBy) => {\n  const searchQuery = filterData?.searchQuery;\n  const versionParam = filterData?.versions?.join(',');\n  const archParam = filterData?.arches?.join(',');\n  const { data } = await axios.get(\n    `/api/content-sources/v1/popular_repositories/?offset=${\n      (page - 1) * limit\n    }&limit=${limit}&search=${searchQuery}&version=${versionParam}&arch=${archParam}&sort_by=${sortBy}`,\n  );\n  return data;\n};\n\nexport const getContentList: (\n  page: number,\n  limit: number,\n  filterData: FilterData,\n  sortBy: string,\n) => Promise<ContentListResponse> = async (page, limit, filterData, sortBy) => {\n  const searchQuery = filterData.searchQuery;\n  const versionParam = filterData.versions.join(',');\n  const archParam = filterData.arches.join(',');\n  const statusParam = filterData?.statuses?.join(',');\n  const { data } = await axios.get(\n    `/api/content-sources/v1/repositories/?offset=${\n      (page - 1) * limit\n    }&limit=${limit}&search=${searchQuery}&version=${versionParam}&status=${statusParam}&arch=${archParam}&sort_by=${sortBy}`,\n  );\n  return data;\n};\n\nexport const deleteContentListItem: (uuid: string) => Promise<void> = async (uuid: string) => {\n  const { data } = await axios.delete(`/api/content-sources/v1/repositories/${uuid}`);\n  return data;\n};\n\nexport const AddContentListItems: (\n  request: CreateContentRequest,\n) => Promise<CreateContentRequestResponse> = async (request) => {\n  const { data } = await axios.post('/api/content-sources/v1.0/repositories/bulk_create/', request);\n  return data;\n};\n\nexport const EditContentListItem: (request: EditContentRequestItem) => Promise<void> = async (\n  request,\n) => {\n  const { data } = await axios.patch(\n    `/api/content-sources/v1.0/repositories/${request.uuid}`,\n    request,\n  );\n  return data;\n};\n\nexport const getRepositoryParams: () => Promise<RepositoryParamsResponse> = async () => {\n  const { data } = await axios.get('/api/content-sources/v1/repository_parameters/');\n  return data;\n};\n\nexport const validateContentListItems: (\n  request: CreateContentRequest,\n) => Promise<ValidationResponse> = async (request) => {\n  const { data } = await axios.post(\n    '/api/content-sources/v1.0/repository_parameters/validate/',\n    request,\n  );\n  return data;\n};\n\nexport const getGpgKey: (url: string) => Promise<GpgKeyResponse> = async (url: string) => {\n  const { data } = await axios.post(\n    '/api/content-sources/v1/repository_parameters/external_gpg_key/',\n    { url },\n  );\n  return data;\n};\n\nexport const getPackages: (\n  uuid: string,\n  page: number,\n  limit: number,\n  searchQuery: string,\n  sortBy: string,\n) => Promise<PackagesResponse> = async (\n  uuid: string,\n  page: number,\n  limit: number,\n  searchQuery: string,\n  sortBy: string,\n) => {\n  const { data } = await axios.get(\n    `/api/content-sources/v1.0/repositories/${uuid}/rpms?offset=${\n      (page - 1) * limit\n    }&limit=${limit}&search=${searchQuery}&sort_by=${sortBy}`,\n  );\n  return data;\n};\n\nexport const introspectRepository: (\n  request: IntrospectRepositoryRequestItem,\n) => Promise<void> = async (request) => {\n  const { data } = await axios.post(\n    `/api/content-sources/v1/repositories/${request.uuid}/introspect/`,\n    { reset_count: request.reset_count },\n  );\n  return data;\n};\n","import { AlertVariant } from '@patternfly/react-core';\nimport { useState } from 'react';\nimport { QueryClient, useMutation, useQuery } from 'react-query';\nimport { cloneDeep } from 'lodash';\n\nimport { useNotification } from '../Notifications/Notifications';\nimport {\n  ContentListResponse,\n  deleteContentListItem,\n  getContentList,\n  RepositoryParamsResponse,\n  getRepositoryParams,\n  AddContentListItems,\n  CreateContentRequest,\n  FilterData,\n  validateContentListItems,\n  EditContentListItem,\n  EditContentRequest,\n  getGpgKey,\n  PackagesResponse,\n  getPackages,\n  ErrorResponse,\n  getPopularRepositories,\n  PopularRepositoriesResponse,\n  CreateContentRequestResponse,\n  ContentItem,\n  introspectRepository,\n  IntrospectRepositoryRequestItem,\n} from './ContentApi';\nimport { ADMIN_TASK_LIST_KEY } from '../AdminTasks/AdminTaskQueries';\n\nexport const CONTENT_LIST_KEY = 'CONTENT_LIST_KEY';\nexport const POPULAR_REPOSITORIES_LIST_KEY = 'POPULAR_REPOSITORIES_LIST_KEY';\nexport const REPOSITORY_PARAMS_KEY = 'REPOSITORY_PARAMS_KEY';\nexport const CREATE_PARAMS_KEY = 'CREATE_PARAMS_KEY';\nexport const PACKAGES_KEY = 'PACKAGES_KEY';\n\nconst CONTENT_LIST_POLLING_TIME = 15000; // 15 seconds\n\nexport const usePopularRepositoriesQuery = (\n  page: number,\n  limit: number,\n  filterData?: Partial<FilterData>,\n  sortBy?: string,\n) =>\n  useQuery<PopularRepositoriesResponse>(\n    [POPULAR_REPOSITORIES_LIST_KEY, page, limit, sortBy, ...Object.values(filterData || {})], // NOTE: Update this if larger list!!!!\n    () => getPopularRepositories(page, limit, filterData, sortBy),\n    {\n      keepPreviousData: true,\n      staleTime: 20000,\n    },\n  );\n\nexport const useContentListQuery = (\n  page: number,\n  limit: number,\n  filterData: FilterData,\n  sortBy: string,\n) => {\n  const [polling, setPolling] = useState(false);\n  const [pollCount, setPollCount] = useState(0);\n\n  return useQuery<ContentListResponse>(\n    // Below MUST match the \"contentListKeyArray\" seen below in the useDeleteContent.\n    [CONTENT_LIST_KEY, page, limit, sortBy, ...Object.values(filterData)],\n    () => getContentList(page, limit, filterData, sortBy),\n    {\n      onSuccess: (data) => {\n        const containsPending = data?.data?.some(\n          ({ status }) => status === 'Pending' || status === '',\n        );\n        if (polling && containsPending) {\n          // Count each consecutive time polling occurs\n          setPollCount(pollCount + 1);\n        }\n        if (polling && !containsPending) {\n          // We were polling, but now the data is valid, we stop the count.\n          setPollCount(0);\n        }\n        if (pollCount > 40) {\n          // If polling occurs 40 times in a row, we stop it. Likely a data/kafka issue has occurred with the API.\n          return setPolling(false);\n        }\n        // This sets the polling state based whether the data contains any \"Pending\" status\n        return setPolling(containsPending);\n      },\n      onError: () => {\n        setPolling(false);\n        setPollCount(0);\n      },\n      refetchInterval: polling ? CONTENT_LIST_POLLING_TIME : undefined,\n      refetchIntervalInBackground: false, // This prevents endless polling when our app isn't the focus tab in a browser\n      refetchOnWindowFocus: polling, // If polling and navigate to another tab, on refocus, we want to poll once more. (This is based off of the stalestime below)\n      keepPreviousData: true,\n      staleTime: 20000,\n    },\n  );\n};\n\nexport const useAddContentQuery = (queryClient: QueryClient, request: CreateContentRequest) => {\n  const { notify } = useNotification();\n  return useMutation(() => AddContentListItems(request.filter((item) => !!item)), {\n    onSuccess: (data: CreateContentRequestResponse) => {\n      const hasPending = (data as ContentItem[]).some(({ status }) => status === 'Pending');\n\n      notify({\n        variant: AlertVariant.success,\n        title:\n          request?.length > 1\n            ? `${request?.length} custom repositories added`\n            : `Custom repository \"${request?.[0]?.name}\" added`,\n        description: hasPending\n          ? 'Repository introspection in progress'\n          : 'Repository introspection data already available',\n      });\n\n      queryClient.invalidateQueries(CONTENT_LIST_KEY);\n      queryClient.invalidateQueries(ADMIN_TASK_LIST_KEY);\n      queryClient.invalidateQueries(POPULAR_REPOSITORIES_LIST_KEY);\n    },\n    onError: (err: { response?: { data: ErrorResponse } }) => {\n      let description = 'An error occurred';\n\n      switch (typeof err?.response?.data) {\n        case 'string':\n          description = err?.response?.data;\n          break;\n        case 'object':\n          // Only show the first error\n          err?.response?.data.errors?.find(({ detail }) => {\n            if (detail) {\n              description = detail;\n              return true;\n            }\n          })?.detail;\n          break;\n        default:\n          break;\n      }\n\n      notify({\n        variant: AlertVariant.danger,\n        title: 'Error adding items to content list',\n        description,\n      });\n    },\n  });\n};\n\nexport const useAddPopularRepositoryQuery = (\n  queryClient: QueryClient,\n  request: CreateContentRequest,\n  page: number,\n  perPage: number,\n  filterData?: FilterData,\n) => {\n  const { notify } = useNotification();\n  const popularRepositoriesKeyArray = [\n    POPULAR_REPOSITORIES_LIST_KEY,\n    page,\n    perPage,\n    undefined,\n    ...Object.values(filterData || {}),\n  ];\n  const filteredRequest = request.filter((item) => !!item);\n  return useMutation(() => AddContentListItems(filteredRequest), {\n    onMutate: async () => {\n      const { name } = filteredRequest[0];\n      // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n      await queryClient.cancelQueries(popularRepositoriesKeyArray);\n      // Snapshot the previous value\n      const previousPopularData: Partial<PopularRepositoriesResponse> =\n        queryClient.getQueryData(popularRepositoriesKeyArray) || {};\n\n      queryClient.setQueryData(popularRepositoriesKeyArray, () => ({\n        ...previousPopularData,\n        data: previousPopularData.data?.map((data) => {\n          if (name === data.suggested_name && !data.uuid) {\n            return { ...data, uuid: 'temp', existing_name: name };\n          }\n          return data;\n        }),\n      }));\n      return { previousData: previousPopularData };\n    },\n    onSuccess: (data: CreateContentRequestResponse) => {\n      const hasPending = (data as ContentItem[]).some(({ status }) => status === 'Pending');\n      notify({\n        variant: AlertVariant.success,\n        title: `Custom repository \"${data?.[0]?.name}\" added`,\n        description: hasPending\n          ? 'Repository introspection in progress'\n          : 'Repository introspection data already available',\n      });\n\n      queryClient.invalidateQueries(CONTENT_LIST_KEY);\n      queryClient.invalidateQueries(ADMIN_TASK_LIST_KEY);\n      queryClient.invalidateQueries(POPULAR_REPOSITORIES_LIST_KEY);\n    },\n    onError: (err, _newData, context) => {\n      if (context) {\n        const { previousData } = context as {\n          previousData: PopularRepositoriesResponse;\n        };\n        queryClient.setQueryData(popularRepositoriesKeyArray, previousData);\n        const error = err as Error; // Forced Type\n        notify({\n          variant: AlertVariant.danger,\n          title: 'Error deleting item from popularRepo',\n          description: error?.message,\n        });\n      }\n    },\n  });\n};\n\nexport const useEditContentQuery = (queryClient: QueryClient, request: EditContentRequest) => {\n  const { notify } = useNotification();\n  return useMutation(() => EditContentListItem(request[0]), {\n    onSuccess: () => {\n      notify({\n        variant: AlertVariant.success,\n        title: `Successfully edited ${request.length} ${request.length > 1 ? 'items' : 'item'}`,\n      });\n      queryClient.invalidateQueries(CONTENT_LIST_KEY);\n      queryClient.invalidateQueries(ADMIN_TASK_LIST_KEY);\n      queryClient.invalidateQueries(POPULAR_REPOSITORIES_LIST_KEY);\n    },\n    onError: (err: { response?: { data: ErrorResponse } }) => {\n      let description = 'An error occurred';\n\n      switch (typeof err?.response?.data) {\n        case 'string':\n          description = err?.response?.data;\n          break;\n        case 'object':\n          // Only show the first error\n          err?.response?.data.errors?.find(({ detail }) => {\n            if (detail) {\n              description = detail;\n              return true;\n            }\n          })?.detail;\n          break;\n        default:\n          break;\n      }\n\n      notify({\n        variant: AlertVariant.danger,\n        title: 'Error editing items on content list',\n        description,\n      });\n    },\n  });\n};\n\nexport const useValidateContentList = () => {\n  const { notify } = useNotification();\n  return useMutation((request: CreateContentRequest) => validateContentListItems(request), {\n    onError: (err) => {\n      const error = err as Error; // Forced Type\n      notify({\n        variant: AlertVariant.danger,\n        title: 'Error validating form fields',\n        description: error?.message,\n      });\n    },\n  });\n};\n\nexport const useDeletePopularRepositoryMutate = (\n  queryClient: QueryClient,\n  page: number,\n  perPage: number,\n  filterData?: FilterData,\n) => {\n  const popularRepositoriesKeyArray = [\n    POPULAR_REPOSITORIES_LIST_KEY,\n    page,\n    perPage,\n    undefined,\n    ...Object.values(filterData || {}),\n  ];\n  const { notify } = useNotification();\n  return useMutation(deleteContentListItem, {\n    onMutate: async (uuid: string) => {\n      // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n      await queryClient.cancelQueries(popularRepositoriesKeyArray);\n      // Snapshot the previous value\n      const previousPopularData: Partial<PopularRepositoriesResponse> =\n        queryClient.getQueryData(popularRepositoriesKeyArray) || {};\n\n      queryClient.setQueryData(popularRepositoriesKeyArray, () => ({\n        ...previousPopularData,\n        data: previousPopularData.data?.map((data) => {\n          if (data.uuid === uuid) {\n            return { ...data, uuid: undefined };\n          }\n          return data;\n        }),\n      }));\n      // Return a context object with the snapshotted value\n      return { previousData: previousPopularData, queryClient };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries(CONTENT_LIST_KEY);\n      queryClient.invalidateQueries(ADMIN_TASK_LIST_KEY);\n      queryClient.invalidateQueries(POPULAR_REPOSITORIES_LIST_KEY);\n    },\n    // If the mutation fails, use the context returned from onMutate to roll back\n    onError: (err, _newData, context) => {\n      if (context) {\n        const { previousData } = context as {\n          previousData: PopularRepositoriesResponse;\n        };\n        queryClient.setQueryData(popularRepositoriesKeyArray, previousData);\n        const error = err as Error; // Forced Type\n        notify({\n          variant: AlertVariant.danger,\n          title: 'Error deleting item from popularRepo',\n          description: error?.message,\n        });\n      }\n    },\n  });\n};\n\nexport const useDeleteContentItemMutate = (\n  queryClient: QueryClient,\n  page: number,\n  perPage: number,\n  filterData?: FilterData,\n  sortString?: string,\n) => {\n  // Below MUST match the \"useContentList\" key found above or updates will fail.\n  const contentListKeyArray = [\n    CONTENT_LIST_KEY,\n    page,\n    perPage,\n    sortString,\n    ...Object.values(filterData || {}),\n  ];\n  const { notify } = useNotification();\n  return useMutation(deleteContentListItem, {\n    onMutate: async (uuid: string) => {\n      // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n      await queryClient.cancelQueries(contentListKeyArray);\n      // Snapshot the previous value\n      const previousData: Partial<ContentListResponse> =\n        queryClient.getQueryData(contentListKeyArray) || {};\n\n      // Optimistically update to the new value\n      queryClient.setQueryData(contentListKeyArray, () => ({\n        ...previousData,\n        data: previousData.data?.filter((data) => uuid !== data.uuid),\n        meta: previousData.meta\n          ? {\n              ...previousData.meta,\n              count: previousData.meta.count ? previousData.meta.count - 1 : 1,\n            }\n          : undefined,\n      }));\n      // Return a context object with the snapshotted value\n      return { previousData, queryClient };\n    },\n    onSuccess: (_data, _variables, context) => {\n      // Update all of the existing calls \"count\" to prevent number jumping on pagination\n      const { previousData } = context as {\n        previousData: ContentListResponse;\n      };\n      queryClient.setQueriesData(CONTENT_LIST_KEY, (data: Partial<ContentListResponse> = {}) => {\n        if (data?.meta?.count) {\n          data.meta.count = previousData?.meta?.count - 1;\n        }\n\n        return data;\n      });\n      queryClient.invalidateQueries(CONTENT_LIST_KEY);\n      queryClient.invalidateQueries(ADMIN_TASK_LIST_KEY);\n      queryClient.invalidateQueries(POPULAR_REPOSITORIES_LIST_KEY);\n    },\n    // If the mutation fails, use the context returned from onMutate to roll back\n    onError: (err, _newData, context) => {\n      if (context) {\n        const { previousData } = context as {\n          previousData: ContentListResponse;\n        };\n        queryClient.setQueryData(contentListKeyArray, previousData);\n        const error = err as Error; // Forced Type\n        notify({\n          variant: AlertVariant.danger,\n          title: 'Error deleting item from content list',\n          description: error?.message,\n        });\n      }\n    },\n  });\n};\n\nexport const useRepositoryParams = () =>\n  useQuery<RepositoryParamsResponse>(REPOSITORY_PARAMS_KEY, getRepositoryParams, {\n    keepPreviousData: true,\n    staleTime: Infinity,\n  });\n\nexport const useFetchGpgKey = () => {\n  const { notify } = useNotification();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchGpgKey = async (url: string): Promise<string> => {\n    setIsLoading(true);\n    let gpg_key = url;\n    try {\n      const data = await getGpgKey(url);\n      gpg_key = data.gpg_key;\n    } catch ({ response = {} }: any) {\n      const { data } = response as { data: { message: string | undefined } | string };\n      const description = typeof data === 'string' ? data : data?.message;\n      notify({\n        variant: AlertVariant.danger,\n        title: 'Error fetching GPG key from provided URL',\n        description,\n      });\n    }\n    setIsLoading(false);\n    return gpg_key;\n  };\n\n  return { fetchGpgKey, isLoading };\n};\n\nexport const useGetPackagesQuery = (\n  uuid: string,\n  count: number,\n  page: number,\n  limit: number,\n  searchQuery: string,\n  sortBy: string,\n) =>\n  useQuery<PackagesResponse>(\n    [PACKAGES_KEY, uuid, page, limit, searchQuery, sortBy, count],\n    () => getPackages(uuid, page, limit, searchQuery, sortBy),\n    {\n      keepPreviousData: true,\n      optimisticResults: true,\n      staleTime: 60000,\n      onError: (err) => {\n        const { notify } = useNotification();\n        const error = err as Error; // Forced Type\n        notify({\n          variant: AlertVariant.danger,\n          title: 'Error fetching rpm packages',\n          description: error?.message,\n        });\n      },\n    },\n  );\n\nexport const useIntrospectRepositoryMutate = (\n  queryClient: QueryClient,\n  page: number,\n  perPage: number,\n  filterData?: FilterData,\n  sortString?: string,\n) => {\n  // Below MUST match the \"useContentList\" key found above or updates will fail.\n  const contentListKeyArray = [\n    CONTENT_LIST_KEY,\n    page,\n    perPage,\n    sortString,\n    ...Object.values(filterData || {}),\n  ];\n  const { notify } = useNotification();\n  return useMutation(introspectRepository, {\n    onMutate: async (item: IntrospectRepositoryRequestItem) => {\n      // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n      await queryClient.cancelQueries(contentListKeyArray);\n      // Snapshot the previous value\n      const previousData: Partial<ContentListResponse> =\n        queryClient.getQueryData(contentListKeyArray) || {};\n\n      const previousStatus = previousData.data?.find((data) => item.uuid == data.uuid)?.status;\n      const newData = cloneDeep(previousData);\n      if (previousStatus) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        newData.data.filter((data) => item.uuid == data.uuid).at(0).status = 'Pending';\n      }\n\n      // Optimistically update to the new value\n      queryClient.setQueryData(contentListKeyArray, () => ({\n        ...newData,\n      }));\n      // Return a context object with the snapshotted value\n      return { previousData, queryClient };\n    },\n    onSuccess: () => {\n      notify({\n        variant: AlertVariant.success,\n        title: 'Repository introspection in progress',\n      });\n      queryClient.invalidateQueries(ADMIN_TASK_LIST_KEY);\n    },\n    // If the mutation fails, use the context returned from onMutate to roll back\n    onError: (err: { response?: { data: ErrorResponse } }, _newData, context) => {\n      if (context) {\n        const error = err as Error; // Forced Type\n\n        let description = error?.message;\n        switch (typeof err?.response?.data) {\n          case 'string':\n            description = err?.response?.data;\n            break;\n          case 'object':\n            // Only show the first error\n            err?.response?.data.errors?.find(({ detail }) => {\n              if (detail) {\n                description = detail;\n              }\n            })?.detail;\n            break;\n          default:\n            break;\n        }\n\n        const { previousData } = context as {\n          previousData: ContentListResponse;\n        };\n        queryClient.setQueryData(contentListKeyArray, previousData);\n\n        notify({\n          variant: AlertVariant.danger,\n          title: 'Error introspecting repository',\n          description,\n        });\n      }\n    },\n  });\n};\n","import axios from 'axios';\n\nexport interface Feature {\n  enabled: boolean;\n  accessible: boolean;\n}\n\nexport interface Features {\n  snapshots?: Feature;\n  admintasks?: Feature;\n}\n\nexport const getFeatures: () => Promise<Features> = async () => {\n  const { data } = await axios.get('/api/content-sources/v1/features/');\n  return data;\n};\n","import { AlertVariant } from '@patternfly/react-core';\nimport { useState } from 'react';\nimport { useNotification } from '../Notifications/Notifications';\nimport { Features, getFeatures } from './FeatureApi';\n\nexport const useFetchFeaturesQuery = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const { notify } = useNotification();\n\n  const fetchFeatures = async (): Promise<Features | null> => {\n    setIsLoading(true);\n    let features: Features | null = null;\n    try {\n      features = await getFeatures();\n    } catch ({ response = {} }: any) {\n      const { data } = response as { data: { message: string | undefined } | string };\n      const description = typeof data === 'string' ? data : data?.message;\n      notify({\n        variant: AlertVariant.danger,\n        title: 'Error fetching features',\n        description,\n      });\n    }\n    setIsLoading(false);\n    return features;\n  };\n\n  return { fetchFeatures, isLoading };\n};\n","import { AlertVariant } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useDispatch } from 'react-redux';\n\nexport interface NotificationPayload {\n  title: React.ReactNode | string;\n  variant: AlertVariant;\n  description?: React.ReactNode | string;\n  dismissable?: boolean;\n}\n\nexport const useNotification = () => {\n  const dispatch = useDispatch();\n  const notify: (payload: NotificationPayload) => void = (payload: NotificationPayload) =>\n    dispatch(addNotification(payload));\n\n  return { notify };\n};\n","import { initStore, restoreStore } from '@redhat-cloud-services/insights-common-typescript';\nimport { Middleware } from 'redux';\n\nexport const createStore = (...middleware: Middleware[]) => initStore({}, {}, ...middleware);\n\nexport const resetStore = () => restoreStore();\n"],"names":["useAppContext","rbac","isFetchingFeatures","Bullseye","Spinner","size","read","NoPermissionsPage","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","logger","store","useMemo","resetStore","createStore","useEffect","insights","chrome","appAction","QueryClientProvider","client","ContextProvider","value","delay","useState","debouncedValue","setDebouncedValue","isEqual","setTimeout","clearTimeout","useDeepCompareMemoize","ref","useRef","current","callback","dependencies","map","useStyles","createUseStyles","mainContainer","backgroundColor","global_BackgroundColor_100","display","flexDirection","mainContainer100Height","composes","minHeight","topContainer","justifyContent","padding","height","bottomContainer","invisible","opacity","formatDate","date","format","perPageKey","classes","storedPerPage","Number","localStorage","getItem","page","setPage","perPage","setPerPage","activeSortIndex","setActiveSortIndex","activeSortDirection","setActiveSortDirection","payloadOpen","setPayloadOpen","undefined","adminTask","setAdminTask","accountId","orgId","statuses","filterData","setFilterData","clearFilters","notFiltered","length","useAdminTaskListQuery","isLoading","error","isError","isFetching","data","meta","count","limit","offset","actionTakingPlace","onSetPage","_","newPage","onPerPageSelect","newPerPage","setItem","toString","columnHeaders","adminTaskList","itemName","notFilteredBody","countIsZero","Grid","className","setClosed","open","uuid","status","Flex","values","FlexItem","hide","Pagination","id","widgetId","perPageComponent","isDisabled","itemCount","isCompact","SkeletonTable","rowSize","colSize","variant","TableVariant","compact","TableComposable","ouiaId","Thead","Tr","columnHeader","index","Th","sort","columnIndex","sortBy","direction","defaultDirection","onSort","_event","Tbody","Td","org_id","account_id","typename","queued_at","width","Button","onClick","PaginationVariant","bottom","chipsContainer","paddingTop","marginLeft","searchInput","paddingRight","marginRight","searchIcon","color","global_secondary_color_100","position","top","left","pointerEvents","statusValues","filters","filterType","setFilterType","setAccountId","setOrgId","selectedStatuses","setSelectedStatuses","debouncedAccountId","debouncedOrgId","debouncedSelectedStatuses","Filter","TextInput","placeholder","onChange","SearchIcon","toggleAriaLabel","toggleId","options","SelectVariant","checkbox","selectedProp","setSelected","placeholderText","InputGroup","single","toggleIcon","FilterIcon","fullWidth","default","ChipGroup","categoryName","Chip","filter","chip","isInline","red","global_danger_color_100","green","global_success_color_100","gold","global_warning_color_100","spinner","animationDuration","margin","alignContent","spacer","ExclamationCircleIcon","CheckCircleIcon","BanIcon","ClockIcon","jsonView","fontSize","activeTabKey","setActiveTabKey","detailRef","createRef","useFetchAdminTaskQuery","tabs","payload","push","title","contentRef","pulp","sync","distribution","publication","Modal","ModalVariant","medium","ouiaSafe","isOpen","onClose","header","Tabs","activeKey","onSelect","tabIndex","Tab","TabTitleText","eventKey","tabContentRef","TabContent","hidden","name","src","enableClipboard","copy","navigator","clipboard","writeText","JSON","stringify","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","started_at","finished_at","useQueryClient","editModalOpen","setEditModalOpen","editValues","setEditValues","searchQuery","versions","arches","useRepositoryParams","repositoryParamsLoading","repositoryParamsError","repositoryParamsIsError","distribution_versions","distribution_arches","distVersions","distArches","columnSortAttributes","sortString","useContentListQuery","useDeleteContentItemMutate","deleteItem","isDeleting","useIntrospectRepositoryMutate","introspectRepository","isIntrospecting","introspectRepoForUuid","reset_count","archesDisplay","arch","find","label","contentList","rowActions","useCallback","rowData","then","notFilteredButton","time","url","distribution_arch","last_introspection_time","href","includes","join","fromNow","retryHandler","isActionCell","content","show","write","setDisabled","ActionsColumn","items","description","global_Color_200","removeSideBorder","borderLeft","toggleAllRow","cursor","borderBottom","global_link_Color","fill","colHeader","mainContentCol","toggleAction","addRepositoryButton","marginBottom","saveButton","transition","removeButton","singleContentCol","gpgKeyInput","backgroundPositionX","defaultValues","gpgKey","gpgLoading","expanded","metadataVerification","defaultTouchedState","isButtonDisabled","hidePackageVerification","isModalOpen","setIsModalOpen","changeVerified","setChangeVerified","gpgKeyList","setGpgKeyList","formik","useFormik","initialValues","validateOnBlur","validateOnChange","validationSchema","makeValidationSchema","initialTouched","onSubmit","updateGpgKey","updatedData","useFetchGpgKey","fetchGpgKey","isFetchingGpgKey","debouncedGpgKeyList","getQueryData","REPOSITORY_PARAMS_KEY","list","Promise","all","updateValue","isValidURL","result","validationList","metadata_signature_present","setValues","distributionArches","distributionVersions","forEach","closeModal","setTouched","resetForm","useAddContentQuery","mapFormikToAPIValues","addContent","isAdding","createDataLengthOf1","allExpanded","some","updateVariable","newValue","getFieldValidation","field","errors","touched","setTouchedOnLastItemIfUntouchedAndCollapsed","lastItem","updatedTouched","debouncedValues","useValidateContentList","validateContentList","isValidating","gpg_key","metadata_verification","validationData","validateForm","formikErrors","mappedErrorData","mapValidationData","setErrors","onToggle","notify","useNotification","help","Popover","headerContent","bodyContent","OutlinedQuestionCircleIcon","footer","Stack","StackItem","isValid","vals","icon","PlusCircleIcon","isExpanded","expand","rowIndex","dataLabel","newValues","splice","newTouched","newErrors","removeRepository","MinusCircleIcon","colSpan","Form","FormGroup","isRequired","fieldId","validated","helperTextInvalid","type","onBlur","newVersion","isEmpty","updateArchAndVersion","labelIcon","Tooltip","menuAppendTo","document","body","Object","keys","key","typeaheadMulti","valueToUpdate","val","setVersionSelected","FileUpload","filenamePlaceholder","textAreaPlaceholder","spellCheck","onDataChange","onTextChange","onClearClick","dropzoneProps","maxSize","maxUploadSize","onDropRejected","files","failedFileUpload","allowEditingUploadedText","browseButtonText","Radio","isChecked","fontWeight","loading","allTouched","every","noErrors","hasTouchedError","REGEX_URL","regex","RegExp","match","formikValues","updatedValidationData","rest","metadata_present","http_code","mapNoMetaDataError","err","Yup","addMethod","object","propertyName","message","this","test","parent","v","createError","path","array","shape","string","min","max","required","uniqueProperty","AlertVariant","danger","versionNamesLabels","setVersionNamesLabels","archNamesLabels","setArchNamesLabels","setSearchQuery","selectedVersions","setSelectedVersions","selectedArches","setSelectedArches","debouncedSearchQuery","debouncedSelectedVersions","debouncedSelectedArches","getLabels","names","namesLabels","labels","found","chips","setChips","version","mapToDefaultFormikValues","valuesHaveChanged","useEditContentQuery","mapFormikToEditAPIValues","editContent","isEditing","hasNotChanged","urlOnBlur","noVerticalAlign","text","global_disabled_color_100","link","modalOpen","setModalOpen","package_count","isContentLeftAligned","Text","paddingBottom","packageCount","useGetPackagesQuery","sortParams","packageList","fetchingOrLoading","notLoadingZeroCount","hasNoBodyWrapper","InnerScrollContainer","release","clearSearch","emptyStateContainer","flexGrow","EmptyState","EmptyStateVariant","full","EmptyStateIcon","Title","headingLevel","EmptyStateBody","extend","relativeTime","PopoverDescription","timeText","PopoverFooter","failedIntrospectionsCount","lastIntrospectionTime","alertSeverityVariant","headerIcon","footerContent","isLink","ExclamationTriangleIcon","addRepositoriesButton","checkboxMinWidth","minWidth","disabled","checkedRepositories","setCheckedRepositories","selectedData","setSelectedData","selectedUUID","setSelectedUUID","searchValue","setSearchValue","debouncedSearchValue","usePopularRepositoriesQuery","areAllReposAdded","atLeastOneRepoChecked","areAllReposSelected","useAddPopularRepositoryQuery","addContentQuery","useDeletePopularRepositoryMutate","popularData","request","checked","suggested_name","select","isSelected","isHeaderSelectDisabled","existing_name","isSelecting","disable","newData","tab","textDecoration","outlineOffset","containerMargin","DEFAULT_ROUTE","POPULAR_REPOSITORIES_ROUTE","ADMIN_TASKS_ROUTE","useLocation","pathname","locationKey","features","currentRoute","last","split","tabbedRoutes","route","Element","admintasks","enabled","accessible","keyParams","Link","accessKey","to","Routes","Route","element","ErrorPage","Navigate","replace","children","cloneElement","selected","Array","isArray","setIsOpen","selectFrom","option","SelectOption","Select","selection","remaining","item","selections","isCheckboxSelectionBadgeHidden","emptyStateBody","ErrorBoundaryPage","headerTitle","errorTitle","errorDescription","PageHeader","subtext","global_Color_100","PageHeaderTitle","style","LockIcon","quickstartContainer","quickstartSpinner","buildCustomButton","marginTop","useChrome","isBeta","quickStarts","isPreview","setIsExpanded","quickStartLoading","setQuickStartLoading","prev","ExpandableSection","toggleText","displaySize","iconPosition","ArrowRightIcon","activateQuickstart","console","warn","global_danger_color_200","global_success_color_200","global_warning_color_200","blue","global_info_color_200","props","fontStyle","alignItems","rel","target","ExternalLinkAltIcon","getRegistry","appname","AppContext","createContext","setRbac","setFeatures","useFlag","useFetchFeaturesQuery","fetchFeatures","register","notifications","notificationsReducer","auth","getUser","fetchRBAC","fetchedFeatures","Provider","hasPermission","useContext","getAdminTasks","accountIdParam","orgIdParam","statusParam","toLowerCase","get","getAdminTask","ADMIN_TASK_LIST_KEY","ADMIN_TASK_KEY","polling","setPolling","pollCount","setPollCount","useQuery","onSuccess","containsRunning","onError","refetchInterval","refetchIntervalInBackground","keepPreviousData","staleTime","getPopularRepositories","versionParam","archParam","getContentList","deleteContentListItem","delete","AddContentListItems","post","EditContentListItem","patch","getRepositoryParams","validateContentListItems","getGpgKey","getPackages","CONTENT_LIST_KEY","POPULAR_REPOSITORIES_LIST_KEY","CREATE_PARAMS_KEY","PACKAGES_KEY","containsPending","useMutation","hasPending","success","invalidateQueries","response","detail","popularRepositoriesKeyArray","filteredRequest","onMutate","cancelQueries","previousPopularData","setQueryData","previousData","_newData","context","contentListKeyArray","_data","_variables","setQueriesData","Infinity","setIsLoading","optimisticResults","previousStatus","cloneDeep","at","getFeatures","dispatch","useDispatch","addNotification","initStore","middleware","restoreStore"],"sourceRoot":""}