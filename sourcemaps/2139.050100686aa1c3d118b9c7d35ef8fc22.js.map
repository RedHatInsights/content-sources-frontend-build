{"version":3,"file":"js/2139.1665589659168.4400dbda39cc52e7de12.js","mappings":"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","sources":["webpack:///./src/App.tsx","webpack:///./src/AppEntry.tsx","webpack:///./src/Routes.tsx","webpack:///./src/components/AddContent/AddContent.tsx","webpack:///./src/components/AddContent/components/ContentValidity.tsx","webpack:///./src/components/AddContent/helpers.ts","webpack:///./src/components/ContentListTable/ContentListFilters.tsx","webpack:///./src/components/ContentListTable/ContentListTable.tsx","webpack:///./src/components/ContentListTable/components/EmptyTableState.tsx","webpack:///./src/components/ContentListTable/components/PackageCount.tsx","webpack:///./src/components/ContentListTable/components/StatusIcon.tsx","webpack:///./src/components/ContentListTable/components/StatusText.tsx","webpack:///./src/components/DropdownSelect/DropdownSelect.tsx","webpack:///./src/components/EditContentModal/EditContentModal.tsx","webpack:///./src/components/EditContentModal/helpers.ts","webpack:///./src/components/Error/ErrorPage.tsx","webpack:///./src/components/Hide/Hide.tsx","webpack:///./src/components/OptionalTooltip/OptionalTooltip.tsx","webpack:///./src/components/UrlWithLinkIcon/UrlWithLinkIcon.tsx","webpack:///./src/pages/ContentPage/ContentPage.tsx","webpack:///./src/services/Content/ContentApi.ts","webpack:///./src/services/Content/ContentQueries.ts","webpack:///./src/services/Notifications/Notifications.tsx","webpack:///./src/services/useDebounce.tsx","webpack:///./src/store/index.tsx"],"sourcesContent":["import '@redhat-cloud-services/frontend-components-utilities/styles/_all';\n\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { getRegistry as _getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport pckg from '../package.json';\nimport { Routes } from './Routes';\n\n// Example of how to re-implement inaccurately typed imports\nconst getRegistry = _getRegistry as unknown as () => { register: ({ notifications }) => void };\n\nconst App = () => {\n  const history = useHistory();\n  const chrome = useChrome();\n\n  useEffect(() => {\n    let unregister;\n    if (chrome) {\n      const registry = getRegistry();\n      registry.register({ notifications: notificationsReducer });\n      const { updateDocumentTitle, on: onChromeEvent } = chrome.init();\n      // You can use directly the name of your app\n      updateDocumentTitle(pckg.insights.appname);\n      unregister = onChromeEvent('APP_NAVIGATION', (event) => history.push(`/${event.navId}`));\n    }\n\n    return () => {\n      unregister();\n    };\n  }, [chrome, history]);\n\n  return (\n    <>\n      <NotificationsPortal />\n      <Routes />\n    </>\n  );\n};\n\nexport default App;\n","import { getBaseName } from '@redhat-cloud-services/insights-common-typescript';\nimport React, { useEffect } from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as Redux from 'redux';\n\nimport App from './App';\nimport { createStore, resetStore } from './store';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false, // TODO: Have a conversation about this\n    },\n  },\n});\n\ninterface AppEntryProps {\n  logger?: Redux.Middleware;\n}\n\nconst AppEntry: React.FunctionComponent<AppEntryProps> = ({ logger }) => {\n  const store = React.useMemo(() => {\n    resetStore();\n    if (logger) {\n      return createStore(logger).store;\n    } else {\n      return createStore().store;\n    }\n  }, [logger]);\n\n  useEffect(() => {\n    insights?.chrome?.appAction?.('view-list-page');\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <QueryClientProvider client={queryClient}>\n        <Router basename={getBaseName(window.location.pathname)}>\n          <App />\n        </Router>\n      </QueryClientProvider>\n    </Provider>\n  );\n};\n\nexport default AppEntry;\n","import { Bullseye, Spinner } from '@patternfly/react-core';\nimport React, { Suspense } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { ErrorPage } from './components/Error/ErrorPage';\nimport ContentPage from './pages/ContentPage/ContentPage';\n\ninterface Path {\n  path: string;\n  component: React.ComponentType;\n}\n\nexport const pathRoutes: Path[] = [\n  {\n    path: '/content',\n    component: ContentPage,\n  },\n];\n\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Switch>\n      {pathRoutes.map(({ path, component: Component }) => (\n        <Route\n          key={path}\n          path={path}\n          component={() => (\n            <ErrorPage>\n              <Component />\n            </ErrorPage>\n          )}\n        />\n      ))}\n      <Route>\n        <Redirect exact to='/content' />\n      </Route>\n    </Switch>\n  </Suspense>\n);\n","import {\n  Button,\n  FileUpload,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Popover,\n  Radio,\n  SelectVariant,\n  Stack,\n  StackItem,\n  TextInput,\n  Tooltip,\n} from '@patternfly/react-core';\nimport {\n  OutlinedQuestionCircleIcon,\n  PlusCircleIcon,\n  MinusCircleIcon,\n} from '@patternfly/react-icons';\nimport { TableComposable, Tbody, Td, Tr } from '@patternfly/react-table';\nimport { global_Color_200, global_link_Color } from '@patternfly/react-tokens';\nimport { useFormik } from 'formik';\nimport { useEffect, useMemo, useState } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport Hide from '../Hide/Hide';\nimport {\n  isValidURL,\n  mapFormikToAPIValues,\n  mapValidationData,\n  makeValidationSchema,\n  magicURLList,\n  FormikValues,\n} from './helpers';\nimport useDebounce from '../../services/useDebounce';\nimport ContentValidity from './components/ContentValidity';\nimport {\n  REPOSITORY_PARAMS_KEY,\n  useAddContentQuery,\n  useValidateContentList,\n} from '../../services/Content/ContentQueries';\nimport { RepositoryParamsResponse } from '../../services/Content/ContentApi';\nimport DropdownSelect from '../DropdownSelect/DropdownSelect';\nimport { useQueryClient } from 'react-query';\nimport OptionalTooltip from '../OptionalTooltip/OptionalTooltip';\n\ninterface Props {\n  isLoading?: boolean;\n}\n\nconst useStyles = createUseStyles({\n  description: {\n    color: global_Color_200.value,\n  },\n  removeSideBorder: {\n    '&:after': {\n      borderLeft: 'none!important',\n    },\n  },\n  toggleAllRow: {\n    composes: ['$removeSideBorder'],\n    cursor: 'pointer',\n    borderBottom: 'none!important',\n    '& td': {\n      color: global_link_Color.value + '!important',\n      padding: '8px 0!important',\n    },\n    '& svg': {\n      fill: global_link_Color.value + '!important',\n      padding: '',\n    },\n  },\n  colHeader: {\n    '& td': {\n      '&:not(:last-child)': { cursor: 'pointer' },\n      padding: '8px 0!important',\n    },\n  },\n  mainContentCol: {\n    composes: ['$removeSideBorder'],\n    padding: '16px 0px 16px 36px!important',\n  },\n  toggleAction: {\n    composes: ['$removeSideBorder'],\n    '& button': {\n      padding: '8px',\n    },\n  },\n  addRepositoryButton: {\n    marginBottom: '24px',\n  },\n  saveButton: {\n    marginRight: '36px',\n    transition: 'unset!important',\n  },\n  removeButton: {\n    display: 'flex!important',\n    justifyContent: 'flex-end',\n  },\n});\n\nconst defaultValues: FormikValues = {\n  name: '',\n  url: '',\n  gpgKey: '',\n  arch: 'any',\n  versions: ['any'],\n  gpgLoading: false,\n  expanded: true,\n  metadataVerification: false,\n};\n\nconst AddContent = ({ isLoading }: Props) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const classes = useStyles();\n  const queryClient = useQueryClient();\n  const formik = useFormik({\n    initialValues: [defaultValues],\n    validateOnBlur: false,\n    validateOnChange: false,\n    validationSchema: makeValidationSchema(),\n    initialTouched: [{ name: false, url: false }],\n    onSubmit: () => undefined,\n  });\n\n  const { distribution_arches: distArches = [], distribution_versions: distVersions = [] } =\n    queryClient.getQueryData<RepositoryParamsResponse>(REPOSITORY_PARAMS_KEY) || {};\n\n  const { distributionArches, distributionVersions } = useMemo(() => {\n    const distributionArches = {};\n    const distributionVersions = {};\n    distArches.forEach(({ name, label }) => (distributionArches[name] = label));\n    distVersions.forEach(({ name, label }) => (distributionVersions[name] = label));\n    return { distributionArches, distributionVersions };\n  }, [distArches, distVersions]);\n\n  const handleModalToggle = () => setIsModalOpen(!isModalOpen);\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    formik.resetForm();\n  };\n\n  const { mutateAsync: addContent, isLoading: isAdding } = useAddContentQuery(\n    queryClient,\n    mapFormikToAPIValues(formik.values),\n  );\n\n  const createDataLengthOf1 = formik.values.length === 1;\n\n  const allExpanded = !formik.values.some(({ expanded }) => !expanded);\n\n  const expandAllToggle = () => {\n    formik.setValues([...formik.values.map((vals) => ({ ...vals, expanded: !allExpanded }))]);\n    setTouchedOnLastItemIfUntouchedAndCollapsed();\n  };\n\n  const updateVariable = (index: number, newValue) => {\n    const updatedData = [...formik.values];\n    updatedData[index] = { ...updatedData[index], ...newValue };\n    formik.setValues(updatedData);\n  };\n\n  const updateTouched = (index: number, field: 'name' | 'url' | 'gpgKey') => {\n    if (!formik.touched[index]?.[field]) {\n      const updatedTouched = [...formik.touched];\n      updatedTouched[index] = { ...updatedTouched[index], [field]: true };\n      formik.setTouched(updatedTouched);\n    }\n  };\n\n  const addRepository = () => {\n    formik.setTouched([...formik.touched, { name: false, url: false }]);\n    formik.setValues([\n      ...formik.values.map((vals) => ({ ...vals, expanded: false })),\n      defaultValues,\n    ]);\n  };\n\n  const removeRepository = (index: number) => {\n    const newValues = formik.values;\n    newValues.splice(index, 1);\n\n    const newTouched = formik.touched;\n    newTouched.splice(index, 1);\n\n    const newErrors = formik.errors;\n    newErrors.splice(index, 1);\n\n    formik.setTouched(newTouched);\n    formik.setErrors(newErrors);\n    formik.setValues(newValues);\n  };\n\n  const getFieldValidation = (\n    index: number,\n    field: keyof FormikValues,\n  ): 'default' | 'success' | 'error' => {\n    const value = !!formik.values[index]?.[field];\n    const errors = !!formik.errors[index]?.[field];\n    const touched = formik.touched[index]?.[field];\n    switch (true) {\n      case errors && touched:\n        return 'error';\n      case value && touched:\n        return 'success';\n      default:\n        return 'default';\n    }\n  };\n\n  // The below sets the item as touched if the user closes the expansion without touching any fields\n  // This is to ensure that the user understands that the item needs attention (and is in error)\n  const setTouchedOnLastItemIfUntouchedAndCollapsed = () => {\n    const lastItem = formik.touched?.length - 1 || 0;\n    const { name, url } = formik.touched[lastItem] || {};\n    if (!name && !url) {\n      const updatedTouched = [...formik.touched];\n      updatedTouched[lastItem] = { ...updatedTouched[lastItem], name: true, url: true };\n      formik.setTouched(updatedTouched);\n    }\n  };\n\n  let debouncedValues = useDebounce(formik.values) || []; // Initial value of []\n\n  const { mutateAsync: validateContentList, data: validationList } = useValidateContentList();\n\n  useEffect(() => {\n    if (isModalOpen) {\n      if (debouncedValues.length !== formik.values.length) debouncedValues = formik.values;\n      validateContentList(\n        debouncedValues.map(({ name, url, gpgKey, metadataVerification }) => ({\n          name,\n          url,\n          gpg_key: gpgKey,\n          metadata_verification: metadataVerification,\n        })),\n      ).then(async (validationData) => {\n        const formikErrors = await formik.validateForm(debouncedValues);\n        const mappedErrorData = mapValidationData(validationData, formikErrors);\n        formik.setErrors(mappedErrorData);\n      });\n    }\n  }, [debouncedValues, debouncedValues.length, formik.touched, isModalOpen]);\n\n  const onToggle = (index: number) => {\n    if (formik.values[index]?.expanded) {\n      updateVariable(index, { ...formik.values[index], expanded: false });\n      setTouchedOnLastItemIfUntouchedAndCollapsed();\n    } else updateVariable(index, { ...formik.values[index], expanded: true });\n  };\n\n  const updateArchAndVersion = (index: number) => {\n    const url = formik.values[index]?.url;\n    if (\n      isValidURL(url) &&\n      (formik.values[index]?.arch === 'any' || formik.values[index].versions[0] === 'any')\n    ) {\n      const arch =\n        (formik.values[index]?.arch !== 'any' && formik.values[index]?.arch) ||\n        distArches.find(({ name, label }) => url.includes(name) || url.includes(label))?.label ||\n        '';\n\n      let versions: Array<string> = [];\n      if (formik.values[index]?.versions?.length && formik.values[index].versions[0] !== 'any') {\n        versions = formik.values[index]?.versions;\n      } else {\n        const newVersion = distVersions.find(\n          ({ name, label }) => url.includes(name) || url.includes(label),\n        )?.label;\n        if (newVersion) versions = [newVersion];\n      }\n      updateVariable(index, { arch, versions });\n    }\n  };\n\n  const urlOnBlur = (index: number) => {\n    updateTouched(index, 'url');\n    updateArchAndVersion(index);\n  };\n\n  const magicButtonThatWillBeDeletedAtSomePoint = () => {\n    const baseArray = Array.from(Array(20).keys());\n    formik.setTouched(baseArray.map(() => ({ name: true, url: true })));\n    const newValues = baseArray.map((index) => ({\n      name: (Math.random() + 1).toString(36).substring(7),\n      url: magicURLList[index],\n      gpgKey: '',\n      arch: !(index % 3) ? 'x86_64' : 'any',\n      versions: !(index % 2) ? ['7'] : ['any'],\n      gpgLoading: false,\n      expanded: false,\n      metadataVerification: false,\n    }));\n    formik.setValues(newValues);\n  };\n\n  const setVersionSelected = (value: string[], index: number) => {\n    let valueToUpdate = value.map((val) => distributionVersions[val]);\n    if (value.length === 0 || valueToUpdate[value.length - 1] === 'any') {\n      valueToUpdate = ['any'];\n    }\n    if (valueToUpdate.length > 1 && valueToUpdate.includes('any')) {\n      valueToUpdate = valueToUpdate.filter((val) => val !== 'any');\n    }\n\n    updateVariable(index, {\n      versions: valueToUpdate,\n    });\n  };\n\n  return (\n    <>\n      <Button\n        id='createContentSourceButton'\n        ouiaId='create_content_source'\n        variant='primary'\n        isDisabled={isLoading}\n        onClick={handleModalToggle}\n      >\n        Add repositories\n      </Button>\n      {isModalOpen ? (\n        <Modal\n          variant={ModalVariant.medium}\n          title='Add custom repositories'\n          ouiaId='add_custom_repository'\n          help={\n            <Popover\n              headerContent={<div>Help Popover</div>}\n              bodyContent={\n                <div>\n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam id feugiat augue,\n                  nec fringilla turpis.\n                </div>\n              }\n              footerContent='Popover Footer'\n            >\n              <Button variant='plain' aria-label='Help'>\n                <OutlinedQuestionCircleIcon />\n              </Button>\n            </Popover>\n          }\n          description={\n            <p className={classes.description}>\n              Add by completing the form. Default values may be provided automatically.\n            </p>\n          }\n          isOpen\n          onClose={closeModal}\n          footer={\n            <Stack>\n              <StackItem>\n                <Button\n                  isDisabled={!formik.isValid || formik.values.length > 19}\n                  className={classes.addRepositoryButton}\n                  variant='link'\n                  onClick={addRepository}\n                  icon={<PlusCircleIcon />}\n                  ouiaId='add_row'\n                >\n                  Add another repository\n                </Button>\n              </StackItem>\n              <StackItem>\n                <Button\n                  className={classes.saveButton}\n                  key='confirm'\n                  ouiaId='modal_save'\n                  variant='primary'\n                  isLoading={isAdding}\n                  isDisabled={\n                    !formik.isValid || isAdding || formik.values?.length !== debouncedValues?.length\n                  }\n                  onClick={() => addContent().then(closeModal)}\n                >\n                  Save\n                </Button>\n                <Button key='cancel' variant='link' onClick={closeModal} ouiaId='modal_cancel'>\n                  Cancel\n                </Button>\n                <Button\n                  key='magic'\n                  variant='link'\n                  isDisabled={formik.values.length > 19}\n                  color='green'\n                  onClick={magicButtonThatWillBeDeletedAtSomePoint}\n                >\n                  Add 20\n                </Button>\n              </StackItem>\n            </Stack>\n          }\n        >\n          <TableComposable ouiaId='modal_table_expandable' aria-label='Expandable table'>\n            <Hide hide={createDataLengthOf1}>\n              <Tbody isExpanded={allExpanded}>\n                <Tr onClick={expandAllToggle} className={classes.toggleAllRow}>\n                  <Td\n                    className={classes.toggleAction}\n                    isActionCell\n                    expand={{\n                      rowIndex: 0,\n                      isExpanded: allExpanded,\n                    }}\n                  />\n                  <Td dataLabel='expand-collapse'>{allExpanded ? 'Collapse all' : 'Expand all'}</Td>\n                </Tr>\n              </Tbody>\n            </Hide>\n            {formik.values.map(\n              (\n                { expanded, name, url, arch, gpgKey, versions, gpgLoading, metadataVerification },\n                index,\n              ) => (\n                <Tbody key={index} isExpanded={createDataLengthOf1 ? undefined : expanded}>\n                  <Hide hide={createDataLengthOf1}>\n                    <Tr className={classes.colHeader}>\n                      <Td\n                        onClick={() => onToggle(index)}\n                        className={classes.toggleAction}\n                        isActionCell\n                        expand={{\n                          rowIndex: index,\n                          isExpanded: expanded,\n                        }}\n                      />\n                      <Td width={35} onClick={() => onToggle(index)} dataLabel={name}>\n                        {name || 'New content'}\n                      </Td>\n                      <Td onClick={() => onToggle(index)} dataLabel='validity'>\n                        <ContentValidity\n                          touched={formik.touched[index]}\n                          errors={formik.errors[index]}\n                        />\n                      </Td>\n                      <Td dataLabel='removeButton' className={classes.removeButton}>\n                        <Hide hide={formik.values.length === 1}>\n                          <Button\n                            onClick={() => removeRepository(index)}\n                            variant='link'\n                            icon={<MinusCircleIcon />}\n                          >\n                            Remove\n                          </Button>\n                        </Hide>\n                      </Td>\n                    </Tr>\n                  </Hide>\n                  <Tr isExpanded={createDataLengthOf1 ? undefined : expanded}>\n                    <Td colSpan={4} className={createDataLengthOf1 ? '' : classes.mainContentCol}>\n                      <Form>\n                        <FormGroup\n                          label='Name'\n                          isRequired\n                          fieldId='namegroup'\n                          validated={getFieldValidation(index, 'name')}\n                          helperTextInvalid={formik.errors[index]?.name}\n                        >\n                          <TextInput\n                            isRequired\n                            id='name'\n                            name='name'\n                            label='Name'\n                            type='text'\n                            validated={getFieldValidation(index, 'name')}\n                            onBlur={() => updateTouched(index, 'name')}\n                            onChange={(value) => {\n                              updateVariable(index, { name: value });\n                            }}\n                            value={name || ''}\n                            placeholder='Enter name'\n                          />\n                        </FormGroup>\n                        <FormGroup\n                          label='URL'\n                          isRequired\n                          fieldId='url'\n                          validated={getFieldValidation(index, 'url')}\n                          helperTextInvalid={formik.errors[index]?.url}\n                        >\n                          <TextInput\n                            isRequired\n                            type='url'\n                            validated={getFieldValidation(index, 'url')}\n                            onBlur={() => urlOnBlur(index)}\n                            onChange={(value) => {\n                              if (url !== value) {\n                                updateVariable(index, { url: value });\n                              }\n                            }}\n                            value={url || ''}\n                            placeholder='https://'\n                            id='url'\n                            name='url'\n                            label='Url'\n                          />\n                        </FormGroup>\n                        <FormGroup\n                          label='Restrict architecture'\n                          labelIcon={\n                            <Tooltip content='Something super important and stuff'>\n                              <OutlinedQuestionCircleIcon\n                                className='pf-u-ml-xs'\n                                color={global_Color_200.value}\n                              />\n                            </Tooltip>\n                          }\n                          fieldId='arch'\n                        >\n                          <DropdownSelect\n                            menuAppendTo={document.body}\n                            toggleId={'archSelection' + index}\n                            options={Object.keys(distributionArches)}\n                            variant={SelectVariant.single}\n                            selectedProp={Object.keys(distributionArches).find(\n                              (key: string) => arch === distributionArches[key],\n                            )}\n                            setSelected={(value) =>\n                              updateVariable(index, { arch: distributionArches[value] })\n                            }\n                          />\n                        </FormGroup>\n                        <FormGroup\n                          label='Restrict OS version'\n                          labelIcon={\n                            <Tooltip content='Something super important and stuff'>\n                              <OutlinedQuestionCircleIcon\n                                className='pf-u-ml-xs'\n                                color={global_Color_200.value}\n                              />\n                            </Tooltip>\n                          }\n                          fieldId='version'\n                        >\n                          <DropdownSelect\n                            menuAppendTo={document.body}\n                            toggleId={'versionSelection' + index}\n                            options={Object.keys(distributionVersions)}\n                            variant={SelectVariant.typeaheadMulti}\n                            selectedProp={Object.keys(distributionVersions).filter((key: string) =>\n                              versions?.includes(distributionVersions[key]),\n                            )}\n                            placeholderText={versions?.length ? '' : 'Any version'}\n                            setSelected={(value) => setVersionSelected(value, index)}\n                          />\n                        </FormGroup>\n                        <FormGroup\n                          label='GPG key'\n                          labelIcon={\n                            <Tooltip content='Something super important and stuff'>\n                              <OutlinedQuestionCircleIcon\n                                className='pf-u-ml-xs'\n                                color={global_Color_200.value}\n                              />\n                            </Tooltip>\n                          }\n                          fieldId='gpgKey'\n                          validated={getFieldValidation(index, 'gpgKey')}\n                          helperTextInvalid={formik.errors[index]?.gpgKey}\n                        >\n                          <FileUpload\n                            onBlur={() => updateTouched(index, 'gpgKey')}\n                            validated={getFieldValidation(index, 'gpgKey')}\n                            id='gpgKey-uploader'\n                            type='text'\n                            filenamePlaceholder='Drag a file here or upload one'\n                            textAreaPlaceholder='Paste GPG key or URL here'\n                            value={gpgKey}\n                            isLoading={gpgLoading}\n                            // filename={filename}\n                            // onFileInputChange={(e, { name }) => console.log(name)}\n                            onDataChange={(value) => updateVariable(index, { gpgKey: value })}\n                            onTextChange={(value) => {\n                              if (isValidURL(value)) {\n                                updateVariable(index, { gpgLoading: true });\n                                // TODO: add call to GPGkey api\n                                return setTimeout(\n                                  () => updateVariable(index, { gpgLoading: false }),\n                                  1500,\n                                );\n                              }\n\n                              updateVariable(index, {\n                                gpgKey: value,\n                                ...(gpgKey === '' && !!value\n                                  ? {\n                                      metadataVerification:\n                                        !!validationList?.[index]?.url?.metadata_signature_present,\n                                    }\n                                  : {}),\n                              });\n                            }}\n                            onClearClick={() => updateVariable(index, { gpgKey: '' })}\n                            dropzoneProps={{\n                              accept: '.txt',\n                              maxSize: 4096,\n                              onDropRejected: (e) => console.log('onDropRejected', e),\n                            }}\n                            allowEditingUploadedText\n                            browseButtonText='Upload'\n                          />\n                        </FormGroup>\n                        <Hide hide={!gpgKey}>\n                          <FormGroup\n                            fieldId='metadataVerification'\n                            label='Use GPG key for'\n                            isInline\n                          >\n                            <Radio\n                              isDisabled={\n                                validationList?.[index]?.url?.metadata_signature_present !== true\n                              }\n                              id='package-verification-only'\n                              name='package-verification-only'\n                              label='Package verification only'\n                              isChecked={!metadataVerification}\n                              onChange={() =>\n                                updateVariable(index, { metadataVerification: false })\n                              }\n                            />\n                            <OptionalTooltip\n                              show={\n                                validationList?.[index]?.url?.metadata_signature_present !== true\n                              }\n                              content=\"This repository's metadata is not signed, metadata verification is not possible.\"\n                            >\n                              <Radio\n                                isDisabled={\n                                  validationList?.[index]?.url?.metadata_signature_present !== true\n                                }\n                                id='package-and-repository-verification'\n                                name='package-and-repository-verification'\n                                label='Package and metadata verification'\n                                isChecked={metadataVerification}\n                                onChange={() =>\n                                  updateVariable(index, { metadataVerification: true })\n                                }\n                              />\n                            </OptionalTooltip>\n                          </FormGroup>\n                        </Hide>\n                      </Form>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ),\n            )}\n          </TableComposable>\n        </Modal>\n      ) : (\n        ''\n      )}\n    </>\n  );\n};\n\nexport default AddContent;\n","import { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport { FormikErrors, FormikTouched } from 'formik';\nimport { global_success_color_100, global_danger_color_100 } from '@patternfly/react-tokens';\nimport { CheckCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { createUseStyles } from 'react-jss';\n\nconst red = global_danger_color_100.value;\nconst green = global_success_color_100.value;\n\nconst useStyles = createUseStyles({\n  red: { color: red, fontWeight: 'bold', fontSize: '14px' },\n  green: { color: green, fontWeight: 'bold', fontSize: '14px' },\n});\n\ninterface Props {\n  touched?: FormikTouched<{\n    name: string;\n    url: string;\n    gpgKey: string;\n    gpgLoading: boolean;\n    expanded: boolean;\n  }>;\n  errors?: FormikErrors<{\n    name: string;\n    url: string;\n    gpgKey: string;\n    gpgLoading: boolean;\n    expanded: boolean;\n  }>;\n  loading?: boolean;\n}\n\nconst ContentValidity = ({ touched, errors, loading }: Props) => {\n  const classes = useStyles();\n  const required = ['name', 'url'];\n  const allTouched = required.every((val) => touched?.[val]);\n  const noErrors = Object.values(errors || {}).every((val) => !val);\n  const hasTouchedError = Object.keys(touched || {})\n    .filter((key) => !!touched?.[key])\n    .some((key) => errors?.[key]);\n\n  switch (true) {\n    case loading:\n      return <Spinner size='md' />;\n    case allTouched && noErrors:\n      return (\n        <Flex alignContent={{ default: 'alignContentCenter' }} direction={{ default: 'row' }}>\n          <FlexItem spacer={{ default: 'spacerSm' }}>\n            <CheckCircleIcon color={green} />\n          </FlexItem>\n          <FlexItem>\n            <span className={classes.green}>Valid</span>\n          </FlexItem>\n        </Flex>\n      );\n    case hasTouchedError:\n      return (\n        <Flex alignContent={{ default: 'alignContentCenter' }} direction={{ default: 'row' }}>\n          <FlexItem spacer={{ default: 'spacerSm' }}>\n            <ExclamationCircleIcon color={red} />\n          </FlexItem>\n          <FlexItem>\n            <span className={classes.red}>Invalid</span>\n          </FlexItem>\n        </Flex>\n      );\n    default:\n      return <></>;\n  }\n};\n\nexport default ContentValidity;\n","import { isEmpty } from 'lodash';\nimport * as Yup from 'yup';\nimport { FormikErrors } from 'formik';\nimport { ValidationResponse } from '../../services/Content/ContentApi';\nimport ERROR_CODE from './httpErrorCodes.json';\n\nexport interface FormikValues {\n  name: string;\n  url: string;\n  gpgKey: string;\n  arch: string;\n  versions: string[];\n  gpgLoading: boolean;\n  metadataVerification: boolean;\n  expanded: boolean;\n}\n\nexport const REGEX_URL =\n  /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\n\nexport const isValidURL = (val: string) => {\n  const regex = new RegExp(REGEX_URL);\n  return val.match(regex);\n};\n\nexport const mapFormikToAPIValues = (formikValues: FormikValues[]) =>\n  formikValues.map(({ name, url, arch, versions, gpgKey, metadataVerification }) => ({\n    name,\n    url,\n    distribution_arch: arch,\n    distribution_versions: versions,\n    gpg_key: gpgKey,\n    metadata_verification: metadataVerification,\n  }));\n\nconst mapNoMetaDataError = (validationData: ValidationResponse) =>\n  validationData.map(({ url, ...rest }) => ({\n    ...rest,\n    url: {\n      ...url,\n      error:\n        !url?.error && !url?.metadata_present\n          ? `Unable to retrieve YUM Metadata, Recieved HTTP ${url?.http_code}: ${\n              url ? ERROR_CODE[url.http_code] : ''\n            }`\n          : url?.error,\n    },\n  }));\n\nexport const mapValidationData = (\n  validationData: ValidationResponse,\n  formikErrors: FormikErrors<FormikValues | undefined>[],\n) => {\n  const updatedValidationData = mapNoMetaDataError(validationData);\n  const errors = updatedValidationData.map(({ name, url, gpg_key: gpgKey }, index: number) => ({\n    // First apply the errors found in the ValidationAPI\n    ...(name?.error ? { name: name?.error } : {}),\n    ...(url?.error ? { url: url?.error } : {}),\n    ...(gpgKey?.error ? { gpgKey: gpgKey?.error } : {}),\n    // Overwrite any errors with errors found within the UI itself\n    ...formikErrors[index],\n  }));\n\n  if (errors.every((err) => isEmpty(err))) {\n    return [];\n  }\n\n  return errors;\n};\n\nexport const makeValidationSchema = () => {\n  // This adds the uniqueProperty function to the below schema validation\n  Yup.addMethod(Yup.object, 'uniqueProperty', function (propertyName, message) {\n    return this.test('unique', message, function (value) {\n      if (!value || !value[propertyName]) {\n        return true;\n      }\n      if (\n        this.parent.filter((v) => v !== value).some((v) => v[propertyName] === value[propertyName])\n      ) {\n        throw this.createError({\n          path: `${this.path}.${propertyName}`,\n        });\n      }\n\n      return true;\n    });\n  });\n\n  return Yup.array(\n    Yup.object()\n      .shape({\n        name: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Required'),\n        url: Yup.string().url('Invalid URL').required('Required'),\n      })\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore-next-line\n      .uniqueProperty('name', 'Names must be unique')\n      .uniqueProperty('url', 'Url\\'s must be unique'),\n  );\n};\n\nexport const magicURLList = [\n  'http://mirror.stream.centos.org/9-stream/BaseOS/x86_64/os/',\n  'http://mirror.stream.centos.org/SIGs/9/kmods/x86_64/packages-main/',\n  'http://mirror.stream.centos.org/9-stream/AppStream/x86_64/os/',\n  'https://mirror.linux.duke.edu/pub/centos/8-stream/BaseOS/x86_64/os/',\n  'https://download-i2.fedoraproject.org/pub/epel/7/x86_64/',\n  'https://download-i2.fedoraproject.org/pub/epel/8/Everything/x86_64/',\n  'https://download-i2.fedoraproject.org/pub/epel/9/Everything/x86_64/',\n  'http://yum.theforeman.org/pulpcore/3.18/el7/x86_64/',\n  'http://yum.theforeman.org/pulpcore/3.18/el8/x86_64/',\n  'http://yum.theforeman.org/pulpcore/3.18/el9/x86_64/',\n  'http://yum.theforeman.org/katello/4.6/katello/el8/x86_64/',\n  'http://yum.theforeman.org/client/3.4/el7/x86_64/',\n  'http://yum.theforeman.org/client/3.4/el8/x86_64/',\n  'http://yum.theforeman.org/client/3.4/el9/x86_64/',\n  'http://yum.theforeman.org/releases/3.4/el8/x86_64/',\n  'https://dl.google.com/linux/chrome/rpm/stable/x86_64/',\n  'http://yum.theforeman.org/client/3.3/el7/x86_64/',\n  'http://yum.theforeman.org/client/3.3/el8/x86_64/',\n  'http://yum.theforeman.org/client/3.3/el9/x86_64/',\n  'http://yum.theforeman.org/client/3.2/el7/x86_64/',\n  'http://yum.theforeman.org/client/3.2/el8/x86_64/',\n  'https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/',\n  'https://developer.download.nvidia.com/compute/cuda/repos/rhel8/x86_64/',\n  'https://developer.download.nvidia.com/compute/cuda/repos/rhel9/x86_64/',\n  'http://download1.rpmfusion.org/nonfree/el/updates/7/x86_64/',\n  'http://download1.rpmfusion.org/nonfree/el/updates/8/x86_64/',\n  'http://download1.rpmfusion.org/nonfree/el/updates/9/x86_64/',\n  'http://download1.rpmfusion.org/free/el/updates/7/x86_64/',\n  'http://download1.rpmfusion.org/free/el/updates/8/x86_64/',\n  'http://download1.rpmfusion.org/free/el/updates/9/x86_64/',\n  'https://rpms.remirepo.net/enterprise/7/safe/x86_64/',\n  'https://rpms.remirepo.net/enterprise/8/safe/x86_64/',\n  'https://rpms.remirepo.net/enterprise/9/safe/x86_64/',\n  'https://rpms.remirepo.net/enterprise/7/remi/x86_64/',\n  'https://rpms.remirepo.net/enterprise/8/remi/x86_64/',\n  'http://yum.theforeman.org/pulpcore/3.9/el7/x86_64/',\n  'http://yum.theforeman.org/katello/nightly/katello/el8/x86_64/',\n];\n","import { ReactElement, useEffect, useState } from 'react';\nimport {\n  Button,\n  Chip,\n  ChipGroup,\n  Flex,\n  FlexItem,\n  InputGroup,\n  SelectVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport DropdownSelect from '../DropdownSelect/DropdownSelect';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\nimport { global_BackgroundColor_100, global_secondary_color_100 } from '@patternfly/react-tokens';\nimport Hide from '../Hide/Hide';\nimport { FilterData, RepositoryParamsResponse } from '../../services/Content/ContentApi';\nimport { useQueryClient } from 'react-query';\nimport { REPOSITORY_PARAMS_KEY } from '../../services/Content/ContentQueries';\nimport useDebounce from '../../services/useDebounce';\nimport AddContent from '../AddContent/AddContent';\nimport { createUseStyles } from 'react-jss';\nimport { isEmpty } from 'lodash';\n\ninterface Props {\n  isLoading?: boolean;\n  setFilterData: (filterData: FilterData) => void;\n  filterData: FilterData;\n}\n\nconst useStyles = createUseStyles({\n  chipsContainer: {\n    backgroundColor: global_BackgroundColor_100.value,\n    paddingTop: '16px',\n  },\n  clearFilters: {\n    marginLeft: '16px',\n  },\n  searchInput: {\n    paddingRight: '35px',\n    marginRight: '-23px',\n  },\n  searchIcon: {\n    color: global_secondary_color_100.value,\n    position: 'relative',\n    top: '3px',\n    left: '-5px',\n    pointerEvents: 'none',\n  },\n});\n\nexport type Filters = 'Name/URL' | 'Version' | 'Architecture';\n\nconst ContentListFilters = ({ isLoading, setFilterData, filterData }: Props) => {\n  const classes = useStyles();\n  const queryClient = useQueryClient();\n  const filters = ['Name/URL', 'Version', 'Architecture'];\n  const [filterType, setFilterType] = useState<Filters>('Name/URL');\n  const [versionNamesLabels, setVersionNamesLabels] = useState({});\n  const [archNamesLabels, setArchNamesLabels] = useState({});\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedVersions, setSelectedVersions] = useState<string[]>([]);\n  const [selectedArches, setSelectedArches] = useState<string[]>([]);\n\n  const { distribution_arches = [], distribution_versions = [] } =\n    queryClient.getQueryData<RepositoryParamsResponse>(REPOSITORY_PARAMS_KEY) || {};\n\n  const clearFilters = () => {\n    setSearchQuery('');\n    setSelectedVersions([]);\n    setSelectedArches([]);\n    setFilterData({ searchQuery: '', versions: [], arches: [] });\n  };\n\n  useEffect(() => {\n    // If the filters get cleared at the top level, sense that and clear them here.\n    if (\n      filterData.arches.length === 0 &&\n      filterData.versions.length === 0 &&\n      filterData.searchQuery === '' &&\n      (searchQuery !== '' || selectedArches.length !== 0 || selectedVersions.length !== 0)\n    ) {\n      clearFilters();\n    }\n  }, [filterData]);\n\n  const {\n    searchQuery: debouncedSearchQuery,\n    selectedVersions: debouncedSelectedVersions,\n    selectedArches: debouncedSelectedArches,\n  } = useDebounce({\n    searchQuery,\n    selectedVersions,\n    selectedArches,\n  });\n\n  const getLabels = (type: string, names: Array<string>) => {\n    const namesLabels = type === 'arch' ? distribution_arches : distribution_versions;\n    const labels: Array<string> = [];\n    names.forEach((name) => {\n      const found = namesLabels.find((v) => v.name === name);\n      if (found) {\n        labels.push(found.label);\n      }\n    });\n    return labels;\n  };\n\n  useEffect(() => {\n    setFilterData({\n      searchQuery: debouncedSearchQuery,\n      versions: getLabels('version', debouncedSelectedVersions),\n      arches: getLabels('arch', debouncedSelectedArches),\n    });\n  }, [debouncedSearchQuery, debouncedSelectedVersions, debouncedSelectedArches]);\n\n  const deleteItem = (id: string, chips, setChips) => {\n    const copyOfChips = [...chips];\n    const filteredCopy = copyOfChips.filter((chip) => chip !== id);\n    setChips(filteredCopy);\n  };\n\n  useEffect(() => {\n    if (\n      isEmpty(versionNamesLabels) &&\n      isEmpty(archNamesLabels) &&\n      distribution_arches.length !== 0 &&\n      distribution_versions.length !== 0\n    ) {\n      const arches = {};\n      const versions = {};\n      distribution_arches.forEach((arch) => (arches[arch.name] = arch.label));\n      distribution_versions.forEach((version) => (versions[version.name] = version.label));\n      setVersionNamesLabels(versions);\n      setArchNamesLabels(arches);\n    }\n  }, [distribution_arches, distribution_versions]);\n\n  const getSelectionByType = (): ReactElement => {\n    switch (filterType) {\n      case 'Name/URL':\n        return (\n          <Flex>\n            <TextInput\n              isDisabled={isLoading}\n              id='search'\n              ouiaId='filter_search'\n              placeholder='Filter by name/url'\n              value={searchQuery}\n              onChange={(value) => setSearchQuery(value)}\n              className={classes.searchInput}\n            />\n            <SearchIcon size='sm' className={classes.searchIcon} />\n          </Flex>\n        );\n      case 'Version':\n        return (\n          <DropdownSelect\n            toggleId='versionSelect'\n            ouiaId='filter_version'\n            isDisabled={isLoading}\n            options={Object.keys(versionNamesLabels)}\n            variant={SelectVariant.checkbox}\n            selectedProp={selectedVersions}\n            setSelected={setSelectedVersions}\n            placeholderText='Filter by version'\n          />\n        );\n      case 'Architecture':\n        return (\n          <DropdownSelect\n            toggleId='archSelect'\n            ouiaId='filter_arch'\n            isDisabled={isLoading}\n            options={Object.keys(archNamesLabels)}\n            variant={SelectVariant.checkbox}\n            selectedProp={selectedArches}\n            setSelected={setSelectedArches}\n            placeholderText='Filter by architecture'\n          />\n        );\n      default:\n        return <></>;\n    }\n  };\n\n  return (\n    <Flex>\n      <FlexItem>\n        <InputGroup>\n          <FlexItem>\n            <DropdownSelect\n              toggleId='filterSelectionDropdown'\n              ouiaId='filter_type'\n              isDisabled={isLoading}\n              options={filters}\n              variant={SelectVariant.single}\n              selectedProp={filterType}\n              setSelected={setFilterType}\n              placeholderText='filter'\n              toggleIcon={<FilterIcon />}\n            />\n          </FlexItem>\n          <FlexItem>{getSelectionByType()}</FlexItem>\n        </InputGroup>\n      </FlexItem>\n      <FlexItem>\n        <AddContent isLoading={isLoading} />\n      </FlexItem>\n      <Hide hide={!(selectedVersions.length || selectedArches.length || searchQuery != '')}>\n        <FlexItem fullWidth={{ default: 'fullWidth' }} className={classes.chipsContainer}>\n          <ChipGroup categoryName='Version'>\n            {selectedVersions.map((version) => (\n              <Chip\n                key={version}\n                onClick={() => deleteItem(version, selectedVersions, setSelectedVersions)}\n              >\n                {version}\n              </Chip>\n            ))}\n          </ChipGroup>\n          <ChipGroup categoryName='Architecture'>\n            {selectedArches.map((arch) => (\n              <Chip key={arch} onClick={() => deleteItem(arch, selectedArches, setSelectedArches)}>\n                {arch}\n              </Chip>\n            ))}\n          </ChipGroup>\n          {searchQuery !== '' && (\n            <ChipGroup categoryName='Name/URL'>\n              <Chip key='search_chip' onClick={() => setSearchQuery('')}>\n                {searchQuery}\n              </Chip>\n            </ChipGroup>\n          )}\n          {((debouncedSearchQuery !== '' && searchQuery !== '') ||\n            !!selectedVersions?.length ||\n            !!selectedArches?.length) && (\n            <Button className={classes.clearFilters} onClick={clearFilters} variant='link' isInline>\n              Clear filters\n            </Button>\n          )}\n        </FlexItem>\n      </Hide>\n    </Flex>\n  );\n};\n\nexport default ContentListFilters;\n","import {\n  Bullseye,\n  Flex,\n  FlexItem,\n  Grid,\n  OnPerPageSelect,\n  OnSetPage,\n  Pagination,\n  PaginationVariant,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  ActionsColumn,\n  IAction,\n  TableComposable,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  ThProps,\n  Tr,\n} from '@patternfly/react-table';\nimport { global_BackgroundColor_100 } from '@patternfly/react-tokens';\nimport { useCallback, useState } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { ContentItem, FilterData } from '../../services/Content/ContentApi';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components';\n\nimport {\n  useContentListQuery,\n  useDeleteContentItemMutate,\n  useRepositoryParams,\n} from '../../services/Content/ContentQueries';\nimport ContentListFilters from './ContentListFilters';\nimport Hide from '../Hide/Hide';\nimport EmptyTableState from './components/EmptyTableState';\nimport { useQueryClient } from 'react-query';\nimport EditContentModal from '../EditContentModal/EditContentModal';\nimport StatusIcon from './components/StatusIcon';\nimport UrlWithExternalIcon from '../UrlWithLinkIcon/UrlWithLinkIcon';\nimport PackageCount from './components/PackageCount';\n\nconst useStyles = createUseStyles({\n  mainContainer: {\n    backgroundColor: global_BackgroundColor_100.value,\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  mainContainer100Height: {\n    composes: ['$mainContainer'], // This extends another class within this stylesheet\n    minHeight: '100%',\n  },\n  topContainer: {\n    justifyContent: 'space-between',\n    padding: '16px 24px', // This is needed\n    height: 'fit-content',\n  },\n  bottomContainer: {\n    justifyContent: 'space-between',\n    height: 'fit-content',\n  },\n  invisible: {\n    opacity: 0,\n  },\n});\n\nconst ContentListTable = () => {\n  const classes = useStyles();\n  const queryClient = useQueryClient();\n  const storedPerPage = Number(localStorage.getItem('perPage')) || 20;\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(storedPerPage);\n  const [editModalOpen, setEditModalOpen] = useState(false);\n  const [editValues, setEditValues] = useState<ContentItem[]>([]);\n  const [activeSortIndex, setActiveSortIndex] = useState<number>(0);\n  const [activeSortDirection, setActiveSortDirection] = useState<'asc' | 'desc'>('asc');\n\n  const [filterData, setFilterData] = useState<FilterData>({\n    searchQuery: '',\n    versions: [],\n    arches: [],\n  });\n\n  const clearFilters = () => setFilterData({ searchQuery: '', versions: [], arches: [] });\n\n  const notFiltered =\n    !filterData.arches?.length && filterData.searchQuery === '' && !filterData.versions?.length;\n\n  const hasActionPermissions = true; // TODO: Incorporate permissions here later.\n\n  const {\n    isLoading: repositoryParamsLoading,\n    error: repositoryParamsError,\n    isError: repositoryParamsIsError,\n    data: { distribution_versions: distVersions, distribution_arches: distArches } = {\n      distribution_versions: [],\n      distribution_arches: [],\n    },\n  } = useRepositoryParams();\n\n  const columnSortAttributes = [\n    'name',\n    'distribution_arch',\n    'distribution_versions',\n    'status',\n    'package_count',\n  ];\n\n  const sortString = (): string =>\n    columnSortAttributes[activeSortIndex] + ':' + activeSortDirection;\n\n  const {\n    isLoading,\n    error,\n    isError,\n    isFetching,\n    data = { data: [], meta: { count: 0, limit: 20, offset: 0 } },\n  } = useContentListQuery(page, perPage, filterData, sortString());\n\n  const { mutateAsync: deleteItem, isLoading: isDeleting } = useDeleteContentItemMutate(\n    queryClient,\n    page,\n    perPage,\n    filterData,\n    sortString(),\n  );\n\n  // Other update actions will be added to this later.\n  const actionTakingPlace = isDeleting || isFetching || repositoryParamsLoading;\n\n  const onSetPage: OnSetPage = (_, newPage) => setPage(newPage);\n\n  const onPerPageSelect: OnPerPageSelect = (_, newPerPage, newPage) => {\n    // Save this value through page refresh for use on next reload\n    localStorage.setItem('perPage', newPerPage.toString());\n    setPerPage(newPerPage);\n    setPage(newPage);\n  };\n\n  const sortParams = (columnIndex: number): ThProps['sort'] => ({\n    sortBy: {\n      index: activeSortIndex,\n      direction: activeSortDirection,\n      defaultDirection: 'asc', // starting sort direction when first sorting a column. Defaults to 'asc'\n    },\n    onSort: (_event, index, direction) => {\n      setActiveSortIndex(index);\n      setActiveSortDirection(direction);\n    },\n    columnIndex,\n  });\n  const columnHeaders = ['Name', 'Architecture', 'Versions', 'Packages', 'Status'];\n\n  const archesDisplay = (arch: string) => distArches.find(({ label }) => arch === label)?.name;\n\n  const versionDisplay = (versions: Array<string>): string =>\n    distVersions\n      .filter(({ label }) => versions?.includes(label))\n      .map(({ name }) => name)\n      .join(', ');\n\n  // Error is caught in the wrapper component\n  if (isError) throw error;\n  if (repositoryParamsIsError) throw repositoryParamsError;\n\n  const {\n    data: contentList = [],\n    meta: { count = 0 },\n  } = data;\n\n  const rowActions = useCallback(\n    (rowData: ContentItem): IAction[] => [\n      {\n        isDisabled: actionTakingPlace || !rowData?.uuid,\n        title: 'Delete',\n        onClick: () =>\n          deleteItem(rowData?.uuid).then(() => {\n            // If this is the last item on a page, go to previous page.\n            if (page > 1 && count / perPage + 1 >= page && (count - 1) % perPage === 0) {\n              setPage(page - 1);\n            }\n          }),\n      },\n      {\n        isDisabled: actionTakingPlace,\n        title: 'Edit',\n        onClick: () => {\n          setEditValues([rowData]);\n          setEditModalOpen(true);\n        },\n      },\n    ],\n    [actionTakingPlace],\n  );\n\n  const countIsZero = count === 0;\n\n  if (countIsZero && notFiltered && !isLoading)\n    return (\n      <Bullseye>\n        <EmptyTableState notFiltered={notFiltered} clearFilters={clearFilters} />\n      </Bullseye>\n    );\n\n  return (\n    <Grid className={countIsZero ? classes.mainContainer100Height : classes.mainContainer}>\n      <EditContentModal\n        values={editValues}\n        open={editModalOpen}\n        setClosed={() => {\n          setEditModalOpen(false);\n          setEditValues([]);\n        }}\n      />\n      <Flex className={classes.topContainer}>\n        <ContentListFilters\n          isLoading={isLoading}\n          setFilterData={(values) => {\n            setFilterData(values);\n            setPage(1);\n          }}\n          filterData={filterData}\n        />\n        <FlexItem>\n          <Hide hide={countIsZero}>\n            <Pagination\n              id='top-pagination-id'\n              widgetId='topPaginationWidgetId'\n              perPageComponent='button'\n              isDisabled={isLoading}\n              itemCount={count}\n              perPage={perPage}\n              page={page}\n              onSetPage={onSetPage}\n              isCompact\n              onPerPageSelect={onPerPageSelect}\n            />\n          </Hide>\n        </FlexItem>\n      </Flex>\n      <Hide hide={!isLoading}>\n        <Grid className={classes.mainContainer100Height}>\n          <SkeletonTable\n            rowSize={perPage}\n            colSize={columnHeaders.length}\n            variant={TableVariant.compact}\n          />\n        </Grid>\n      </Hide>\n      <Hide hide={countIsZero || isLoading}>\n        <>\n          <TableComposable\n            aria-label='Custom repositories table'\n            ouiaId='content_sources_table'\n            variant='compact'\n          >\n            <Thead>\n              <Tr>\n                {columnHeaders.map((columnHeader, index) => (\n                  <Th key={columnHeader + 'column'} sort={sortParams(index)}>\n                    {columnHeader}\n                  </Th>\n                ))}\n                <Th>\n                  <Spinner size='md' className={actionTakingPlace ? '' : classes.invisible} />\n                </Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {contentList.map((rowData: ContentItem) => {\n                const {\n                  uuid,\n                  name,\n                  url,\n                  distribution_arch,\n                  package_count,\n                  distribution_versions,\n                  status,\n                  last_introspection_error,\n                } = rowData;\n                return (\n                  <Tr key={uuid}>\n                    <Td>\n                      {name}\n                      <br />\n                      <UrlWithExternalIcon href={url} />\n                    </Td>\n                    <Td>{archesDisplay(distribution_arch)}</Td>\n                    <Td>{versionDisplay(distribution_versions)}</Td>\n                    <Td>\n                      <PackageCount count={package_count} status={status} />\n                    </Td>\n                    <Td>\n                      <StatusIcon status={status} error={last_introspection_error} />\n                    </Td>\n                    <Td isActionCell>\n                      {hasActionPermissions ? <ActionsColumn items={rowActions(rowData)} /> : ''}\n                    </Td>\n                  </Tr>\n                );\n              })}\n            </Tbody>\n          </TableComposable>\n          <Flex className={classes.bottomContainer}>\n            <FlexItem />\n            <FlexItem>\n              <Pagination\n                id='bottom-pagination-id'\n                widgetId='bottomPaginationWidgetId'\n                perPageComponent='button'\n                itemCount={count}\n                perPage={perPage}\n                page={page}\n                onSetPage={onSetPage}\n                variant={PaginationVariant.bottom}\n                onPerPageSelect={onPerPageSelect}\n              />\n            </FlexItem>\n          </Flex>\n        </>\n      </Hide>\n      <Hide hide={!countIsZero || isLoading}>\n        <EmptyTableState notFiltered={notFiltered} clearFilters={clearFilters} />\n      </Hide>\n    </Grid>\n  );\n};\n\nexport default ContentListTable;\n","import {\n  EmptyStateBody,\n  EmptyState,\n  EmptyStateVariant,\n  Title,\n  EmptyStateIcon,\n  Button,\n} from '@patternfly/react-core';\nimport { SearchIcon, PlusCircleIcon } from '@patternfly/react-icons/dist/js/icons';\nimport { createUseStyles } from 'react-jss';\nimport AddContent from '../../AddContent/AddContent';\n\nconst useStyles = createUseStyles({\n  emptyStateContainer: {\n    display: 'flex',\n    flexGrow: 1,\n  },\n});\n\ninterface Props {\n  notFiltered?: boolean;\n  clearFilters: () => void;\n}\n\nconst EmptyTableState = ({ notFiltered, clearFilters }: Props) => {\n  const classes = useStyles();\n  return (\n    <EmptyState variant={EmptyStateVariant.full} className={classes.emptyStateContainer}>\n      <EmptyStateIcon icon={notFiltered ? PlusCircleIcon : SearchIcon} />\n      <Title headingLevel='h2' size='lg'>\n        {notFiltered\n          ? 'No custom repositories'\n          : 'No custom repositories match the filter criteria'}\n      </Title>\n      <EmptyStateBody>\n        {notFiltered\n          ? 'To get started, create a custom repository'\n          : 'Clear all filters to show more results'}\n      </EmptyStateBody>\n      {notFiltered ? (\n        <AddContent />\n      ) : (\n        <Button ouiaId='clear_filters' variant='link' onClick={clearFilters}>\n          Clear all filters\n        </Button>\n      )}\n    </EmptyState>\n  );\n};\n\nexport default EmptyTableState;\n","import { Text, Tooltip } from '@patternfly/react-core';\nimport { createUseStyles } from 'react-jss';\nimport { global_disabled_color_100 } from '@patternfly/react-tokens';\n\nconst useStyles = createUseStyles({\n  text: {\n    color: global_disabled_color_100.value,\n    width: 'fit-content',\n  },\n});\n\ninterface Props {\n  count?: number;\n  status?: string;\n}\n\nconst PackageCount = ({ count, status }: Props) => {\n  const classes = useStyles();\n\n  if (!count && status === 'Pending') {\n    return (\n      <Tooltip isContentLeftAligned content='Repository has not been introspected yet'>\n        <Text className={classes.text}>N/A</Text>\n      </Tooltip>\n    );\n  }\n\n  return <>{count}</>;\n};\n\nexport default PackageCount;\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  InfoCircleIcon,\n} from '@patternfly/react-icons';\nimport { Flex, FlexItem, Tooltip } from '@patternfly/react-core';\nimport StatusText from './StatusText';\nimport {\n  global_danger_color_100,\n  global_success_color_100,\n  global_warning_color_100,\n  global_info_color_100,\n} from '@patternfly/react-tokens';\n\nconst red = global_danger_color_100.value;\nconst green = global_success_color_100.value;\nconst gold = global_warning_color_100.value;\nconst blue = global_info_color_100.value;\n\ninterface Props {\n  status?: string;\n  error?: string;\n}\n\nconst StatusIcon = ({ status, error }: Props) => {\n  switch (status) {\n    case 'Valid':\n      return (\n        <Flex alignContent={{ default: 'alignContentCenter' }} direction={{ default: 'row' }}>\n          <FlexItem spacer={{ default: 'spacerSm' }}>\n            <CheckCircleIcon color={green} />\n          </FlexItem>\n          <FlexItem>\n            <StatusText color='green'>Valid</StatusText>\n          </FlexItem>\n        </Flex>\n      );\n    case 'Invalid':\n      return (\n        <Tooltip position='top-start' content={error}>\n          <Flex alignContent={{ default: 'alignContentCenter' }} direction={{ default: 'row' }}>\n            <FlexItem spacer={{ default: 'spacerSm' }}>\n              <ExclamationCircleIcon color={red} />\n            </FlexItem>\n            <FlexItem>\n              <StatusText color='red'>Invalid</StatusText>\n            </FlexItem>\n          </Flex>\n        </Tooltip>\n      );\n    case 'Unavailable':\n      return (\n        <Tooltip position='top-start' content={error}>\n          <Flex alignContent={{ default: 'alignContentCenter' }} direction={{ default: 'row' }}>\n            <FlexItem spacer={{ default: 'spacerSm' }}>\n              <ExclamationTriangleIcon color={gold} />\n            </FlexItem>\n            <FlexItem>\n              <StatusText color='gold'>Unavailable</StatusText>\n            </FlexItem>\n          </Flex>\n        </Tooltip>\n      );\n    case 'Pending':\n      return (\n        <Tooltip position='top-start' content='Repository has not been introspected yet'>\n          <Flex alignContent={{ default: 'alignContentCenter' }} direction={{ default: 'row' }}>\n            <FlexItem spacer={{ default: 'spacerSm' }}>\n              <InfoCircleIcon color={blue} />\n            </FlexItem>\n            <FlexItem>\n              <StatusText color='blue'>Pending</StatusText>\n            </FlexItem>\n          </Flex>\n        </Tooltip>\n      );\n    default:\n      return <></>;\n  }\n};\n\nexport default StatusIcon;\n","import { createUseStyles } from 'react-jss';\nimport {\n  global_danger_color_200,\n  global_info_color_200,\n  global_success_color_200,\n  global_warning_color_200,\n} from '@patternfly/react-tokens';\n\nconst red = global_danger_color_200.value;\nconst green = global_success_color_200.value;\nconst gold = global_warning_color_200.value;\nconst blue = global_info_color_200.value;\n\nconst useStyles = createUseStyles({\n  red: { color: red, fontWeight: 'bold', fontSize: '14px' },\n  green: { color: green, fontWeight: 'bold', fontSize: '14px' },\n  gold: { color: gold, fontWeight: 'bold', fontSize: '14px' },\n  blue: { color: blue, fontWeight: 'bold', fontSize: '14px' },\n});\n\ninterface Props {\n  color: 'red' | 'green' | 'gold' | 'blue';\n  children?: React.ReactNode;\n}\n\nconst StatusText = ({ color, children }: Props) => {\n  const classes = useStyles();\n\n  return <span className={classes[color]}>{children}</span>;\n};\n\nexport default StatusText;\n","import { Select, SelectOption, SelectProps, SelectVariant } from '@patternfly/react-core';\nimport React, { Dispatch, SetStateAction, useState } from 'react';\n\ninterface DropdownSelectProps extends Partial<SelectProps> {\n  options: Array<string>;\n  variant: SelectVariant.single | SelectVariant.checkbox | SelectVariant.typeaheadMulti;\n  selectedProp: any; // eslint-disable-line\n  setSelected: Dispatch<SetStateAction<any>>; // eslint-disable-line\n  toggleIcon?: React.ReactElement;\n  placeholderText?: string | React.ReactNode;\n  isDisabled?: boolean;\n}\n\nconst DropdownSelect = ({\n  options,\n  variant,\n  selectedProp,\n  setSelected,\n  toggleIcon,\n  placeholderText,\n  isDisabled,\n  ...rest\n}: DropdownSelectProps) => {\n  const selected = Array.isArray(selectedProp) ? selectedProp : [selectedProp];\n  const [isOpen, setIsOpen] = useState(false);\n  const onToggle = (isOpen) => setIsOpen(isOpen);\n\n  const selectFrom = options.map((option, index) => (\n    <SelectOption key={option + index} value={option} />\n  ));\n\n  const onSelect = (_event, selection) => {\n    switch (variant) {\n      case SelectVariant.single:\n        setSelected(selection);\n        setIsOpen(false);\n        break;\n      case SelectVariant.typeaheadMulti:\n      case SelectVariant.checkbox:\n        if (Array.isArray(selectedProp)) {\n          if (selected.includes(selection)) {\n            const remaining = selected.filter((item) => item !== selection);\n            setSelected(remaining);\n            break;\n          }\n          setSelected([...selected, selection]);\n          break;\n        }\n        break;\n    }\n  };\n\n  return (\n    <Select\n      isDisabled={isDisabled}\n      variant={variant}\n      onSelect={onSelect}\n      selections={selected}\n      isOpen={isOpen}\n      onToggle={onToggle}\n      placeholderText={placeholderText}\n      isCheckboxSelectionBadgeHidden\n      toggleIcon={toggleIcon}\n      {...rest}\n    >\n      {selectFrom}\n    </Select>\n  );\n};\n\nexport default DropdownSelect;\n","import {\n  Button,\n  FileUpload,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Popover,\n  Radio,\n  SelectVariant,\n  Stack,\n  StackItem,\n  TextInput,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { CheckCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { TableComposable, Tbody, Td, Tr } from '@patternfly/react-table';\nimport {\n  global_Color_200,\n  global_success_color_100,\n  global_link_Color,\n} from '@patternfly/react-tokens';\nimport { useFormik } from 'formik';\nimport { useEffect, useMemo } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport Hide from '../Hide/Hide';\nimport useDebounce from '../../services/useDebounce';\nimport {\n  REPOSITORY_PARAMS_KEY,\n  useEditContentQuery,\n  useValidateContentList,\n} from '../../services/Content/ContentQueries';\nimport { RepositoryParamsResponse } from '../../services/Content/ContentApi';\nimport DropdownSelect from '../DropdownSelect/DropdownSelect';\nimport { useQueryClient } from 'react-query';\nimport { isValidURL, makeValidationSchema, mapValidationData } from '../AddContent/helpers';\nimport ContentValidity from '../AddContent/components/ContentValidity';\nimport {\n  EditContentProps,\n  FormikEditValues,\n  mapFormikToEditAPIValues,\n  mapToDefaultFormikValues,\n} from './helpers';\nimport { isEqual } from 'lodash';\nimport OptionalTooltip from '../OptionalTooltip/OptionalTooltip';\n\nconst green = global_success_color_100.value;\n\nconst useStyles = createUseStyles({\n  description: {\n    color: global_Color_200.value,\n  },\n  removeSideBorder: {\n    '&:after': {\n      borderLeft: 'none!important',\n    },\n  },\n  toggleAllRow: {\n    composes: ['$removeSideBorder'],\n    cursor: 'pointer',\n    borderBottom: 'none!important',\n    '& td': {\n      color: global_link_Color.value + '!important',\n      padding: '12px 0!important',\n    },\n    '& svg': {\n      fill: global_link_Color.value + '!important',\n      padding: '',\n    },\n  },\n  colHeader: {\n    '& td': {\n      '&:not(:last-child)': { cursor: 'pointer' },\n      padding: '12px 0!important',\n    },\n  },\n  mainContentCol: {\n    composes: ['$removeSideBorder'],\n    padding: '16px 0px 16px 36px!important',\n  },\n  toggleAction: {\n    composes: ['$removeSideBorder'],\n    '& button': {\n      padding: '8px',\n    },\n  },\n  saveButton: {\n    marginRight: '36px',\n    transition: 'unset!important',\n  },\n});\n\nconst EditContentModal = ({ values, open, setClosed }: EditContentProps) => {\n  if (!open) return <></>;\n  const initialValues = mapToDefaultFormikValues(values);\n  const classes = useStyles();\n  const queryClient = useQueryClient();\n  const formik = useFormik({\n    initialValues: initialValues,\n    validateOnBlur: false,\n    validateOnChange: false,\n    validationSchema: makeValidationSchema(),\n    initialTouched: values.map(() => ({ name: true, url: true })),\n    onSubmit: () => undefined,\n  });\n\n  const valuesHaveChanged = useMemo(\n    () => !isEqual(initialValues, formik.values),\n    [initialValues, formik.values],\n  );\n  const { distribution_arches: distArches = [], distribution_versions: distVersions = [] } =\n    queryClient.getQueryData<RepositoryParamsResponse>(REPOSITORY_PARAMS_KEY) || {};\n\n  const { distributionArches, distributionVersions } = useMemo(() => {\n    const distributionArches = {};\n    const distributionVersions = {};\n    distArches.forEach(({ name, label }) => (distributionArches[name] = label));\n    distVersions.forEach(({ name, label }) => (distributionVersions[name] = label));\n    return { distributionArches, distributionVersions };\n  }, [distArches, distVersions]);\n\n  const closeModal = () => {\n    setClosed();\n    formik.resetForm();\n  };\n\n  const { mutateAsync: editContent, isLoading: isEditing } = useEditContentQuery(\n    queryClient,\n    mapFormikToEditAPIValues(formik.values),\n  );\n\n  const createDataLengthOf1 = formik.values.length === 1;\n\n  const allExpanded = !formik.values.some(({ expanded }) => !expanded);\n\n  const expandAllToggle = () => {\n    formik.setValues([...formik.values.map((vals) => ({ ...vals, expanded: !allExpanded }))]);\n  };\n\n  const updateVariable = (index: number, newValue) => {\n    const updatedData = [...formik.values];\n    updatedData[index] = { ...updatedData[index], ...newValue };\n    formik.setValues(updatedData);\n  };\n\n  const getFieldValidation = (\n    index: number,\n    field: keyof FormikEditValues,\n  ): 'default' | 'success' | 'error' => {\n    const hasNotChanged = isEqual(initialValues[index]?.[field], formik.values[index]?.[field]);\n    const errors = !!formik.errors[index]?.[field];\n    switch (true) {\n      case errors:\n        return 'error';\n      case hasNotChanged:\n        return 'default';\n      case !hasNotChanged:\n        return 'success';\n      default:\n        return 'default';\n    }\n  };\n\n  const debouncedValues = useDebounce(formik.values);\n\n  const { mutateAsync: validateContentList, data: validationList } = useValidateContentList();\n\n  useEffect(() => {\n    if (open)\n      validateContentList(\n        debouncedValues.map(({ name, url, gpgKey, metadataVerification, uuid }) => ({\n          name,\n          url,\n          gpg_key: gpgKey,\n          metadata_verification: metadataVerification,\n          uuid,\n        })),\n      ).then(async (validationData) => {\n        const formikErrors = await formik.validateForm(debouncedValues);\n        const mappedErrorData = mapValidationData(validationData, formikErrors);\n        formik.setErrors(mappedErrorData);\n      });\n  }, [debouncedValues, values, open]);\n\n  const onToggle = (index: number) => {\n    if (formik.values[index]?.expanded) {\n      updateVariable(index, { ...formik.values[index], expanded: false });\n    } else updateVariable(index, { ...formik.values[index], expanded: true });\n  };\n\n  const updateArchAndVersion = (index: number) => {\n    const url = formik.values[index]?.url;\n    if (\n      isValidURL(url) &&\n      (formik.values[index]?.arch === 'any' || formik.values[index].versions[0] === 'any')\n    ) {\n      const arch =\n        (formik.values[index]?.arch !== 'any' && formik.values[index]?.arch) ||\n        distArches.find(({ name, label }) => url.includes(name) || url.includes(label))?.label ||\n        '';\n\n      let versions: Array<string> = [];\n      if (formik.values[index]?.versions?.length && formik.values[index].versions[0] !== 'any') {\n        versions = formik.values[index]?.versions;\n      } else {\n        const newVersion = distVersions.find(\n          ({ name, label }) => url.includes(name) || url.includes(label),\n        )?.label;\n        if (newVersion) versions = [newVersion];\n      }\n      updateVariable(index, { arch, versions });\n    }\n  };\n\n  const urlOnBlur = (index: number) => {\n    updateArchAndVersion(index);\n  };\n\n  const setVersionSelected = (value: string[], index: number) => {\n    let valueToUpdate = value.map((val) => distributionVersions[val]);\n    if (value.length === 0 || valueToUpdate[value.length - 1] === 'any') {\n      valueToUpdate = ['any'];\n    }\n    if (valueToUpdate.length > 1 && valueToUpdate.includes('any')) {\n      valueToUpdate = valueToUpdate.filter((val) => val !== 'any');\n    }\n\n    updateVariable(index, {\n      versions: valueToUpdate,\n    });\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title='Edit custom repository'\n      help={\n        <Popover\n          headerContent={<div>Help Popover</div>}\n          bodyContent={\n            <div>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam id feugiat augue, nec\n              fringilla turpis.\n            </div>\n          }\n          footerContent='Popover Footer'\n        >\n          <Button variant='plain' aria-label='Help'>\n            <OutlinedQuestionCircleIcon />\n          </Button>\n        </Popover>\n      }\n      description={\n        <p className={classes.description}>\n          Edit by completing the form. Default values may be provided automatically.\n        </p>\n      }\n      isOpen={open}\n      onClose={closeModal}\n      footer={\n        <Stack>\n          <StackItem>\n            <Button\n              className={classes.saveButton}\n              key='confirm'\n              variant='primary'\n              isLoading={isEditing}\n              isDisabled={\n                !formik.isValid ||\n                isEditing ||\n                !valuesHaveChanged ||\n                !isEqual(formik.values, debouncedValues)\n              }\n              onClick={() => {\n                editContent().then(closeModal);\n              }}\n            >\n              {valuesHaveChanged ? 'Save changes' : 'No changes'}\n            </Button>\n            <Button key='cancel' variant='link' onClick={closeModal}>\n              Cancel\n            </Button>\n          </StackItem>\n        </Stack>\n      }\n    >\n      <TableComposable aria-label='Expandable table'>\n        <Hide hide={createDataLengthOf1}>\n          <Tbody isExpanded={allExpanded}>\n            <Tr onClick={expandAllToggle} className={classes.toggleAllRow}>\n              <Td\n                className={classes.toggleAction}\n                isActionCell\n                expand={{\n                  rowIndex: 0,\n                  isExpanded: allExpanded,\n                }}\n              />\n              <Td dataLabel='expand-collapse'>{allExpanded ? 'Collapse all' : 'Expand all'}</Td>\n            </Tr>\n          </Tbody>\n        </Hide>\n        {formik.values.map(\n          (\n            { expanded, name, url, arch, gpgKey, versions, gpgLoading, metadataVerification },\n            index,\n          ) => (\n            <Tbody key={index} isExpanded={createDataLengthOf1 ? undefined : expanded}>\n              <Hide hide={createDataLengthOf1}>\n                <Tr className={classes.colHeader}>\n                  <Td\n                    onClick={() => onToggle(index)}\n                    className={classes.toggleAction}\n                    isActionCell\n                    expand={{\n                      rowIndex: index,\n                      isExpanded: expanded,\n                    }}\n                  />\n                  <Td width={35} onClick={() => onToggle(index)} dataLabel={name}>\n                    {name || 'New content'}\n                  </Td>\n                  <Td onClick={() => onToggle(index)} dataLabel='validity'>\n                    <ContentValidity\n                      touched={formik.touched[index]}\n                      errors={formik.errors[index]}\n                    />\n                  </Td>\n                </Tr>\n              </Hide>\n              <Tr isExpanded={createDataLengthOf1 ? undefined : expanded}>\n                <Td colSpan={4} className={createDataLengthOf1 ? '' : classes.mainContentCol}>\n                  <Form>\n                    <FormGroup\n                      label='Name'\n                      isRequired\n                      fieldId='namegroup'\n                      validated={getFieldValidation(index, 'name')}\n                      helperTextInvalid={formik.errors[index]?.name}\n                    >\n                      <TextInput\n                        isRequired\n                        id='name'\n                        name='name'\n                        label='Name'\n                        type='text'\n                        validated={getFieldValidation(index, 'name')}\n                        onChange={(value) => {\n                          updateVariable(index, { name: value });\n                        }}\n                        value={name || ''}\n                        placeholder='Enter name'\n                      />\n                    </FormGroup>\n                    <FormGroup\n                      label='URL'\n                      isRequired\n                      fieldId='url'\n                      validated={getFieldValidation(index, 'url')}\n                      helperTextInvalid={formik.errors[index]?.url}\n                    >\n                      <TextInput\n                        isRequired\n                        type='url'\n                        validated={getFieldValidation(index, 'url')}\n                        onBlur={() => urlOnBlur(index)}\n                        onChange={(value) => {\n                          if (url !== value) {\n                            updateVariable(index, { url: value });\n                          }\n                        }}\n                        value={url || ''}\n                        placeholder='https://'\n                        id='url'\n                        name='url'\n                        label='Url'\n                      />\n                    </FormGroup>\n                    <FormGroup\n                      label='Restrict architecture'\n                      labelIcon={\n                        <Tooltip content='Something super important and stuff'>\n                          <OutlinedQuestionCircleIcon\n                            className='pf-u-ml-xs'\n                            color={global_Color_200.value}\n                          />\n                        </Tooltip>\n                      }\n                      fieldId='arch'\n                    >\n                      <DropdownSelect\n                        validated={getFieldValidation(index, 'arch')}\n                        menuAppendTo={document.body}\n                        toggleId={'archSelection' + index}\n                        options={Object.keys(distributionArches)}\n                        variant={SelectVariant.single}\n                        selectedProp={Object.keys(distributionArches).find(\n                          (key: string) => arch === distributionArches[key],\n                        )}\n                        setSelected={(value) =>\n                          updateVariable(index, { arch: distributionArches[value] })\n                        }\n                      />\n                    </FormGroup>\n                    <FormGroup\n                      label='Restrict OS version'\n                      labelIcon={\n                        <Tooltip content='Something super important and stuff'>\n                          <OutlinedQuestionCircleIcon\n                            className='pf-u-ml-xs'\n                            color={global_Color_200.value}\n                          />\n                        </Tooltip>\n                      }\n                      fieldId='version'\n                    >\n                      <DropdownSelect\n                        validated={getFieldValidation(index, 'versions')}\n                        menuAppendTo={document.body}\n                        toggleId={'versionSelection' + index}\n                        options={Object.keys(distributionVersions)}\n                        variant={SelectVariant.typeaheadMulti}\n                        selectedProp={Object.keys(distributionVersions).filter((key: string) =>\n                          versions?.includes(distributionVersions[key]),\n                        )}\n                        placeholderText={versions?.length ? '' : 'Any version'}\n                        setSelected={(value) => setVersionSelected(value, index)}\n                      />\n                    </FormGroup>\n                    <FormGroup\n                      label='GPG key'\n                      labelIcon={\n                        <Tooltip content='Something super important and stuff'>\n                          <OutlinedQuestionCircleIcon\n                            className='pf-u-ml-xs'\n                            color={global_Color_200.value}\n                          />\n                        </Tooltip>\n                      }\n                      fieldId='gpgKey'\n                      validated={getFieldValidation(index, 'gpgKey')}\n                      helperTextInvalid={formik.errors[index]?.gpgKey}\n                    >\n                      <FileUpload\n                        id='gpgKey-uploader'\n                        type='text'\n                        filenamePlaceholder='Drag a file here or upload one'\n                        textAreaPlaceholder='Paste GPG key or URL here'\n                        value={gpgKey}\n                        isLoading={gpgLoading}\n                        validated={getFieldValidation(index, 'gpgKey')}\n                        onDataChange={(value) => updateVariable(index, { gpgKey: value })}\n                        onTextChange={(value) => {\n                          if (isValidURL(value)) {\n                            updateVariable(index, { gpgLoading: true });\n                            // TODO: add call to GPGkey api\n                            return setTimeout(\n                              () => updateVariable(index, { gpgLoading: false }),\n                              1500,\n                            );\n                          }\n                          updateVariable(index, {\n                            gpgKey: value,\n                            ...(gpgKey === '' && !!value\n                              ? {\n                                  metadataVerification:\n                                    !!validationList?.[index]?.url?.metadata_signature_present,\n                                }\n                              : {}),\n                          });\n                        }}\n                        onClearClick={() => updateVariable(index, { gpgKey: '' })}\n                        dropzoneProps={{\n                          accept: '.txt',\n                          maxSize: 4096,\n                          onDropRejected: (e) => console.log('onDropRejected', e),\n                        }}\n                        allowEditingUploadedText\n                        browseButtonText='Upload'\n                      />\n                    </FormGroup>\n                    <Hide hide={!gpgKey}>\n                      <FormGroup fieldId='metadataVerification' label='Use GPG key for' isInline>\n                        <Radio\n                          isDisabled={\n                            validationList?.[index]?.url?.metadata_signature_present !== true\n                          }\n                          id='package verification only'\n                          name='package-verification-only'\n                          label='Package verification only'\n                          isChecked={!metadataVerification}\n                          onChange={() => updateVariable(index, { metadataVerification: false })}\n                        />\n                        <OptionalTooltip\n                          show={validationList?.[index]?.url?.metadata_signature_present !== true}\n                          content=\"This repository's metadata is not signed, metadata verification is not possible.\"\n                        >\n                          <Radio\n                            isDisabled={\n                              validationList?.[index]?.url?.metadata_signature_present !== true\n                            }\n                            id='Package and metadata verification'\n                            name='package-and-repository-verification'\n                            label='Package and metadata verification'\n                            isChecked={metadataVerification}\n                            onChange={() => updateVariable(index, { metadataVerification: true })}\n                          />\n                        </OptionalTooltip>\n                        <Hide\n                          hide={getFieldValidation(index, 'metadataVerification') !== 'success'}\n                        >\n                          <CheckCircleIcon noVerticalAlign color={green} />\n                        </Hide>\n                      </FormGroup>\n                    </Hide>\n                  </Form>\n                </Td>\n              </Tr>\n            </Tbody>\n          ),\n        )}\n      </TableComposable>\n    </Modal>\n  );\n};\n\nexport default EditContentModal;\n","import { ContentItem, EditContentRequest } from './../../services/Content/ContentApi';\nexport interface EditContentProps {\n  setClosed: () => void;\n  open: boolean;\n  values: ContentItem[];\n}\n\nexport interface FormikEditValues {\n  name: string;\n  url: string;\n  gpgKey: string;\n  metadataVerification: boolean;\n  arch: string;\n  versions: string[];\n  gpgLoading: boolean;\n  expanded: boolean;\n  uuid: string;\n}\n\nexport const mapFormikToEditAPIValues = (formikValues: FormikEditValues[]): EditContentRequest =>\n  formikValues.map(({ name, url, arch, versions, gpgKey, metadataVerification, uuid }) => ({\n    uuid,\n    name,\n    url,\n    distribution_arch: arch,\n    distribution_versions: versions,\n    gpg_key: gpgKey,\n    metadata_verification: metadataVerification,\n  }));\n\nexport const mapToDefaultFormikValues = (values: EditContentProps['values']): FormikEditValues[] =>\n  values.map(\n    (\n      {\n        name,\n        url,\n        distribution_arch: arch,\n        distribution_versions: versions,\n        uuid,\n        gpg_key: gpgKey,\n        metadata_verification: metadataVerification,\n      },\n      index,\n    ) => ({\n      name,\n      url,\n      arch,\n      versions,\n      gpgKey,\n      gpgLoading: false,\n      metadataVerification,\n      expanded: index + 1 === values.length,\n      uuid,\n    }),\n  );\n","import { ErrorBoundary as _ErrorBoundaryPage } from '@redhat-cloud-services/frontend-components';\n\nconst ErrorBoundaryPage = _ErrorBoundaryPage as unknown as React.FunctionComponent<{\n  children: React.ReactNode;\n  headerTitle: string;\n  errorTitle?: string;\n  errorDescription?: string;\n}>;\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport const ErrorPage = ({ children }: Props) => (\n  <ErrorBoundaryPage\n    headerTitle='Content Sources'\n    errorTitle='Unhandled error'\n    errorDescription='There was a problem trying to process your request'\n  >\n    {children}\n  </ErrorBoundaryPage>\n);\n","interface Props {\n  hide: boolean;\n  children?: React.ReactNode;\n}\n\nconst Hide = ({ hide, children }: Props) => (hide ? <></> : <>{children}</>);\n\nexport default Hide;\n","import { Tooltip, TooltipProps } from '@patternfly/react-core';\n\ninterface Props extends TooltipProps {\n  show: boolean;\n}\n\nconst OptionalTooltip = ({ show, children, ...rest }: Props) =>\n  show ? <Tooltip {...rest}>{children}</Tooltip> : <>{children}</>;\n\nexport default OptionalTooltip;\n","import { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  link: {\n    alignItems: 'center',\n    display: 'flex',\n  },\n  icon: {\n    marginLeft: '5px',\n  },\n});\n\ninterface Props {\n  href: string;\n}\n\nconst UrlWithExternalIcon = ({ href }: Props) => {\n  const classes = useStyles();\n  return (\n    <>\n      <a href={href} className={classes.link} rel='noreferrer' target='_blank'>\n        {href} <ExternalLinkAltIcon className={classes.icon} />\n      </a>\n    </>\n  );\n};\n\nexport default UrlWithExternalIcon;\n","import { Text } from '@patternfly/react-core';\nimport { global_Color_100 } from '@patternfly/react-tokens';\nimport {\n  Main,\n  PageHeader as _PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components';\nimport { PageHeaderProps as _PageHeaderProps } from '@redhat-cloud-services/frontend-components/PageHeader/PageHeader';\nimport { FunctionComponent, ReactElement } from 'react';\nimport { createUseStyles } from 'react-jss';\n\nimport ContentListTable from '../../components/ContentListTable/ContentListTable';\n\nconst useStyles = createUseStyles({\n  subtext: {\n    color: global_Color_100.value,\n  },\n});\n\n// Example of how to extend inaccurately typed imports\ninterface PageHeaderProps extends _PageHeaderProps {\n  children?: ReactElement;\n}\n\nconst PageHeader = _PageHeader as FunctionComponent<PageHeaderProps>;\n\nconst ContentPage = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <PageHeader>\n        <>\n          <PageHeaderTitle title='Custom Repositories' />\n          <Text className={classes.subtext}>\n            View all custom repositories within your organization\n          </Text>\n        </>\n      </PageHeader>\n      <Main>\n        <ContentListTable />\n      </Main>\n    </>\n  );\n};\n\nexport default ContentPage;\n","import axios from 'axios';\n\nexport interface ContentItem {\n  uuid: string;\n  name: string;\n  package_count: number;\n  url: string;\n  distribution_versions: Array<string>;\n  distribution_arch: string;\n  account_id: string;\n  org_id: string;\n  status: string;\n  last_introspection_error: string;\n  gpg_key: string;\n  metadata_verification: boolean;\n}\n\nexport interface CreateContentRequestItem {\n  name: string;\n  url: string;\n  distribution_versions?: Array<string>;\n  distribution_arch?: string;\n  gpg_key?: string;\n  metadata_verification?: boolean;\n}\n\nexport interface CreateContentResponseItem {\n  error: string;\n  repository: ContentItem;\n}\n\nexport type CreateContentRequestResponse = CreateContentResponseItem[];\n\nexport type CreateContentRequest = Array<CreateContentRequestItem>;\n\nexport interface EditContentRequestItem {\n  uuid: string;\n  name: string;\n  url: string;\n  distribution_arch: string;\n  distribution_versions: string[];\n  gpg_key: string;\n  metadata_verification: boolean;\n}\n\nexport type EditContentRequest = Array<EditContentRequestItem>;\n\nexport type ContentList = Array<ContentItem>;\n\nexport type Links = {\n  first: string;\n  last: string;\n  next: string;\n};\n\nexport type Meta = {\n  count: number;\n  limit: number;\n  offset: number;\n};\n\nexport interface ContentListResponse {\n  data: ContentList;\n  links: Links;\n  meta: Meta;\n}\n\nexport interface RepositoryParamsResponse {\n  distribution_versions: Array<NameLabel>;\n  distribution_arches: Array<NameLabel>;\n}\n\nexport type NameLabel = {\n  name: string;\n  label: string;\n};\n\nexport type FilterData = {\n  searchQuery: string;\n  versions: Array<string>;\n  arches: Array<string>;\n};\n\nexport type ValidateItem = {\n  skipped: boolean;\n  valid: boolean;\n  error: string;\n};\n\nexport interface ValidationUrl extends ValidateItem {\n  http_code: number;\n  metadata_present: boolean;\n  metadata_signature_present: boolean;\n}\n\nexport type ValidationResponse = {\n  name?: ValidateItem;\n  url?: ValidationUrl;\n  distribution_versions?: ValidateItem;\n  distribution_arch?: ValidateItem;\n  gpg_key?: ValidateItem;\n}[];\n\nexport const getContentList: (\n  page: number,\n  limit: number,\n  filterData: FilterData,\n  sortBy: string,\n) => Promise<ContentListResponse> = async (page, limit, filterData, sortBy) => {\n  const searchQuery = filterData.searchQuery;\n  const versionParam = filterData.versions.join(',');\n  const archParam = filterData.arches.join(',');\n  const { data } = await axios.get(\n    `/api/content-sources/v1/repositories/?offset=${\n      (page - 1) * limit\n    }&limit=${limit}&search=${searchQuery}&version=${versionParam}&arch=${archParam}&sort_by=${sortBy}`,\n  );\n  return data;\n};\n\nexport const deleteContentListItem: (uuid: string) => Promise<void> = async (uuid: string) => {\n  const { data } = await axios.delete(`/api/content-sources/v1/repositories/${uuid}`);\n  return data;\n};\n\nexport const AddContentListItems: (\n  request: CreateContentRequest,\n) => Promise<CreateContentRequestResponse> = async (request) => {\n  const { data } = await axios.post('/api/content-sources/v1.0/repositories/bulk_create/', request);\n  return data;\n};\n\nexport const EditContentListItem: (request: EditContentRequestItem) => Promise<void> = async (\n  request,\n) => {\n  const { data } = await axios.patch(\n    `/api/content-sources/v1.0/repositories/${request.uuid}`,\n    request,\n  );\n  return data;\n};\n\nexport const getRepositoryParams: () => Promise<RepositoryParamsResponse> = async () => {\n  const { data } = await axios.get('/api/content-sources/v1/repository_parameters/');\n  return data;\n};\n\nexport const validateContentListItems: (\n  request: CreateContentRequest,\n) => Promise<ValidationResponse> = async (request) => {\n  const { data } = await axios.post(\n    '/api/content-sources/v1.0/repository_parameters/validate/',\n    request,\n  );\n  return data;\n};\n","import { AlertVariant } from '@patternfly/react-core';\nimport { QueryClient, useMutation, useQuery } from 'react-query';\n\nimport { useNotification } from './../Notifications/Notifications';\nimport {\n  ContentListResponse,\n  deleteContentListItem,\n  getContentList,\n  RepositoryParamsResponse,\n  getRepositoryParams,\n  AddContentListItems,\n  CreateContentRequest,\n  FilterData,\n  validateContentListItems,\n  EditContentListItem,\n  EditContentRequest,\n} from './ContentApi';\n\nexport const CONTENT_LIST_KEY = 'CONTENT_LIST_KEY';\nexport const REPOSITORY_PARAMS_KEY = 'REPOSITORY_PARAMS_KEY';\nexport const CREATE_PARAMS_KEY = 'CREATE_PARAMS_KEY';\n\nexport const useContentListQuery = (\n  page: number,\n  limit: number,\n  filterData: FilterData,\n  sortBy: string,\n) =>\n  useQuery<ContentListResponse>(\n    [CONTENT_LIST_KEY, page, limit, sortBy, ...Object.values(filterData)],\n    () => getContentList(page, limit, filterData, sortBy),\n    {\n      keepPreviousData: true,\n      staleTime: 20000,\n      optimisticResults: true,\n    },\n  );\n\nexport const useAddContentQuery = (queryClient: QueryClient, request: CreateContentRequest) => {\n  const { notify } = useNotification();\n  return useMutation(() => AddContentListItems(request), {\n    onSuccess: () => {\n      const title =\n        request?.length > 1\n          ? `${request?.length} custom repositories added`\n          : `Custom repository \"${request?.[0]?.name}\" added`;\n      notify({\n        variant: AlertVariant.success,\n        title,\n        description: 'Repository introspection may take some time',\n      });\n      queryClient.invalidateQueries(CONTENT_LIST_KEY);\n    },\n    onError: (err: { response?: { data: string | Array<{ error: string | null }> } }) => {\n      let description = 'An error occurred';\n\n      switch (typeof err?.response?.data) {\n        case 'string':\n          description = err?.response?.data;\n          break;\n        case 'object':\n          // Only show the first error\n          err?.response?.data.find(({ error }) => {\n            if (error) {\n              description = error;\n              return true;\n            }\n          })?.error;\n          break;\n        default:\n          break;\n      }\n\n      notify({\n        variant: AlertVariant.danger,\n        title: 'Error adding items to content list',\n        description,\n      });\n    },\n  });\n};\n\nexport const useEditContentQuery = (queryClient: QueryClient, request: EditContentRequest) => {\n  const { notify } = useNotification();\n  return useMutation(() => EditContentListItem(request[0]), {\n    onSuccess: () => {\n      notify({\n        variant: AlertVariant.success,\n        title: `Successfully edited ${request.length} ${request.length > 1 ? 'items' : 'item'}`,\n      });\n      queryClient.invalidateQueries(CONTENT_LIST_KEY);\n    },\n    onError: (err: { response?: { data: string | Array<{ error: string | null }> } }) => {\n      let description = 'An error occurred';\n\n      switch (typeof err?.response?.data) {\n        case 'string':\n          description = err?.response?.data;\n          break;\n        case 'object':\n          // Only show the first error\n          err?.response?.data.find(({ error }) => {\n            if (error) {\n              description = error;\n              return true;\n            }\n          })?.error;\n          break;\n        default:\n          break;\n      }\n\n      notify({\n        variant: AlertVariant.danger,\n        title: 'Error editing items on content list',\n        description,\n      });\n    },\n  });\n};\n\nexport const useValidateContentList = () => {\n  const { notify } = useNotification();\n  return useMutation((request: CreateContentRequest) => validateContentListItems(request), {\n    onError: (err) => {\n      const error = err as Error; // Forced Type\n      notify({\n        variant: AlertVariant.danger,\n        title: 'Error validating form fields',\n        description: error?.message,\n      });\n    },\n  });\n};\n\nexport const useDeleteContentItemMutate = (\n  queryClient: QueryClient,\n  page: number,\n  perPage: number,\n  filterData: FilterData,\n  sortString: string,\n) => {\n  const contentListKeyArray = [\n    CONTENT_LIST_KEY,\n    page,\n    perPage,\n    ...Object.values(filterData),\n    sortString,\n  ];\n  const { notify } = useNotification();\n  return useMutation(deleteContentListItem, {\n    onMutate: async (uuid: string) => {\n      // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n      await queryClient.cancelQueries(contentListKeyArray);\n      // Snapshot the previous value\n      const previousData: Partial<ContentListResponse> =\n        queryClient.getQueryData(contentListKeyArray) || {};\n\n      // Optimistically update to the new value\n      queryClient.setQueryData(contentListKeyArray, () => ({\n        ...previousData,\n        data: previousData.data?.filter((data) => uuid !== data.uuid),\n        meta: previousData.meta\n          ? {\n              ...previousData.meta,\n              count: previousData.meta.count ? previousData.meta.count - 1 : 1,\n            }\n          : undefined,\n      }));\n      // Return a context object with the snapshotted value\n      return { previousData, queryClient };\n    },\n    onSuccess: (_data, _variables, context) => {\n      // Update all of the existing calls \"count\" to prevent number jumping on pagination\n      const { previousData } = context as {\n        previousData: ContentListResponse;\n      };\n      queryClient.setQueriesData(CONTENT_LIST_KEY, (data: Partial<ContentListResponse> = {}) => {\n        if (data?.meta?.count) {\n          data.meta.count = previousData?.meta?.count - 1;\n        }\n\n        return data;\n      });\n      queryClient.invalidateQueries(CONTENT_LIST_KEY);\n    },\n    // If the mutation fails, use the context returned from onMutate to roll back\n    onError: (err, _newData, context) => {\n      if (context) {\n        const { previousData } = context as {\n          previousData: ContentListResponse;\n        };\n        queryClient.setQueryData(contentListKeyArray, previousData);\n        const error = err as Error; // Forced Type\n        notify({\n          variant: AlertVariant.danger,\n          title: 'Error deleting item from content list',\n          description: error?.message,\n        });\n      }\n    },\n  });\n};\n\nexport const useRepositoryParams = () =>\n  useQuery<RepositoryParamsResponse>(REPOSITORY_PARAMS_KEY, getRepositoryParams, {\n    keepPreviousData: true,\n    staleTime: Infinity,\n  });\n","import { AlertVariant } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useDispatch } from 'react-redux';\n\ninterface NotificationPayload {\n  title: React.ReactNode | string;\n  variant: AlertVariant;\n  description?: React.ReactNode | string;\n  dismissable?: boolean;\n}\n\nexport const useNotification = () => {\n  const dispatch = useDispatch();\n  const notify = (payload: NotificationPayload) => dispatch(addNotification(payload));\n\n  return { notify };\n};\n","import { useEffect, useState } from 'react';\n\nfunction useDebounce<T>(value: T, delay?: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setDebouncedValue(value), delay || 500);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\nexport default useDebounce;\n","import { initStore, restoreStore } from '@redhat-cloud-services/insights-common-typescript';\nimport { Middleware } from 'redux';\n\nexport const createStore = (...middleware: Middleware[]) => initStore({}, {}, ...middleware);\n\nexport const resetStore = () => restoreStore();\n"],"names":["getRegistry","history","useHistory","chrome","useChrome","useEffect","unregister","register","notifications","notificationsReducer","init","updateDocumentTitle","onChromeEvent","insights","appname","event","push","navId","Routes","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","logger","store","useMemo","resetStore","createStore","appAction","Provider","QueryClientProvider","client","basename","getBaseName","window","location","pathname","pathRoutes","path","component","Suspense","fallback","Bullseye","Spinner","Switch","map","Component","Route","ErrorPage","Redirect","exact","to","useStyles","createUseStyles","description","color","global_Color_200","value","removeSideBorder","borderLeft","toggleAllRow","composes","cursor","borderBottom","global_link_Color","padding","fill","colHeader","mainContentCol","toggleAction","addRepositoryButton","marginBottom","saveButton","marginRight","transition","removeButton","display","justifyContent","defaultValues","name","url","gpgKey","arch","versions","gpgLoading","expanded","metadataVerification","isLoading","useState","isModalOpen","setIsModalOpen","classes","useQueryClient","formik","useFormik","initialValues","validateOnBlur","validateOnChange","validationSchema","makeValidationSchema","initialTouched","onSubmit","getQueryData","REPOSITORY_PARAMS_KEY","distribution_arches","distArches","distribution_versions","distVersions","distributionArches","distributionVersions","forEach","label","closeModal","resetForm","useAddContentQuery","mapFormikToAPIValues","values","addContent","isAdding","createDataLengthOf1","length","allExpanded","some","updateVariable","index","newValue","updatedData","setValues","updateTouched","field","touched","updatedTouched","setTouched","getFieldValidation","errors","setTouchedOnLastItemIfUntouchedAndCollapsed","lastItem","debouncedValues","useValidateContentList","validateContentList","validationList","gpg_key","metadata_verification","then","validationData","validateForm","formikErrors","mappedErrorData","mapValidationData","setErrors","onToggle","Button","id","ouiaId","variant","isDisabled","onClick","Modal","ModalVariant","medium","title","help","Popover","headerContent","bodyContent","footerContent","OutlinedQuestionCircleIcon","className","isOpen","onClose","footer","Stack","StackItem","isValid","vals","icon","PlusCircleIcon","baseArray","Array","from","keys","newValues","Math","random","toString","substring","magicURLList","TableComposable","hide","Tbody","isExpanded","Tr","Td","isActionCell","expand","rowIndex","dataLabel","undefined","width","splice","newTouched","newErrors","removeRepository","MinusCircleIcon","colSpan","Form","FormGroup","isRequired","fieldId","validated","helperTextInvalid","TextInput","type","onBlur","onChange","placeholder","isValidURL","find","includes","newVersion","updateArchAndVersion","urlOnBlur","labelIcon","Tooltip","content","menuAppendTo","document","body","toggleId","options","Object","SelectVariant","single","selectedProp","key","setSelected","typeaheadMulti","filter","placeholderText","valueToUpdate","val","setVersionSelected","FileUpload","filenamePlaceholder","textAreaPlaceholder","onDataChange","onTextChange","setTimeout","metadata_signature_present","onClearClick","dropzoneProps","accept","maxSize","onDropRejected","e","console","log","allowEditingUploadedText","browseButtonText","isInline","Radio","isChecked","show","red","global_danger_color_100","green","global_success_color_100","fontWeight","fontSize","loading","allTouched","every","noErrors","hasTouchedError","size","Flex","alignContent","default","direction","FlexItem","spacer","CheckCircleIcon","ExclamationCircleIcon","REGEX_URL","regex","RegExp","match","formikValues","distribution_arch","updatedValidationData","rest","error","metadata_present","http_code","mapNoMetaDataError","err","isEmpty","Yup","addMethod","object","propertyName","message","this","test","parent","v","createError","array","shape","string","min","max","required","uniqueProperty","chipsContainer","backgroundColor","global_BackgroundColor_100","paddingTop","clearFilters","marginLeft","searchInput","paddingRight","searchIcon","global_secondary_color_100","position","top","left","pointerEvents","setFilterData","filterData","filterType","setFilterType","versionNamesLabels","setVersionNamesLabels","archNamesLabels","setArchNamesLabels","searchQuery","setSearchQuery","selectedVersions","setSelectedVersions","selectedArches","setSelectedArches","arches","debouncedSearchQuery","debouncedSelectedVersions","debouncedSelectedArches","getLabels","names","namesLabels","labels","found","deleteItem","chips","setChips","chip","version","InputGroup","toggleIcon","FilterIcon","SearchIcon","checkbox","getSelectionByType","fullWidth","ChipGroup","categoryName","Chip","mainContainer","flexDirection","mainContainer100Height","minHeight","topContainer","height","bottomContainer","invisible","opacity","storedPerPage","Number","localStorage","getItem","page","setPage","perPage","setPerPage","editModalOpen","setEditModalOpen","editValues","setEditValues","activeSortIndex","setActiveSortIndex","activeSortDirection","setActiveSortDirection","notFiltered","useRepositoryParams","repositoryParamsLoading","repositoryParamsError","repositoryParamsIsError","data","columnSortAttributes","sortString","useContentListQuery","isError","isFetching","meta","count","limit","offset","useDeleteContentItemMutate","actionTakingPlace","onSetPage","_","newPage","onPerPageSelect","newPerPage","setItem","columnHeaders","archesDisplay","contentList","rowActions","useCallback","rowData","uuid","countIsZero","Grid","open","setClosed","Pagination","widgetId","perPageComponent","itemCount","isCompact","SkeletonTable","rowSize","colSize","TableVariant","compact","Thead","columnHeader","Th","sort","columnIndex","sortBy","defaultDirection","onSort","_event","package_count","status","last_introspection_error","href","join","ActionsColumn","items","PaginationVariant","bottom","emptyStateContainer","flexGrow","EmptyState","EmptyStateVariant","full","EmptyStateIcon","Title","headingLevel","EmptyStateBody","text","global_disabled_color_100","isContentLeftAligned","Text","gold","global_warning_color_100","blue","global_info_color_100","ExclamationTriangleIcon","InfoCircleIcon","global_danger_color_200","global_success_color_200","global_warning_color_200","global_info_color_200","children","selected","isArray","setIsOpen","selectFrom","option","SelectOption","Select","onSelect","selection","remaining","item","selections","isCheckboxSelectionBadgeHidden","mapToDefaultFormikValues","valuesHaveChanged","isEqual","useEditContentQuery","mapFormikToEditAPIValues","editContent","isEditing","hasNotChanged","noVerticalAlign","ErrorBoundaryPage","headerTitle","errorTitle","errorDescription","link","alignItems","rel","target","ExternalLinkAltIcon","subtext","global_Color_100","PageHeader","PageHeaderTitle","Main","getContentList","versionParam","archParam","get","deleteContentListItem","delete","AddContentListItems","request","post","EditContentListItem","patch","getRepositoryParams","validateContentListItems","CONTENT_LIST_KEY","CREATE_PARAMS_KEY","useQuery","keepPreviousData","staleTime","optimisticResults","notify","useNotification","useMutation","onSuccess","AlertVariant","success","invalidateQueries","onError","response","danger","contentListKeyArray","onMutate","cancelQueries","previousData","setQueryData","_data","_variables","context","setQueriesData","_newData","Infinity","dispatch","useDispatch","payload","addNotification","delay","debouncedValue","setDebouncedValue","timer","clearTimeout","initStore","middleware","restoreStore"],"sourceRoot":""}